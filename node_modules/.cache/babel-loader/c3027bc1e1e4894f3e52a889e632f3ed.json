{"ast":null,"code":"import Image from '../Image';\nimport getImageParameters from './getImageParameters';\n/**\n * Use this function to support getting the output image of an algorithm from user-supplied\n * options.\n * @private\n * @param {Image} thisImage - Original image on which the algorithm will be applied\n * @param {object} options - Options object received by the algorithm\n * @param {Image} [options.out] - If set, must be an image compatible with the algorithm\n * @param {object} newParameters - Parameters that will be combined with the ones from `thisImage`.\n * @param {object} internalOptions - Some additional options on the way to create the output image\n * @return {Image}\n */\n\nexport function getOutputImage(thisImage, options, newParameters, internalOptions = {}) {\n  const {\n    out\n  } = options;\n\n  if (out === undefined) {\n    if (internalOptions.copy) {\n      return thisImage.clone();\n    } else {\n      return Image.createFrom(thisImage, newParameters);\n    }\n  } else {\n    if (!Image.isImage(out)) {\n      throw new TypeError('out must be an Image object');\n    }\n\n    const requirements = Object.assign(getImageParameters(thisImage), newParameters);\n\n    for (const property in requirements) {\n      if (out[property] !== requirements[property]) {\n        throw new RangeError(`cannot use out. Its ${property} must be \"${requirements[property]}\" (found \"${out[property]}\")`);\n      }\n    }\n\n    return out;\n  }\n}\n/**\n * Same as getOutputImage but allows for an `inPlace` option.\n * @private\n * @param {Image} thisImage\n * @param {object} options\n * @param {boolean} [options.inPlace=false] - If true, thisImage is returned\n * @param {Image} [options.out]\n * @param {object} internalOptions - Additional internal options on how to create the output image\n * @param {boolean} [interalOptions.copy] - If true will copy the original image instead of creating a new empty image\n * @return {Image}\n */\n\nexport function getOutputImageOrInPlace(thisImage, options, internalOptions) {\n  if (options.inPlace !== undefined && typeof options.inPlace !== 'boolean') {\n    throw new TypeError('inPlace option must be a boolean');\n  }\n\n  if (options.inPlace) {\n    if (options.out !== undefined) {\n      throw new TypeError('out option must not be set if inPlace option is true');\n    }\n\n    return thisImage;\n  }\n\n  return getOutputImage(thisImage, options, null, internalOptions);\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/node_modules/image-js/src/image/internal/getOutputImage.js"],"names":["Image","getImageParameters","getOutputImage","thisImage","options","newParameters","internalOptions","out","undefined","copy","clone","createFrom","isImage","TypeError","requirements","Object","assign","property","RangeError","getOutputImageOrInPlace","inPlace"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,UAAlB;AAEA,OAAOC,kBAAP,MAA+B,sBAA/B;AAEA;;;;;;;;;;;;AAWA,OAAO,SAASC,cAAT,CACLC,SADK,EAELC,OAFK,EAGLC,aAHK,EAILC,eAAe,GAAG,EAJb,EAKL;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAUH,OAAhB;;AACA,MAAIG,GAAG,KAAKC,SAAZ,EAAuB;AACrB,QAAIF,eAAe,CAACG,IAApB,EAA0B;AACxB,aAAON,SAAS,CAACO,KAAV,EAAP;AACD,KAFD,MAEO;AACL,aAAOV,KAAK,CAACW,UAAN,CAAiBR,SAAjB,EAA4BE,aAA5B,CAAP;AACD;AACF,GAND,MAMO;AACL,QAAI,CAACL,KAAK,CAACY,OAAN,CAAcL,GAAd,CAAL,EAAyB;AACvB,YAAM,IAAIM,SAAJ,CAAc,6BAAd,CAAN;AACD;;AACD,UAAMC,YAAY,GAAGC,MAAM,CAACC,MAAP,CACnBf,kBAAkB,CAACE,SAAD,CADC,EAEnBE,aAFmB,CAArB;;AAIA,SAAK,MAAMY,QAAX,IAAuBH,YAAvB,EAAqC;AACnC,UAAIP,GAAG,CAACU,QAAD,CAAH,KAAkBH,YAAY,CAACG,QAAD,CAAlC,EAA8C;AAC5C,cAAM,IAAIC,UAAJ,CACH,uBAAsBD,QAAS,aAAYH,YAAY,CAACG,QAAD,CAAW,aAAYV,GAAG,CAACU,QAAD,CAAW,IADzF,CAAN;AAGD;AACF;;AACD,WAAOV,GAAP;AACD;AACF;AAED;;;;;;;;;;;;AAWA,OAAO,SAASY,uBAAT,CAAiChB,SAAjC,EAA4CC,OAA5C,EAAqDE,eAArD,EAAsE;AAC3E,MAAIF,OAAO,CAACgB,OAAR,KAAoBZ,SAApB,IAAiC,OAAOJ,OAAO,CAACgB,OAAf,KAA2B,SAAhE,EAA2E;AACzE,UAAM,IAAIP,SAAJ,CAAc,kCAAd,CAAN;AACD;;AACD,MAAIT,OAAO,CAACgB,OAAZ,EAAqB;AACnB,QAAIhB,OAAO,CAACG,GAAR,KAAgBC,SAApB,EAA+B;AAC7B,YAAM,IAAIK,SAAJ,CACJ,sDADI,CAAN;AAGD;;AACD,WAAOV,SAAP;AACD;;AACD,SAAOD,cAAc,CAACC,SAAD,EAAYC,OAAZ,EAAqB,IAArB,EAA2BE,eAA3B,CAArB;AACD","sourcesContent":["import Image from '../Image';\n\nimport getImageParameters from './getImageParameters';\n\n/**\n * Use this function to support getting the output image of an algorithm from user-supplied\n * options.\n * @private\n * @param {Image} thisImage - Original image on which the algorithm will be applied\n * @param {object} options - Options object received by the algorithm\n * @param {Image} [options.out] - If set, must be an image compatible with the algorithm\n * @param {object} newParameters - Parameters that will be combined with the ones from `thisImage`.\n * @param {object} internalOptions - Some additional options on the way to create the output image\n * @return {Image}\n */\nexport function getOutputImage(\n  thisImage,\n  options,\n  newParameters,\n  internalOptions = {},\n) {\n  const { out } = options;\n  if (out === undefined) {\n    if (internalOptions.copy) {\n      return thisImage.clone();\n    } else {\n      return Image.createFrom(thisImage, newParameters);\n    }\n  } else {\n    if (!Image.isImage(out)) {\n      throw new TypeError('out must be an Image object');\n    }\n    const requirements = Object.assign(\n      getImageParameters(thisImage),\n      newParameters,\n    );\n    for (const property in requirements) {\n      if (out[property] !== requirements[property]) {\n        throw new RangeError(\n          `cannot use out. Its ${property} must be \"${requirements[property]}\" (found \"${out[property]}\")`,\n        );\n      }\n    }\n    return out;\n  }\n}\n\n/**\n * Same as getOutputImage but allows for an `inPlace` option.\n * @private\n * @param {Image} thisImage\n * @param {object} options\n * @param {boolean} [options.inPlace=false] - If true, thisImage is returned\n * @param {Image} [options.out]\n * @param {object} internalOptions - Additional internal options on how to create the output image\n * @param {boolean} [interalOptions.copy] - If true will copy the original image instead of creating a new empty image\n * @return {Image}\n */\nexport function getOutputImageOrInPlace(thisImage, options, internalOptions) {\n  if (options.inPlace !== undefined && typeof options.inPlace !== 'boolean') {\n    throw new TypeError('inPlace option must be a boolean');\n  }\n  if (options.inPlace) {\n    if (options.out !== undefined) {\n      throw new TypeError(\n        'out option must not be set if inPlace option is true',\n      );\n    }\n    return thisImage;\n  }\n  return getOutputImage(thisImage, options, null, internalOptions);\n}\n"]},"metadata":{},"sourceType":"module"}