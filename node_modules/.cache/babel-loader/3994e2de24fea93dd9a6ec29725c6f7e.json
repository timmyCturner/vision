{"ast":null,"code":"/**\n * Returns the median of an histogram\n * @param {number[]} histogram\n * @return {number}\n * @private\n */\nexport function median(histogram) {\n  let total = histogram.reduce((sum, x) => sum + x);\n\n  if (total === 0) {\n    throw new Error('unreachable');\n  }\n\n  let position = 0;\n  let currentTotal = 0;\n  let middle = total / 2;\n  let previous;\n\n  while (true) {\n    if (histogram[position] > 0) {\n      if (previous !== undefined) {\n        return (previous + position) / 2;\n      }\n\n      currentTotal += histogram[position];\n\n      if (currentTotal > middle) {\n        return position;\n      } else if (currentTotal === middle) {\n        previous = position;\n      }\n    }\n\n    position++;\n  }\n}\n/**\n * Retuns the mean of an histogram\n * @param {number[]} histogram\n * @return {number}\n * @private\n */\n\nexport function mean(histogram) {\n  let total = 0;\n  let sum = 0;\n\n  for (let i = 0; i < histogram.length; i++) {\n    total += histogram[i];\n    sum += histogram[i] * i;\n  }\n\n  if (total === 0) {\n    return 0;\n  }\n\n  return sum / total;\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/node_modules/image-js/src/util/histogram.js"],"names":["median","histogram","total","reduce","sum","x","Error","position","currentTotal","middle","previous","undefined","mean","i","length"],"mappings":"AAAA;;;;;;AAMA,OAAO,SAASA,MAAT,CAAgBC,SAAhB,EAA2B;AAChC,MAAIC,KAAK,GAAGD,SAAS,CAACE,MAAV,CAAiB,CAACC,GAAD,EAAMC,CAAN,KAAYD,GAAG,GAAGC,CAAnC,CAAZ;;AAEA,MAAIH,KAAK,KAAK,CAAd,EAAiB;AACf,UAAM,IAAII,KAAJ,CAAU,aAAV,CAAN;AACD;;AAED,MAAIC,QAAQ,GAAG,CAAf;AACA,MAAIC,YAAY,GAAG,CAAnB;AACA,MAAIC,MAAM,GAAGP,KAAK,GAAG,CAArB;AACA,MAAIQ,QAAJ;;AAEA,SAAO,IAAP,EAAa;AACX,QAAIT,SAAS,CAACM,QAAD,CAAT,GAAsB,CAA1B,EAA6B;AAC3B,UAAIG,QAAQ,KAAKC,SAAjB,EAA4B;AAC1B,eAAO,CAACD,QAAQ,GAAGH,QAAZ,IAAwB,CAA/B;AACD;;AACDC,MAAAA,YAAY,IAAIP,SAAS,CAACM,QAAD,CAAzB;;AACA,UAAIC,YAAY,GAAGC,MAAnB,EAA2B;AACzB,eAAOF,QAAP;AACD,OAFD,MAEO,IAAIC,YAAY,KAAKC,MAArB,EAA6B;AAClCC,QAAAA,QAAQ,GAAGH,QAAX;AACD;AACF;;AACDA,IAAAA,QAAQ;AACT;AACF;AAED;;;;;;;AAMA,OAAO,SAASK,IAAT,CAAcX,SAAd,EAAyB;AAC9B,MAAIC,KAAK,GAAG,CAAZ;AACA,MAAIE,GAAG,GAAG,CAAV;;AAEA,OAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,SAAS,CAACa,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACzCX,IAAAA,KAAK,IAAID,SAAS,CAACY,CAAD,CAAlB;AACAT,IAAAA,GAAG,IAAIH,SAAS,CAACY,CAAD,CAAT,GAAeA,CAAtB;AACD;;AAED,MAAIX,KAAK,KAAK,CAAd,EAAiB;AACf,WAAO,CAAP;AACD;;AAED,SAAOE,GAAG,GAAGF,KAAb;AACD","sourcesContent":["/**\n * Returns the median of an histogram\n * @param {number[]} histogram\n * @return {number}\n * @private\n */\nexport function median(histogram) {\n  let total = histogram.reduce((sum, x) => sum + x);\n\n  if (total === 0) {\n    throw new Error('unreachable');\n  }\n\n  let position = 0;\n  let currentTotal = 0;\n  let middle = total / 2;\n  let previous;\n\n  while (true) {\n    if (histogram[position] > 0) {\n      if (previous !== undefined) {\n        return (previous + position) / 2;\n      }\n      currentTotal += histogram[position];\n      if (currentTotal > middle) {\n        return position;\n      } else if (currentTotal === middle) {\n        previous = position;\n      }\n    }\n    position++;\n  }\n}\n\n/**\n * Retuns the mean of an histogram\n * @param {number[]} histogram\n * @return {number}\n * @private\n */\nexport function mean(histogram) {\n  let total = 0;\n  let sum = 0;\n\n  for (let i = 0; i < histogram.length; i++) {\n    total += histogram[i];\n    sum += histogram[i] * i;\n  }\n\n  if (total === 0) {\n    return 0;\n  }\n\n  return sum / total;\n}\n"]},"metadata":{},"sourceType":"module"}