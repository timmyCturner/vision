{"ast":null,"code":"import { Matrix } from 'ml-matrix';\n/**\n * We set the data of the image from a matrix. The size of the matrix and the data have to be the same.\n * @memberof Image\n * @instance\n * @param {Matrix} matrix\n * @param {object} [options]\n * @param {number} [options.channel]\n */\n\nexport default function setMatrix(matrix, options = {}) {\n  matrix = new Matrix(matrix);\n  let {\n    channel\n  } = options;\n  this.checkProcessable('getMatrix', {\n    bitDepth: [8, 16]\n  });\n\n  if (channel === undefined) {\n    if (this.components > 1) {\n      throw new RangeError('You need to define the channel for an image that contains more than one channel');\n    }\n\n    channel = 0;\n  }\n\n  if (this.width !== matrix.columns || this.height !== matrix.rows) {\n    throw new RangeError('The size of the matrix must be equal to the size of the image');\n  }\n\n  for (let x = 0; x < this.height; x++) {\n    for (let y = 0; y < this.width; y++) {\n      this.setValueXY(y, x, channel, matrix.get(x, y));\n    }\n  }\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/node_modules/image-js/src/image/utility/setMatrix.js"],"names":["Matrix","setMatrix","matrix","options","channel","checkProcessable","bitDepth","undefined","components","RangeError","width","columns","height","rows","x","y","setValueXY","get"],"mappings":"AAAA,SAASA,MAAT,QAAuB,WAAvB;AAEA;;;;;;;;;AAQA,eAAe,SAASC,SAAT,CAAmBC,MAAnB,EAA2BC,OAAO,GAAG,EAArC,EAAyC;AACtDD,EAAAA,MAAM,GAAG,IAAIF,MAAJ,CAAWE,MAAX,CAAT;AACA,MAAI;AAAEE,IAAAA;AAAF,MAAcD,OAAlB;AACA,OAAKE,gBAAL,CAAsB,WAAtB,EAAmC;AACjCC,IAAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,EAAJ;AADuB,GAAnC;;AAIA,MAAIF,OAAO,KAAKG,SAAhB,EAA2B;AACzB,QAAI,KAAKC,UAAL,GAAkB,CAAtB,EAAyB;AACvB,YAAM,IAAIC,UAAJ,CACJ,iFADI,CAAN;AAGD;;AACDL,IAAAA,OAAO,GAAG,CAAV;AACD;;AAED,MAAI,KAAKM,KAAL,KAAeR,MAAM,CAACS,OAAtB,IAAiC,KAAKC,MAAL,KAAgBV,MAAM,CAACW,IAA5D,EAAkE;AAChE,UAAM,IAAIJ,UAAJ,CACJ,+DADI,CAAN;AAGD;;AAED,OAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKF,MAAzB,EAAiCE,CAAC,EAAlC,EAAsC;AACpC,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKL,KAAzB,EAAgCK,CAAC,EAAjC,EAAqC;AACnC,WAAKC,UAAL,CAAgBD,CAAhB,EAAmBD,CAAnB,EAAsBV,OAAtB,EAA+BF,MAAM,CAACe,GAAP,CAAWH,CAAX,EAAcC,CAAd,CAA/B;AACD;AACF;AACF","sourcesContent":["import { Matrix } from 'ml-matrix';\n\n/**\n * We set the data of the image from a matrix. The size of the matrix and the data have to be the same.\n * @memberof Image\n * @instance\n * @param {Matrix} matrix\n * @param {object} [options]\n * @param {number} [options.channel]\n */\nexport default function setMatrix(matrix, options = {}) {\n  matrix = new Matrix(matrix);\n  let { channel } = options;\n  this.checkProcessable('getMatrix', {\n    bitDepth: [8, 16],\n  });\n\n  if (channel === undefined) {\n    if (this.components > 1) {\n      throw new RangeError(\n        'You need to define the channel for an image that contains more than one channel',\n      );\n    }\n    channel = 0;\n  }\n\n  if (this.width !== matrix.columns || this.height !== matrix.rows) {\n    throw new RangeError(\n      'The size of the matrix must be equal to the size of the image',\n    );\n  }\n\n  for (let x = 0; x < this.height; x++) {\n    for (let y = 0; y < this.width; y++) {\n      this.setValueXY(y, x, channel, matrix.get(x, y));\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}