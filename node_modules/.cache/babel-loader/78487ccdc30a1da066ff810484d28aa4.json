{"ast":null,"code":"import { drawSun } from \"./sun\";\nimport { setupLandscape, drawLandscape } from \"./landscape\";\nimport { setupMicroPlasticDrops, drawMicroPlasticDots } from \"./microPlastics\";\nimport { setupMacroPlastics, drawMacroPlastics } from \"./macroPlastics\";\nimport { setupMethaneBubbles, drawMethaneBubbles } from \"./methaneBubbles\";\nimport { setupSmogClouds, drawSmogClouds } from \"./smogClouds\";\nimport { drawSky } from \"./skyColor\";\nexport default function sketch(p) {\n  let temperatureData = null;\n  let microGrowth2050 = null;\n  let macroGrowth2050 = null;\n  let currentDate = null;\n  let carbonData = null;\n  let methaneData = null;\n\n  p.setup = () => {\n    p.frameRate(30);\n    p.createCanvas(p.windowWidth, p.windowHeight); // adjust to window width and height\n\n    setupLandscape(p);\n    setupSmogClouds(p);\n    setupMethaneBubbles(p, methaneData);\n    setupMicroPlasticDrops(p);\n    setupMacroPlastics(p);\n  };\n\n  p.draw = () => {\n    drawSky(p, carbonData, currentDate);\n    drawSun(p, temperatureData, currentDate);\n    drawLandscape(p);\n    drawSmogClouds(p);\n    drawMethaneBubbles(p, methaneData, currentDate);\n    drawMicroPlasticDots(p, microGrowth2050, currentDate);\n    drawMacroPlastics(p, macroGrowth2050, currentDate);\n  };\n\n  p.myCustomRedrawAccordingToNewPropsHandler = newProps => {\n    temperatureData = newProps.temperatureData;\n    currentDate = newProps.currentDate;\n    microGrowth2050 = newProps.microGrowth2050;\n    macroGrowth2050 = newProps.macroGrowth2050;\n    carbonData = newProps.carbonData;\n    methaneData = newProps.methaneData;\n  };\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/src/sketches/sketch.js"],"names":["drawSun","setupLandscape","drawLandscape","setupMicroPlasticDrops","drawMicroPlasticDots","setupMacroPlastics","drawMacroPlastics","setupMethaneBubbles","drawMethaneBubbles","setupSmogClouds","drawSmogClouds","drawSky","sketch","p","temperatureData","microGrowth2050","macroGrowth2050","currentDate","carbonData","methaneData","setup","frameRate","createCanvas","windowWidth","windowHeight","draw","myCustomRedrawAccordingToNewPropsHandler","newProps"],"mappings":"AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,cAAT,EAAyBC,aAAzB,QAA8C,aAA9C;AACA,SAASC,sBAAT,EAAiCC,oBAAjC,QAA6D,iBAA7D;AACA,SAASC,kBAAT,EAA6BC,iBAA7B,QAAsD,iBAAtD;AACA,SAASC,mBAAT,EAA8BC,kBAA9B,QAAwD,kBAAxD;AACA,SAASC,eAAT,EAA0BC,cAA1B,QAAgD,cAAhD;AACA,SAASC,OAAT,QAAwB,YAAxB;AAEA,eAAe,SAASC,MAAT,CAAgBC,CAAhB,EAAmB;AAC9B,MAAIC,eAAe,GAAG,IAAtB;AACA,MAAIC,eAAe,GAAG,IAAtB;AACA,MAAIC,eAAe,GAAG,IAAtB;AACA,MAAIC,WAAW,GAAG,IAAlB;AACA,MAAIC,UAAU,GAAG,IAAjB;AACA,MAAIC,WAAW,GAAG,IAAlB;;AAEAN,EAAAA,CAAC,CAACO,KAAF,GAAU,MAAM;AACZP,IAAAA,CAAC,CAACQ,SAAF,CAAY,EAAZ;AACAR,IAAAA,CAAC,CAACS,YAAF,CAAeT,CAAC,CAACU,WAAjB,EAA8BV,CAAC,CAACW,YAAhC,EAFY,CAEmC;;AAC/CvB,IAAAA,cAAc,CAACY,CAAD,CAAd;AACAJ,IAAAA,eAAe,CAACI,CAAD,CAAf;AACAN,IAAAA,mBAAmB,CAACM,CAAD,EAAIM,WAAJ,CAAnB;AACAhB,IAAAA,sBAAsB,CAACU,CAAD,CAAtB;AACAR,IAAAA,kBAAkB,CAACQ,CAAD,CAAlB;AACH,GARD;;AAUAA,EAAAA,CAAC,CAACY,IAAF,GAAS,MAAM;AACXd,IAAAA,OAAO,CAACE,CAAD,EAAIK,UAAJ,EAAgBD,WAAhB,CAAP;AACAjB,IAAAA,OAAO,CAACa,CAAD,EAAIC,eAAJ,EAAqBG,WAArB,CAAP;AAEAf,IAAAA,aAAa,CAACW,CAAD,CAAb;AACAH,IAAAA,cAAc,CAACG,CAAD,CAAd;AACAL,IAAAA,kBAAkB,CAACK,CAAD,EAAIM,WAAJ,EAAiBF,WAAjB,CAAlB;AACAb,IAAAA,oBAAoB,CAACS,CAAD,EAAIE,eAAJ,EAAqBE,WAArB,CAApB;AACAX,IAAAA,iBAAiB,CAACO,CAAD,EAAIG,eAAJ,EAAqBC,WAArB,CAAjB;AACH,GATD;;AAWAJ,EAAAA,CAAC,CAACa,wCAAF,GAA8CC,QAAD,IAAc;AACvDb,IAAAA,eAAe,GAAGa,QAAQ,CAACb,eAA3B;AACAG,IAAAA,WAAW,GAAGU,QAAQ,CAACV,WAAvB;AACAF,IAAAA,eAAe,GAAGY,QAAQ,CAACZ,eAA3B;AACAC,IAAAA,eAAe,GAAGW,QAAQ,CAACX,eAA3B;AACAE,IAAAA,UAAU,GAAGS,QAAQ,CAACT,UAAtB;AACAC,IAAAA,WAAW,GAAGQ,QAAQ,CAACR,WAAvB;AACH,GAPD;AAQH","sourcesContent":["import { drawSun } from \"./sun\";\r\nimport { setupLandscape, drawLandscape } from \"./landscape\";\r\nimport { setupMicroPlasticDrops, drawMicroPlasticDots } from \"./microPlastics\";\r\nimport { setupMacroPlastics, drawMacroPlastics } from \"./macroPlastics\";\r\nimport { setupMethaneBubbles, drawMethaneBubbles } from \"./methaneBubbles\";\r\nimport { setupSmogClouds, drawSmogClouds } from \"./smogClouds\";\r\nimport { drawSky } from \"./skyColor\";\r\n\r\nexport default function sketch(p) {\r\n    let temperatureData = null;\r\n    let microGrowth2050 = null; \r\n    let macroGrowth2050 = null;\r\n    let currentDate = null;\r\n    let carbonData = null;\r\n    let methaneData = null;\r\n\r\n    p.setup = () => {\r\n        p.frameRate(30);\r\n        p.createCanvas(p.windowWidth, p.windowHeight); // adjust to window width and height\r\n        setupLandscape(p);\r\n        setupSmogClouds(p);\r\n        setupMethaneBubbles(p, methaneData);\r\n        setupMicroPlasticDrops(p);\r\n        setupMacroPlastics(p);\r\n    };\r\n\r\n    p.draw = () => {\r\n        drawSky(p, carbonData, currentDate);\r\n        drawSun(p, temperatureData, currentDate);\r\n\r\n        drawLandscape(p);\r\n        drawSmogClouds(p);\r\n        drawMethaneBubbles(p, methaneData, currentDate);\r\n        drawMicroPlasticDots(p, microGrowth2050, currentDate);\r\n        drawMacroPlastics(p, macroGrowth2050, currentDate);\r\n    };\r\n\r\n    p.myCustomRedrawAccordingToNewPropsHandler = (newProps) => {\r\n        temperatureData = newProps.temperatureData;\r\n        currentDate = newProps.currentDate;\r\n        microGrowth2050 = newProps.microGrowth2050;\r\n        macroGrowth2050 = newProps.macroGrowth2050;\r\n        carbonData = newProps.carbonData;\r\n        methaneData = newProps.methaneData;\r\n    };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}