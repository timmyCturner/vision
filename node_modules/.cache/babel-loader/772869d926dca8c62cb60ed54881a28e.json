{"ast":null,"code":"import { setUpSun, drawSun, hoveredSunData } from \"./sun\";\nimport { setupLandscape, drawLandscape, drawSeaboard } from \"./landscape\";\nimport { setupMicroPlasticDrops, drawMicroPlasticDots, hoveredMicroPlasticData } from \"./microPlastics\";\nimport { setupMacroPlastics, drawMacroPlastics, hoveredMacroPlasticData } from \"./macroPlastics\";\nimport { setupMethaneBubbles, drawMethaneBubbles, hoveredSmogData } from \"./methaneBubbles\";\nimport { setupSmogClouds, drawSmogClouds } from \"./smogClouds\";\nimport { drawSky } from \"./skyColor\";\nimport { drawLegend, drawAllLegends } from \"./legend\";\nimport { hoveredBubbleData } from \"./methaneBubbles\";\nexport default function sketch(p) {\n  let temperatureData = null;\n  let microGrowth2050 = null;\n  let macroGrowth2050 = null;\n  let currentDate = null;\n  let carbonData = null;\n  let methaneData = null;\n  let seaLevelRise = null;\n  let nitrousData = null;\n  let showLegend = false;\n\n  p.setup = () => {\n    p.frameRate(30);\n    p.createCanvas(p.windowWidth, p.windowHeight); // adjust to window width and height\n\n    setupLandscape(p);\n    setUpSun(p, temperatureData, currentDate);\n    setupSmogClouds(p);\n    setupMethaneBubbles(p, methaneData);\n    setupMicroPlasticDrops(p);\n    setupMacroPlastics(p);\n  };\n\n  p.draw = () => {\n    p.clear();\n    drawSky(p, carbonData, currentDate);\n    drawSun(p, temperatureData, currentDate);\n    drawLandscape(p, currentDate, seaLevelRise, temperatureData);\n    drawSmogClouds(p, nitrousData, currentDate);\n    drawMethaneBubbles(p, methaneData, currentDate, seaLevelRise);\n    drawSeaboard(p);\n    drawMicroPlasticDots(p, microGrowth2050, currentDate, seaLevelRise);\n    drawMacroPlastics(p, macroGrowth2050, currentDate, seaLevelRise);\n\n    if (hoveredBubbleData.mouseOver) {\n      const text = \"The bubbles rising up through the ocean represent methane entering the atmosphere, and increase and decrease in number accordingly.\";\n      const value = hoveredBubbleData.value ? `Value: ${hoveredBubbleData.value} ppb` : `[No Value For Current Date]`;\n      p.noFill();\n      drawLegend(p, text, value);\n    }\n\n    if (hoveredMacroPlasticData.mouseOver) {\n      const text = \"The piles or circles on top the ocean represent macroplastic, and increase and decrease in number accordingly.\";\n      const value = hoveredMacroPlasticData.value ? `Value: ${hoveredMacroPlasticData.value} tons` : `[No Value For Current Date]`;\n      p.noFill();\n      drawLegend(p, text, value);\n    }\n\n    if (hoveredSunData.mouseOver) {\n      const text = \"The sun and ocean grow and change color with the tempature of the planet.\";\n      const value = hoveredSunData.value ? `Value: ${hoveredSunData.value} degree C` : `[No Value For Current Date]`;\n      p.noFill();\n      drawLegend(p, text, value);\n    }\n\n    if (hoveredMicroPlasticData.mouseOver) {\n      const text = \"The white dots or circles falling from top the ocean represent microplastic, and increase and decrease in number accordingly.\";\n      const value = hoveredMicroPlasticData.value ? `Value: ${hoveredMicroPlasticData.value} tons` : `[No Value For Current Date]`;\n      p.noFill();\n      drawLegend(p, text, value);\n    }\n\n    if (hoveredSmogData.mouseOver) {\n      const text = \"the smog clouds represent the nitrous oxide in the atmosphere.\";\n      const value = hoveredSmogData.value ? `Value: ${hoveredSmogData.value} ppb` : `[No Value For Current Date]`;\n      p.noFill();\n      drawLegend(p, text, value);\n    } // if (showLegend) { // commented this for demo/testing purposes\n    //     p.noFill();\n    //     drawAllLegends(p);\n    // }\n\n  };\n\n  p.windowResized = () => {\n    p.resizeCanvas(p.windowWidth, p.windowHeight);\n    p.redraw();\n  };\n\n  p.myCustomRedrawAccordingToNewPropsHandler = newProps => {\n    temperatureData = newProps.temperatureData;\n    currentDate = newProps.currentDate;\n    microGrowth2050 = newProps.microGrowth2050;\n    macroGrowth2050 = newProps.macroGrowth2050;\n    carbonData = newProps.carbonData;\n    methaneData = newProps.methaneData;\n    seaLevelRise = newProps.seaLevelRise;\n    nitrousData = newProps.nitrousData;\n  };\n\n  p.mouseClicked = () => {\n    if (p.mouseX < p.width && p.mouseX > 0 && p.mouseY < p.height && p.mouseY > 0) {\n      showLegend = !showLegend;\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/src/sketches/sketch.js"],"names":["setUpSun","drawSun","hoveredSunData","setupLandscape","drawLandscape","drawSeaboard","setupMicroPlasticDrops","drawMicroPlasticDots","hoveredMicroPlasticData","setupMacroPlastics","drawMacroPlastics","hoveredMacroPlasticData","setupMethaneBubbles","drawMethaneBubbles","hoveredSmogData","setupSmogClouds","drawSmogClouds","drawSky","drawLegend","drawAllLegends","hoveredBubbleData","sketch","p","temperatureData","microGrowth2050","macroGrowth2050","currentDate","carbonData","methaneData","seaLevelRise","nitrousData","showLegend","setup","frameRate","createCanvas","windowWidth","windowHeight","draw","clear","mouseOver","text","value","noFill","windowResized","resizeCanvas","redraw","myCustomRedrawAccordingToNewPropsHandler","newProps","mouseClicked","mouseX","width","mouseY","height"],"mappings":"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","sourcesContent":["import { setUpSun, drawSun, hoveredSunData } from \"./sun\";\r\nimport { setupLandscape, drawLandscape, drawSeaboard } from \"./landscape\";\r\nimport { setupMicroPlasticDrops, drawMicroPlasticDots, hoveredMicroPlasticData } from \"./microPlastics\";\r\nimport { setupMacroPlastics, drawMacroPlastics, hoveredMacroPlasticData } from \"./macroPlastics\";\r\nimport { setupMethaneBubbles, drawMethaneBubbles, hoveredSmogData } from \"./methaneBubbles\";\r\nimport { setupSmogClouds, drawSmogClouds } from \"./smogClouds\";\r\nimport { drawSky } from \"./skyColor\";\r\nimport { drawLegend, drawAllLegends } from \"./legend\";\r\nimport { hoveredBubbleData } from \"./methaneBubbles\";\r\n\r\nexport default function sketch(p) {\r\n    let temperatureData = null;\r\n    let microGrowth2050 = null;\r\n    let macroGrowth2050 = null;\r\n    let currentDate = null;\r\n    let carbonData = null;\r\n    let methaneData = null;\r\n    let seaLevelRise = null;\r\n    let nitrousData = null;\r\n\r\n    let showLegend = false;\r\n\r\n\r\n    p.setup = () => {\r\n        p.frameRate(30);\r\n        p.createCanvas(p.windowWidth, p.windowHeight); // adjust to window width and height\r\n        setupLandscape(p);\r\n        setUpSun(p,temperatureData, currentDate);\r\n        setupSmogClouds(p);\r\n        setupMethaneBubbles(p, methaneData);\r\n        setupMicroPlasticDrops(p);\r\n        setupMacroPlastics(p);\r\n\r\n    };\r\n\r\n    p.draw = () => {\r\n        p.clear();\r\n        drawSky(p, carbonData, currentDate);\r\n        drawSun(p, temperatureData, currentDate);\r\n\r\n        drawLandscape(p,currentDate, seaLevelRise,temperatureData);\r\n        drawSmogClouds(p, nitrousData, currentDate);\r\n        drawMethaneBubbles(p, methaneData, currentDate, seaLevelRise);\r\n        drawSeaboard(p);\r\n        drawMicroPlasticDots(p, microGrowth2050, currentDate, seaLevelRise);\r\n        drawMacroPlastics(p, macroGrowth2050, currentDate, seaLevelRise);\r\n\r\n        if (hoveredBubbleData.mouseOver) {\r\n            const text = \"The bubbles rising up through the ocean represent methane entering the atmosphere, and increase and decrease in number accordingly.\";\r\n            const value = hoveredBubbleData.value ? `Value: ${hoveredBubbleData.value} ppb` : `[No Value For Current Date]`;\r\n            p.noFill();\r\n            drawLegend(p, text, value);\r\n        }\r\n        if (hoveredMacroPlasticData.mouseOver) {\r\n            const text = \"The piles or circles on top the ocean represent macroplastic, and increase and decrease in number accordingly.\";\r\n            const value = hoveredMacroPlasticData.value ? `Value: ${hoveredMacroPlasticData.value} tons` : `[No Value For Current Date]`;\r\n            p.noFill();\r\n            drawLegend(p, text, value);\r\n        }\r\n        if (hoveredSunData.mouseOver) {\r\n            const text = \"The sun and ocean grow and change color with the tempature of the planet.\";\r\n            const value = hoveredSunData.value ? `Value: ${hoveredSunData.value} degree C` : `[No Value For Current Date]`;\r\n            p.noFill();\r\n            drawLegend(p, text, value);\r\n        }\r\n        if (hoveredMicroPlasticData.mouseOver) {\r\n            const text = \"The white dots or circles falling from top the ocean represent microplastic, and increase and decrease in number accordingly.\";\r\n            const value = hoveredMicroPlasticData.value ? `Value: ${hoveredMicroPlasticData.value} tons` : `[No Value For Current Date]`;\r\n            p.noFill();\r\n            drawLegend(p, text, value);\r\n        }\r\n        if (hoveredSmogData.mouseOver) {\r\n            const text = \"the smog clouds represent the nitrous oxide in the atmosphere.\";\r\n            const value = hoveredSmogData.value ? `Value: ${hoveredSmogData.value} ppb` : `[No Value For Current Date]`;\r\n            p.noFill();\r\n            drawLegend(p, text, value);\r\n        }\r\n        // if (showLegend) { // commented this for demo/testing purposes\r\n        //     p.noFill();\r\n        //     drawAllLegends(p);\r\n        // }\r\n    };\r\n\r\n    p.windowResized = () => {\r\n        p.resizeCanvas(p.windowWidth, p.windowHeight);\r\n        p.redraw();\r\n    }\r\n\r\n    p.myCustomRedrawAccordingToNewPropsHandler = (newProps) => {\r\n        temperatureData = newProps.temperatureData;\r\n        currentDate = newProps.currentDate;\r\n        microGrowth2050 = newProps.microGrowth2050;\r\n        macroGrowth2050 = newProps.macroGrowth2050;\r\n        carbonData = newProps.carbonData;\r\n        methaneData = newProps.methaneData;\r\n        seaLevelRise = newProps.seaLevelRise;\r\n        nitrousData = newProps.nitrousData;\r\n    };\r\n\r\n    p.mouseClicked = () => {\r\n        if(p.mouseX < p.width && p.mouseX > 0 && p.mouseY < p.height && p.mouseY > 0){\r\n            showLegend = !showLegend;\r\n        }\r\n    };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}