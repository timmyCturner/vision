{"ast":null,"code":"//var yvalues;\n//var size_index = 0;\nexport let hoveredSunData = {\n  mouseOver: false,\n  value: null\n};\nvar currentY_value = 0;\nlet hoveredSun = null;\nlet sunObject = null;\n\nclass Sun {\n  /**\r\n   * Constructor for sun\r\n   *\r\n   * @param {*} p p5 ptr\r\n   */\n  constructor(p) {\n    // class for sun object\n    this.x = p.windowWidth / 2;\n    this.y = p.windowHeight / 2;\n    this.size = currentY_value * 100;\n    /**\r\n     * Display sun on sketch\r\n     */\n\n    this.display = function (p, currentDate, temperatureData) {\n      var color = changeSunColor(p, currentDate, {\n        r: 232,\n        g: 152,\n        b: 98\n      }, {\n        r: 200,\n        g: 100,\n        b: 90\n      }, temperatureData);\n      p.fill(color.r, color.g, color.b);\n      p.ellipse(this.x, this.y, currentY_value * 100);\n\n      if (hoveredSunData.mouseOver) {\n        p.fill(225, 225, 0, 70);\n        p.ellipse(this.x, this.y, currentY_value * 100 + 20);\n      }\n    };\n    /**\r\n     * Behavior for sun movement\r\n     */\n\n\n    this.move = function () {\n      // check if mouse is pressed and within range of sun\n      if (p.mouseIsPressed && p.dist(p.mouseX, p.mouseY, this.x, this.y) < this.size / 2 + 20) {\n        //get the sun above the ocean\n        if (p.mouseY < p.height / 2) {\n          hoveredSunData.mouseOver = true;\n          hoveredSun = this;\n        }\n      }\n    };\n  }\n\n}\n\nexport function resizeSun(p) {\n  sunObject.x = p.windowWidth / 2;\n  sunObject.y = p.windowHeight / 2;\n}\nexport function setUpSun(p, temperatureData, current_date) {\n  calcSun(temperatureData, current_date);\n  sunObject = new Sun(p);\n}\nexport function drawSun(p, temperatureData, current_date) {\n  calcSun(temperatureData, current_date);\n  createSun(p, temperatureData, current_date);\n}\n\nfunction calcSun(temperatureData, current_date) {\n  if (temperatureData != null) {\n    //get current date based on scroller and year\n    var currentDate = current_date.getFullYear();\n    var index = (currentDate - 1880) * temperatureData.length / 140 - 100;\n    var i = Math.round(index);\n    var average = 0;\n\n    for (var count = 0; count < 100; count++) {\n      average = average + parseFloat(temperatureData[i + count].station);\n    }\n\n    currentY_value = average / 50 + 2;\n    hoveredSunData.value = Number.parseFloat(currentY_value.toFixed(2) - 2).toPrecision(4);\n  }\n}\n\nfunction createSun(p, temperatureData, currentDate) {\n  if (temperatureData != null) {\n    if (!hoveredSunData.mouseOver) {\n      sunObject.move();\n    } else if (p.mouseY > p.height / 2) {\n      hoveredSunData.mouseOver = false;\n    } else if (p.dist(p.mouseX, p.mouseY, hoveredSun.x, hoveredSun.y) > hoveredSun.size / 2 + 20) {\n      hoveredSunData.mouseOver = false;\n    }\n\n    sunObject.display(p, currentDate, temperatureData);\n  }\n}\n\nfunction changeSunColor(p, currentDate, startColor, endColor, temperatureData) {\n  var currentYear = currentDate.getFullYear();\n  var index = (currentYear - 1880) * temperatureData.length / 140 - 100;\n  var i = Math.round(index);\n  var average = 0;\n\n  for (var count = 0; count < 100; count++) {\n    average = average + parseFloat(temperatureData[i + count].station);\n  } //smallest is 0 largest is 115\n\n\n  average = average + 3;\n  var rGap = (startColor.r - endColor.r) / 115;\n  var gGap = (startColor.g - endColor.g) / 115;\n  var bGap = (startColor.b - endColor.b) / 115; // code body moved outside (above) statement block\n\n  var rIndex = startColor.r - (rGap * average | 0);\n  var gIndex = startColor.g - (gGap * average | 0);\n  var bIndex = startColor.b - (bGap * average | 0);\n  return {\n    r: rIndex,\n    g: gIndex,\n    b: bIndex\n  };\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/src/sketches/sun.js"],"names":["hoveredSunData","mouseOver","value","currentY_value","hoveredSun","sunObject","Sun","constructor","p","x","windowWidth","y","windowHeight","size","display","currentDate","temperatureData","color","changeSunColor","r","g","b","fill","ellipse","move","mouseIsPressed","dist","mouseX","mouseY","height","resizeSun","setUpSun","current_date","calcSun","drawSun","createSun","getFullYear","index","length","i","Math","round","average","count","parseFloat","station","Number","toFixed","toPrecision","startColor","endColor","currentYear","rGap","gGap","bGap","rIndex","gIndex","bIndex"],"mappings":"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","sourcesContent":["//var yvalues;\r\n//var size_index = 0;\r\nexport let hoveredSunData = { mouseOver: false, value: null };\r\nvar currentY_value = 0;\r\nlet hoveredSun = null;\r\nlet sunObject = null;\r\n\r\nclass Sun {\r\n    /**\r\n     * Constructor for sun\r\n     *\r\n     * @param {*} p p5 ptr\r\n     */\r\n    constructor(p) {\r\n        // class for sun object\r\n        this.x = p.windowWidth / 2;\r\n        this.y = p.windowHeight / 2;\r\n        this.size = currentY_value * 100;\r\n        \r\n        /**\r\n         * Display sun on sketch\r\n         */\r\n        this.display = function (p, currentDate, temperatureData) {\r\n            var color = changeSunColor(p, currentDate, { r: 232, g: 152, b: 98 }, { r: 200, g: 100, b: 90 }, temperatureData\r\n            );\r\n\r\n            p.fill(color.r, color.g, color.b);\r\n\r\n            p.ellipse(this.x, this.y, currentY_value * 100);\r\n            if (hoveredSunData.mouseOver) {\r\n                p.fill(225, 225, 0, 70);\r\n                p.ellipse(this.x, this.y, currentY_value * 100 + 20);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Behavior for sun movement\r\n         */\r\n        this.move = function () {\r\n            // check if mouse is pressed and within range of sun\r\n            if (p.mouseIsPressed && p.dist(p.mouseX, p.mouseY, this.x, this.y) < this.size / 2 + 20) {\r\n                //get the sun above the ocean\r\n                if (p.mouseY < p.height / 2) {\r\n                    hoveredSunData.mouseOver = true;\r\n                    hoveredSun = this;\r\n                }\r\n            }\r\n        };\r\n    }\r\n}\r\n\r\nexport function resizeSun(p) {\r\n    sunObject.x = p.windowWidth / 2;\r\n    sunObject.y = p.windowHeight / 2;\r\n}\r\n\r\nexport function setUpSun(p, temperatureData, current_date) {\r\n    calcSun(temperatureData, current_date);\r\n    sunObject = new Sun(p);\r\n}\r\n\r\nexport function drawSun(p, temperatureData, current_date) {\r\n    calcSun(temperatureData, current_date);\r\n    createSun(p, temperatureData, current_date);\r\n}\r\n\r\nfunction calcSun(temperatureData, current_date) {\r\n    if (temperatureData != null) {\r\n        //get current date based on scroller and year\r\n        var currentDate = current_date.getFullYear();\r\n        var index = ((currentDate - 1880) * temperatureData.length) / 140 - 100;\r\n\r\n        var i = Math.round(index);\r\n        var average = 0;\r\n        for (var count = 0; count < 100; count++) {\r\n            average = average + parseFloat(temperatureData[i + count].station);\r\n        }\r\n\r\n        currentY_value = average / 50 + 2;\r\n        hoveredSunData.value = Number.parseFloat(currentY_value.toFixed(2) - 2).toPrecision(4);\r\n    }\r\n}\r\n\r\nfunction createSun(p, temperatureData, currentDate) {\r\n    if (temperatureData != null) {\r\n        if (!hoveredSunData.mouseOver) {\r\n            sunObject.move();\r\n        } else if (p.mouseY > p.height / 2) {\r\n            hoveredSunData.mouseOver = false;\r\n        } else if (p.dist(p.mouseX, p.mouseY, hoveredSun.x, hoveredSun.y) > hoveredSun.size / 2 + 20) {\r\n            hoveredSunData.mouseOver = false;\r\n        }\r\n        sunObject.display(p, currentDate, temperatureData);\r\n    }\r\n}\r\n\r\nfunction changeSunColor(p, currentDate, startColor, endColor, temperatureData) {\r\n    var currentYear = currentDate.getFullYear();\r\n\r\n    var index = ((currentYear - 1880) * temperatureData.length) / 140 - 100;\r\n\r\n    var i = Math.round(index);\r\n    var average = 0;\r\n    for (var count = 0; count < 100; count++) {\r\n        average = average + parseFloat(temperatureData[i + count].station);\r\n    }\r\n    \r\n    //smallest is 0 largest is 115\r\n    average = average + 3;\r\n\r\n    var rGap = (startColor.r - endColor.r) / 115;\r\n    var gGap = (startColor.g - endColor.g) / 115;\r\n    var bGap = (startColor.b - endColor.b) / 115;\r\n\r\n    // code body moved outside (above) statement block\r\n    var rIndex = startColor.r - ((rGap * average) | 0);\r\n    var gIndex = startColor.g - ((gGap * average) | 0);\r\n    var bIndex = startColor.b - ((bGap * average) | 0);\r\n\r\n    return { r: rIndex, g: gIndex, b: bIndex };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}