{"ast":null,"code":"export default function microPlastic(p) {\n  let canvas; //these are gonna be the variables for our garbage collection\n\n  var drops = []; //these are all variables for our wave function\n\n  let xspacing = 16; // Distance between each horizontal location\n\n  let w; // Width of entire wave\n\n  let theta = 0.15; // Start angle at 0\n\n  let amplitude = 25.0; // Height of wave\n\n  let period = 200.0; // How many pixels before the wave repeats\n\n  let dx = 2; // Value for incrementing x\n\n  let yvalues; // Using an array to store height values for the wave\n\n  let backvalues;\n  let back = 2; // back offset\n\n  p.setup = () => {\n    canvas = p.createCanvas(600, 300); //set up wave\n\n    w = p.width + 16;\n    dx = 2 * Math.PI / period * xspacing;\n    yvalues = new Array(p.floor(w / xspacing));\n    backvalues = new Array(p.floor(w / xspacing)); //\n    //set up plastic\n    //\n\n    for (var i = 0; i < 200; i++) {\n      drops[i] = canvas.drop(file => canvas.loadImage(file.data, img => image(img, 0, 0, p.width, p.height)));\n    }\n    /*\r\n    Promise.all([\r\n    new Promise((resolve) => {song = loadSound(\"tears mstr 2.mp3\", resolve)})\r\n    ]).then(() => {\r\n    song.amp(1);\r\n    song.play();\r\n    });;\r\n    */\n    //load plastic images into Array\n\n  };\n\n  p.draw = () => {\n    p.background('blue'); //do wave\n\n    p.calcWave();\n    p.renderWave();\n    p.backWave(); //calc microplastic\n    //\n\n    p.background(230, 230, 250);\n\n    for (var i = 0; i < drops.length; i++) {\n      drops[i].fall();\n      drops[i].show();\n    }\n  }; //\n  //\n  //\n  //hear lies al information on how to create a wave\n  //\n  //\n  //\n\n\n  p.calcWave = () => {\n    // Increment theta (try different values for\n    // 'angular velocity' here)\n    theta += 0.02; // For every x value, calculate a y value with sine function\n\n    let x = theta;\n\n    for (let i = 0; i < yvalues.length; i++) {\n      yvalues[i] = Math.sin(x) * amplitude;\n      backvalues[i] = Math.sin(x + back) * amplitude;\n      x += dx;\n    }\n  };\n\n  p.renderWave = () => {\n    p.noStroke();\n    p.fill(37, 207, 122); // A simple way to draw the wave with an ellipse at each location\n\n    for (let x = 0; x < yvalues.length; x++) {\n      var waveHeight = 4 * p.height / 8 + yvalues[x];\n      p.ellipse(x * xspacing, p.height, 64, waveHeight);\n    }\n  };\n\n  p.backWave = () => {\n    p.noStroke();\n    p.fill(19, 149, 244); // A simple way to draw the wave with an ellipse at each location\n\n    for (let x = 0; x < backvalues.length; x++) {\n      var waveHeight = 4 * p.height / 8 + backvalues[x];\n      p.ellipse(x * xspacing, p.height, 64, waveHeight);\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/src/sketches/microPlastic.js"],"names":["microPlastic","p","canvas","drops","xspacing","w","theta","amplitude","period","dx","yvalues","backvalues","back","setup","createCanvas","width","Math","PI","Array","floor","i","drop","file","loadImage","data","img","image","height","draw","background","calcWave","renderWave","backWave","length","fall","show","x","sin","noStroke","fill","waveHeight","ellipse"],"mappings":"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","sourcesContent":["\r\n\r\nexport default function microPlastic(p) {\r\n\r\n  let canvas;\r\n\r\n  //these are gonna be the variables for our garbage collection\r\n  var drops = [];\r\n\r\n  //these are all variables for our wave function\r\n  let xspacing = 16; // Distance between each horizontal location\r\n  let w; // Width of entire wave\r\n  let theta = 0.15; // Start angle at 0\r\n  let amplitude = 25.0; // Height of wave\r\n  let period = 200.0; // How many pixels before the wave repeats\r\n  let dx=2; // Value for incrementing x\r\n  let yvalues; // Using an array to store height values for the wave\r\n  let backvalues;\r\n  let back = 2 // back offset\r\n\r\n\r\n\r\n  p.setup = () => {\r\n    canvas = p.createCanvas(600, 300);\r\n    //set up wave\r\n    w = p.width + 16;\r\n    dx = (2*Math.PI / period) * xspacing;\r\n    yvalues = new Array(p.floor(w / xspacing));\r\n    backvalues = new Array(p.floor(w / xspacing));\r\n    //\r\n    //set up plastic\r\n    //\r\n\r\n\r\n    for (var i = 0; i < 200; i++) {\r\n      drops[i] = canvas.drop(file => canvas.loadImage(file.data, img => image(img, 0, 0, p.width, p.height)));\r\n    }\r\n      /*\r\n    Promise.all([\r\n      new Promise((resolve) => {song = loadSound(\"tears mstr 2.mp3\", resolve)})\r\n    ]).then(() => {\r\n      song.amp(1);\r\n    \tsong.play();\r\n    });;\r\n    */\r\n\r\n    //load plastic images into Array\r\n\r\n\r\n  }\r\n  p.draw = () => {\r\n    p.background('blue');\r\n\r\n    //do wave\r\n    p.calcWave();\r\n    p.renderWave();\r\n    p.backWave();\r\n    //calc microplastic\r\n    //\r\n    p.background(230, 230, 250);\r\n    for (var i = 0; i < drops.length; i++) {\r\n      drops[i].fall();\r\n      drops[i].show();\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  //\r\n  //\r\n  //\r\n  //hear lies al information on how to create a wave\r\n  //\r\n  //\r\n  //\r\n  p.calcWave= () =>  {\r\n    // Increment theta (try different values for\r\n    // 'angular velocity' here)\r\n    theta += 0.02;\r\n\r\n    // For every x value, calculate a y value with sine function\r\n    let x = theta;\r\n    for (let i = 0; i < yvalues.length; i++) {\r\n\r\n      yvalues[i] = Math.sin(x) * amplitude;\r\n      backvalues[i] = Math.sin(x+back) * amplitude;\r\n      x += dx;\r\n    }\r\n  }\r\n  p.renderWave = () => {\r\n    p.noStroke();\r\n    p.fill(37, 207, 122);\r\n    // A simple way to draw the wave with an ellipse at each location\r\n    for (let x = 0; x < yvalues.length; x++) {\r\n      var waveHeight = 4*p.height / 8 + yvalues[x]\r\n      p.ellipse((x) * xspacing, p.height, 64,waveHeight);\r\n\r\n    }\r\n  }\r\n  p.backWave = () => {\r\n    p.noStroke();\r\n    p.fill(19, 149, 244);\r\n    // A simple way to draw the wave with an ellipse at each location\r\n    for (let x = 0; x < backvalues.length; x++) {\r\n      var waveHeight = 4*p.height / 8 + backvalues[x]\r\n      p.ellipse((x) * xspacing, p.height, 64,waveHeight);\r\n\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}