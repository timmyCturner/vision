{"ast":null,"code":"import Stack from '../../stack/Stack';\nimport Image from '../Image';\nimport { GREY } from '../model/model';\n/**\n * @memberof Image\n * @instance\n * @param {object} [options]\n * @param {boolean} [options.preserveAlpha=true]\n * @return {Stack}\n */\n\nexport default function split(options = {}) {\n  let {\n    preserveAlpha = true\n  } = options;\n  this.checkProcessable('split', {\n    bitDepth: [8, 16]\n  }); // split will always return a stack of images\n\n  if (this.components === 1) {\n    return new Stack([this.clone()]);\n  }\n\n  let images = new Stack();\n  let data = this.data;\n\n  if (this.alpha && preserveAlpha) {\n    for (let i = 0; i < this.components; i++) {\n      let newImage = Image.createFrom(this, {\n        components: 1,\n        alpha: true,\n        colorModel: GREY\n      });\n      let ptr = 0;\n\n      for (let j = 0; j < data.length; j += this.channels) {\n        newImage.data[ptr++] = data[j + i];\n        newImage.data[ptr++] = data[j + this.components];\n      }\n\n      images.push(newImage);\n    }\n  } else {\n    for (let i = 0; i < this.channels; i++) {\n      let newImage = Image.createFrom(this, {\n        components: 1,\n        alpha: false,\n        colorModel: GREY\n      });\n      let ptr = 0;\n\n      for (let j = 0; j < data.length; j += this.channels) {\n        newImage.data[ptr++] = data[j + i];\n      }\n\n      images.push(newImage);\n    }\n  }\n\n  return images;\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/node_modules/image-js/src/image/utility/split.js"],"names":["Stack","Image","GREY","split","options","preserveAlpha","checkProcessable","bitDepth","components","clone","images","data","alpha","i","newImage","createFrom","colorModel","ptr","j","length","channels","push"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,mBAAlB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,SAASC,IAAT,QAAqB,gBAArB;AAEA;;;;;;;;AAOA,eAAe,SAASC,KAAT,CAAeC,OAAO,GAAG,EAAzB,EAA6B;AAC1C,MAAI;AAAEC,IAAAA,aAAa,GAAG;AAAlB,MAA2BD,OAA/B;AAEA,OAAKE,gBAAL,CAAsB,OAAtB,EAA+B;AAC7BC,IAAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,EAAJ;AADmB,GAA/B,EAH0C,CAO1C;;AACA,MAAI,KAAKC,UAAL,KAAoB,CAAxB,EAA2B;AACzB,WAAO,IAAIR,KAAJ,CAAU,CAAC,KAAKS,KAAL,EAAD,CAAV,CAAP;AACD;;AAED,MAAIC,MAAM,GAAG,IAAIV,KAAJ,EAAb;AAEA,MAAIW,IAAI,GAAG,KAAKA,IAAhB;;AACA,MAAI,KAAKC,KAAL,IAAcP,aAAlB,EAAiC;AAC/B,SAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKL,UAAzB,EAAqCK,CAAC,EAAtC,EAA0C;AACxC,UAAIC,QAAQ,GAAGb,KAAK,CAACc,UAAN,CAAiB,IAAjB,EAAuB;AACpCP,QAAAA,UAAU,EAAE,CADwB;AAEpCI,QAAAA,KAAK,EAAE,IAF6B;AAGpCI,QAAAA,UAAU,EAAEd;AAHwB,OAAvB,CAAf;AAKA,UAAIe,GAAG,GAAG,CAAV;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,IAAI,CAACQ,MAAzB,EAAiCD,CAAC,IAAI,KAAKE,QAA3C,EAAqD;AACnDN,QAAAA,QAAQ,CAACH,IAAT,CAAcM,GAAG,EAAjB,IAAuBN,IAAI,CAACO,CAAC,GAAGL,CAAL,CAA3B;AACAC,QAAAA,QAAQ,CAACH,IAAT,CAAcM,GAAG,EAAjB,IAAuBN,IAAI,CAACO,CAAC,GAAG,KAAKV,UAAV,CAA3B;AACD;;AACDE,MAAAA,MAAM,CAACW,IAAP,CAAYP,QAAZ;AACD;AACF,GAdD,MAcO;AACL,SAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKO,QAAzB,EAAmCP,CAAC,EAApC,EAAwC;AACtC,UAAIC,QAAQ,GAAGb,KAAK,CAACc,UAAN,CAAiB,IAAjB,EAAuB;AACpCP,QAAAA,UAAU,EAAE,CADwB;AAEpCI,QAAAA,KAAK,EAAE,KAF6B;AAGpCI,QAAAA,UAAU,EAAEd;AAHwB,OAAvB,CAAf;AAKA,UAAIe,GAAG,GAAG,CAAV;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,IAAI,CAACQ,MAAzB,EAAiCD,CAAC,IAAI,KAAKE,QAA3C,EAAqD;AACnDN,QAAAA,QAAQ,CAACH,IAAT,CAAcM,GAAG,EAAjB,IAAuBN,IAAI,CAACO,CAAC,GAAGL,CAAL,CAA3B;AACD;;AACDH,MAAAA,MAAM,CAACW,IAAP,CAAYP,QAAZ;AACD;AACF;;AAED,SAAOJ,MAAP;AACD","sourcesContent":["import Stack from '../../stack/Stack';\nimport Image from '../Image';\nimport { GREY } from '../model/model';\n\n/**\n * @memberof Image\n * @instance\n * @param {object} [options]\n * @param {boolean} [options.preserveAlpha=true]\n * @return {Stack}\n */\nexport default function split(options = {}) {\n  let { preserveAlpha = true } = options;\n\n  this.checkProcessable('split', {\n    bitDepth: [8, 16],\n  });\n\n  // split will always return a stack of images\n  if (this.components === 1) {\n    return new Stack([this.clone()]);\n  }\n\n  let images = new Stack();\n\n  let data = this.data;\n  if (this.alpha && preserveAlpha) {\n    for (let i = 0; i < this.components; i++) {\n      let newImage = Image.createFrom(this, {\n        components: 1,\n        alpha: true,\n        colorModel: GREY,\n      });\n      let ptr = 0;\n      for (let j = 0; j < data.length; j += this.channels) {\n        newImage.data[ptr++] = data[j + i];\n        newImage.data[ptr++] = data[j + this.components];\n      }\n      images.push(newImage);\n    }\n  } else {\n    for (let i = 0; i < this.channels; i++) {\n      let newImage = Image.createFrom(this, {\n        components: 1,\n        alpha: false,\n        colorModel: GREY,\n      });\n      let ptr = 0;\n      for (let j = 0; j < data.length; j += this.channels) {\n        newImage.data[ptr++] = data[j + i];\n      }\n      images.push(newImage);\n    }\n  }\n\n  return images;\n}\n"]},"metadata":{},"sourceType":"module"}