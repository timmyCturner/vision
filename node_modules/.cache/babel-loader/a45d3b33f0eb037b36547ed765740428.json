{"ast":null,"code":"import BaseRegression, { checkArrayLength, maybeToPrecision } from 'ml-regression-base';\nexport default class SimpleLinearRegression extends BaseRegression {\n  constructor(x, y) {\n    super();\n\n    if (x === true) {\n      this.slope = y.slope;\n      this.intercept = y.intercept;\n      this.coefficients = [y.intercept, y.slope];\n    } else {\n      checkArrayLength(x, y);\n      regress(this, x, y);\n    }\n  }\n\n  toJSON() {\n    return {\n      name: 'simpleLinearRegression',\n      slope: this.slope,\n      intercept: this.intercept\n    };\n  }\n\n  _predict(x) {\n    return this.slope * x + this.intercept;\n  }\n\n  computeX(y) {\n    return (y - this.intercept) / this.slope;\n  }\n\n  toString(precision) {\n    let result = 'f(x) = ';\n\n    if (this.slope !== 0) {\n      const xFactor = maybeToPrecision(this.slope, precision);\n      result += `${xFactor === '1' ? '' : `${xFactor} * `}x`;\n\n      if (this.intercept !== 0) {\n        const absIntercept = Math.abs(this.intercept);\n        const operator = absIntercept === this.intercept ? '+' : '-';\n        result += ` ${operator} ${maybeToPrecision(absIntercept, precision)}`;\n      }\n    } else {\n      result += maybeToPrecision(this.intercept, precision);\n    }\n\n    return result;\n  }\n\n  toLaTeX(precision) {\n    return this.toString(precision);\n  }\n\n  static load(json) {\n    if (json.name !== 'simpleLinearRegression') {\n      throw new TypeError('not a SLR model');\n    }\n\n    return new SimpleLinearRegression(true, json);\n  }\n\n}\n\nfunction regress(slr, x, y) {\n  const n = x.length;\n  let xSum = 0;\n  let ySum = 0;\n  let xSquared = 0;\n  let xY = 0;\n\n  for (let i = 0; i < n; i++) {\n    xSum += x[i];\n    ySum += y[i];\n    xSquared += x[i] * x[i];\n    xY += x[i] * y[i];\n  }\n\n  const numerator = n * xY - xSum * ySum;\n  slr.slope = numerator / (n * xSquared - xSum * xSum);\n  slr.intercept = 1 / n * ySum - slr.slope * (1 / n) * xSum;\n  slr.coefficients = [slr.intercept, slr.slope];\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/node_modules/ml-regression-simple-linear/src/index.js"],"names":["BaseRegression","checkArrayLength","maybeToPrecision","SimpleLinearRegression","constructor","x","y","slope","intercept","coefficients","regress","toJSON","name","_predict","computeX","toString","precision","result","xFactor","absIntercept","Math","abs","operator","toLaTeX","load","json","TypeError","slr","n","length","xSum","ySum","xSquared","xY","i","numerator"],"mappings":"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","sourcesContent":["import BaseRegression, {\n  checkArrayLength,\n  maybeToPrecision\n} from 'ml-regression-base';\n\nexport default class SimpleLinearRegression extends BaseRegression {\n  constructor(x, y) {\n    super();\n    if (x === true) {\n      this.slope = y.slope;\n      this.intercept = y.intercept;\n      this.coefficients = [y.intercept, y.slope];\n    } else {\n      checkArrayLength(x, y);\n      regress(this, x, y);\n    }\n  }\n\n  toJSON() {\n    return {\n      name: 'simpleLinearRegression',\n      slope: this.slope,\n      intercept: this.intercept\n    };\n  }\n\n  _predict(x) {\n    return this.slope * x + this.intercept;\n  }\n\n  computeX(y) {\n    return (y - this.intercept) / this.slope;\n  }\n\n  toString(precision) {\n    let result = 'f(x) = ';\n    if (this.slope !== 0) {\n      const xFactor = maybeToPrecision(this.slope, precision);\n      result += `${xFactor === '1' ? '' : `${xFactor} * `}x`;\n      if (this.intercept !== 0) {\n        const absIntercept = Math.abs(this.intercept);\n        const operator = absIntercept === this.intercept ? '+' : '-';\n        result += ` ${operator} ${maybeToPrecision(absIntercept, precision)}`;\n      }\n    } else {\n      result += maybeToPrecision(this.intercept, precision);\n    }\n    return result;\n  }\n\n  toLaTeX(precision) {\n    return this.toString(precision);\n  }\n\n  static load(json) {\n    if (json.name !== 'simpleLinearRegression') {\n      throw new TypeError('not a SLR model');\n    }\n    return new SimpleLinearRegression(true, json);\n  }\n}\n\nfunction regress(slr, x, y) {\n  const n = x.length;\n  let xSum = 0;\n  let ySum = 0;\n\n  let xSquared = 0;\n  let xY = 0;\n\n  for (let i = 0; i < n; i++) {\n    xSum += x[i];\n    ySum += y[i];\n    xSquared += x[i] * x[i];\n    xY += x[i] * y[i];\n  }\n\n  const numerator = n * xY - xSum * ySum;\n  slr.slope = numerator / (n * xSquared - xSum * xSum);\n  slr.intercept = (1 / n) * ySum - slr.slope * (1 / n) * xSum;\n  slr.coefficients = [slr.intercept, slr.slope];\n}\n"]},"metadata":{},"sourceType":"module"}