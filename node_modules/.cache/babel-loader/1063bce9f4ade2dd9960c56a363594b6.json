{"ast":null,"code":"let w; // Width of entire wave\n\nlet yvalues; // Using an array to store height values for the wave\n\nlet backvalues;\nlet dx; // Value for incrementing x\n\nlet theta;\nlet amplitude;\nlet period;\nlet xspacing;\nexport function setupWave(p) {\n  xspacing = 16; // Distance between each horizontal location\n\n  theta = 0.15; // Start angle at 0\n\n  amplitude = 75.0; // Height of wave\n\n  period = 500.0; // How many pixels before the wave repeats\n\n  w = p.width + 16;\n  dx = 2 * Math.PI / period * xspacing;\n  yvalues = new Array(p.floor(w / xspacing));\n  backvalues = new Array(p.floor(w / xspacing));\n}\nexport function wave(p) {\n  let back = 2; // back offset\n\n  calcWave(back);\n  renderWave(p);\n  backWave(p);\n}\n\nfunction renderWave(p) {\n  p.noStroke();\n  p.fill(37, 207, 122); // A simple way to draw the wave with an ellipse at each location\n\n  for (let x = 0; x < yvalues.length; x++) {\n    var waveHeight = p.height / 2 + yvalues[x];\n    p.ellipse(x * xspacing, 3 * p.height / 5, 64, waveHeight);\n  }\n}\n\n;\n\nfunction backWave(p) {\n  p.noStroke();\n  p.fill(19, 149, 244); // A simple way to draw the wave with an ellipse at each location\n\n  for (let x = 0; x < backvalues.length; x++) {\n    var waveHeight = p.height / 2 + backvalues[x];\n    var waveY_position = 3 * p.height / 5 + 150;\n    p.ellipse(x * xspacing, waveY_position, 64, waveHeight);\n  }\n}\n\n;\n\nfunction calcWave(back) {\n  // Increment theta (try different values for\n  // 'angular velocity' here)\n  theta += 0.02; // For every x value, calculate a y value with sine function\n\n  let x = theta;\n\n  for (let i = 0; i < yvalues.length; i++) {\n    yvalues[i] = Math.sin(x) * amplitude;\n    backvalues[i] = Math.sin(x + back) * amplitude;\n    x += dx;\n  }\n}\n\n;","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/src/sketches/wave.js"],"names":["w","yvalues","backvalues","dx","theta","amplitude","period","xspacing","setupWave","p","width","Math","PI","Array","floor","wave","back","calcWave","renderWave","backWave","noStroke","fill","x","length","waveHeight","height","ellipse","waveY_position","i","sin"],"mappings":"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","sourcesContent":["\r\nlet w; // Width of entire wave\r\nlet yvalues; // Using an array to store height values for the wave\r\nlet backvalues;\r\nlet dx; // Value for incrementing x\r\nlet theta;\r\nlet amplitude;\r\nlet period;\r\nlet xspacing\r\n\r\nexport function setupWave(p){\r\n    xspacing = 16; // Distance between each horizontal location\r\n    theta = 0.15; // Start angle at 0\r\n    amplitude = 75.0; // Height of wave\r\n    period = 500.0; // How many pixels before the wave repeats\r\n    w = p.width + 16;\r\n    dx = ((2 * Math.PI) / period) * xspacing;\r\n    yvalues = new Array(p.floor(w / xspacing));\r\n    backvalues = new Array(p.floor(w / xspacing));\r\n}\r\n\r\nexport function wave(p) {\r\n    let back = 2; // back offset\r\n    calcWave(back);\r\n    renderWave(p);\r\n    backWave(p);\r\n}\r\n\r\n\r\nfunction renderWave(p) {\r\n    p.noStroke();\r\n    p.fill(37, 207, 122);\r\n    // A simple way to draw the wave with an ellipse at each location\r\n    for (let x = 0; x < yvalues.length; x++) {\r\n        var waveHeight =  p.height / 2 + yvalues[x];\r\n        p.ellipse(x * xspacing, 3*p.height/5, 64, waveHeight);\r\n    }\r\n};\r\n\r\nfunction backWave(p) {\r\n    p.noStroke();\r\n    p.fill(19, 149, 244);\r\n    // A simple way to draw the wave with an ellipse at each location\r\n    for (let x = 0; x < backvalues.length; x++) {\r\n        var waveHeight = p.height / 2 + backvalues[x];\r\n        var waveY_position = (3*p.height/5)+150 \r\n        p.ellipse(x * xspacing,waveY_position , 64, waveHeight);\r\n    }\r\n};\r\n\r\nfunction calcWave(back){\r\n    // Increment theta (try different values for\r\n    // 'angular velocity' here)\r\n    theta += 0.02;\r\n\r\n    // For every x value, calculate a y value with sine function\r\n    let x = theta;\r\n    for (let i = 0; i < yvalues.length; i++) {\r\n        yvalues[i] = Math.sin(x) * amplitude;\r\n        backvalues[i] = Math.sin(x + back) * amplitude;\r\n        x += dx;\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}