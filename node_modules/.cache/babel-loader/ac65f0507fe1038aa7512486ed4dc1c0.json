{"ast":null,"code":"import { directConvolution } from 'ml-convolution';\nexport default function convolutionSeparable(data, separatedKernel, width, height) {\n  const result = new Array(data.length);\n  let tmp, conv, offset, kernel;\n  kernel = separatedKernel[1];\n  offset = (kernel.length - 1) / 2;\n  conv = new Array(width + kernel.length - 1);\n  tmp = new Array(width);\n\n  for (let y = 0; y < height; y++) {\n    for (let x = 0; x < width; x++) {\n      tmp[x] = data[y * width + x];\n    }\n\n    directConvolution(tmp, kernel, conv);\n\n    for (let x = 0; x < width; x++) {\n      result[y * width + x] = conv[offset + x];\n    }\n  }\n\n  kernel = separatedKernel[0];\n  offset = (kernel.length - 1) / 2;\n  conv = new Array(height + kernel.length - 1);\n  tmp = new Array(height);\n\n  for (let x = 0; x < width; x++) {\n    for (let y = 0; y < height; y++) {\n      tmp[y] = result[y * width + x];\n    }\n\n    directConvolution(tmp, kernel, conv);\n\n    for (let y = 0; y < height; y++) {\n      result[y * width + x] = conv[offset + y];\n    }\n  }\n\n  return result;\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/node_modules/image-js/src/image/operator/convolutionSeparable.js"],"names":["directConvolution","convolutionSeparable","data","separatedKernel","width","height","result","Array","length","tmp","conv","offset","kernel","y","x"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,gBAAlC;AAEA,eAAe,SAASC,oBAAT,CACbC,IADa,EAEbC,eAFa,EAGbC,KAHa,EAIbC,MAJa,EAKb;AACA,QAAMC,MAAM,GAAG,IAAIC,KAAJ,CAAUL,IAAI,CAACM,MAAf,CAAf;AACA,MAAIC,GAAJ,EAASC,IAAT,EAAeC,MAAf,EAAuBC,MAAvB;AAEAA,EAAAA,MAAM,GAAGT,eAAe,CAAC,CAAD,CAAxB;AACAQ,EAAAA,MAAM,GAAG,CAACC,MAAM,CAACJ,MAAP,GAAgB,CAAjB,IAAsB,CAA/B;AACAE,EAAAA,IAAI,GAAG,IAAIH,KAAJ,CAAUH,KAAK,GAAGQ,MAAM,CAACJ,MAAf,GAAwB,CAAlC,CAAP;AACAC,EAAAA,GAAG,GAAG,IAAIF,KAAJ,CAAUH,KAAV,CAAN;;AACA,OAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,MAApB,EAA4BQ,CAAC,EAA7B,EAAiC;AAC/B,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,KAApB,EAA2BU,CAAC,EAA5B,EAAgC;AAC9BL,MAAAA,GAAG,CAACK,CAAD,CAAH,GAASZ,IAAI,CAACW,CAAC,GAAGT,KAAJ,GAAYU,CAAb,CAAb;AACD;;AACDd,IAAAA,iBAAiB,CAACS,GAAD,EAAMG,MAAN,EAAcF,IAAd,CAAjB;;AACA,SAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,KAApB,EAA2BU,CAAC,EAA5B,EAAgC;AAC9BR,MAAAA,MAAM,CAACO,CAAC,GAAGT,KAAJ,GAAYU,CAAb,CAAN,GAAwBJ,IAAI,CAACC,MAAM,GAAGG,CAAV,CAA5B;AACD;AACF;;AAEDF,EAAAA,MAAM,GAAGT,eAAe,CAAC,CAAD,CAAxB;AACAQ,EAAAA,MAAM,GAAG,CAACC,MAAM,CAACJ,MAAP,GAAgB,CAAjB,IAAsB,CAA/B;AACAE,EAAAA,IAAI,GAAG,IAAIH,KAAJ,CAAUF,MAAM,GAAGO,MAAM,CAACJ,MAAhB,GAAyB,CAAnC,CAAP;AACAC,EAAAA,GAAG,GAAG,IAAIF,KAAJ,CAAUF,MAAV,CAAN;;AACA,OAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,KAApB,EAA2BU,CAAC,EAA5B,EAAgC;AAC9B,SAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,MAApB,EAA4BQ,CAAC,EAA7B,EAAiC;AAC/BJ,MAAAA,GAAG,CAACI,CAAD,CAAH,GAASP,MAAM,CAACO,CAAC,GAAGT,KAAJ,GAAYU,CAAb,CAAf;AACD;;AACDd,IAAAA,iBAAiB,CAACS,GAAD,EAAMG,MAAN,EAAcF,IAAd,CAAjB;;AACA,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,MAApB,EAA4BQ,CAAC,EAA7B,EAAiC;AAC/BP,MAAAA,MAAM,CAACO,CAAC,GAAGT,KAAJ,GAAYU,CAAb,CAAN,GAAwBJ,IAAI,CAACC,MAAM,GAAGE,CAAV,CAA5B;AACD;AACF;;AACD,SAAOP,MAAP;AACD","sourcesContent":["import { directConvolution } from 'ml-convolution';\n\nexport default function convolutionSeparable(\n  data,\n  separatedKernel,\n  width,\n  height,\n) {\n  const result = new Array(data.length);\n  let tmp, conv, offset, kernel;\n\n  kernel = separatedKernel[1];\n  offset = (kernel.length - 1) / 2;\n  conv = new Array(width + kernel.length - 1);\n  tmp = new Array(width);\n  for (let y = 0; y < height; y++) {\n    for (let x = 0; x < width; x++) {\n      tmp[x] = data[y * width + x];\n    }\n    directConvolution(tmp, kernel, conv);\n    for (let x = 0; x < width; x++) {\n      result[y * width + x] = conv[offset + x];\n    }\n  }\n\n  kernel = separatedKernel[0];\n  offset = (kernel.length - 1) / 2;\n  conv = new Array(height + kernel.length - 1);\n  tmp = new Array(height);\n  for (let x = 0; x < width; x++) {\n    for (let y = 0; y < height; y++) {\n      tmp[y] = result[y * width + x];\n    }\n    directConvolution(tmp, kernel, conv);\n    for (let y = 0; y < height; y++) {\n      result[y * width + x] = conv[offset + y];\n    }\n  }\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}