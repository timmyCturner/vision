{"ast":null,"code":"import { validateChannel } from '../../util/channel';\n/**\n * @memberof Image\n * @instance\n * @param {*} channel\n * @param {Image} image\n *\n * @return {this}\n */\n\nexport default function setChannel(channel, image) {\n  this.checkProcessable('setChannel', {\n    bitDepth: [8, 16]\n  });\n  image.checkProcessable('setChannel (image parameter check)', {\n    bitDepth: [this.bitDepth],\n    alpha: [0],\n    components: [1]\n  });\n\n  if (image.width !== this.width || image.height !== this.height) {\n    throw new Error('Images must have exactly the same width and height');\n  }\n\n  channel = validateChannel(this, channel);\n  let ptr = channel;\n\n  for (let i = 0; i < image.data.length; i++) {\n    this.data[ptr] = image.data[i];\n    ptr += this.channels;\n  }\n\n  return this;\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/node_modules/image-js/src/image/utility/setChannel.js"],"names":["validateChannel","setChannel","channel","image","checkProcessable","bitDepth","alpha","components","width","height","Error","ptr","i","data","length","channels"],"mappings":"AAAA,SAASA,eAAT,QAAgC,oBAAhC;AAEA;;;;;;;;;AAQA,eAAe,SAASC,UAAT,CAAoBC,OAApB,EAA6BC,KAA7B,EAAoC;AACjD,OAAKC,gBAAL,CAAsB,YAAtB,EAAoC;AAClCC,IAAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,EAAJ;AADwB,GAApC;AAIAF,EAAAA,KAAK,CAACC,gBAAN,CAAuB,oCAAvB,EAA6D;AAC3DC,IAAAA,QAAQ,EAAE,CAAC,KAAKA,QAAN,CADiD;AAE3DC,IAAAA,KAAK,EAAE,CAAC,CAAD,CAFoD;AAG3DC,IAAAA,UAAU,EAAE,CAAC,CAAD;AAH+C,GAA7D;;AAMA,MAAIJ,KAAK,CAACK,KAAN,KAAgB,KAAKA,KAArB,IAA8BL,KAAK,CAACM,MAAN,KAAiB,KAAKA,MAAxD,EAAgE;AAC9D,UAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;AACD;;AAEDR,EAAAA,OAAO,GAAGF,eAAe,CAAC,IAAD,EAAOE,OAAP,CAAzB;AAEA,MAAIS,GAAG,GAAGT,OAAV;;AACA,OAAK,IAAIU,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,KAAK,CAACU,IAAN,CAAWC,MAA/B,EAAuCF,CAAC,EAAxC,EAA4C;AAC1C,SAAKC,IAAL,CAAUF,GAAV,IAAiBR,KAAK,CAACU,IAAN,CAAWD,CAAX,CAAjB;AACAD,IAAAA,GAAG,IAAI,KAAKI,QAAZ;AACD;;AAED,SAAO,IAAP;AACD","sourcesContent":["import { validateChannel } from '../../util/channel';\n\n/**\n * @memberof Image\n * @instance\n * @param {*} channel\n * @param {Image} image\n *\n * @return {this}\n */\nexport default function setChannel(channel, image) {\n  this.checkProcessable('setChannel', {\n    bitDepth: [8, 16],\n  });\n\n  image.checkProcessable('setChannel (image parameter check)', {\n    bitDepth: [this.bitDepth],\n    alpha: [0],\n    components: [1],\n  });\n\n  if (image.width !== this.width || image.height !== this.height) {\n    throw new Error('Images must have exactly the same width and height');\n  }\n\n  channel = validateChannel(this, channel);\n\n  let ptr = channel;\n  for (let i = 0; i < image.data.length; i++) {\n    this.data[ptr] = image.data[i];\n    ptr += this.channels;\n  }\n\n  return this;\n}\n"]},"metadata":{},"sourceType":"module"}