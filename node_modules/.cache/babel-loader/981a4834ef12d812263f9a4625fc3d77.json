{"ast":null,"code":"import { checkRow, checkChannel } from '../internal/checks';\n/**\n * @memberof Image\n * @instance\n * @param {number} row\n * @param {number} [channel=0]\n * @return {number[]}\n */\n\nexport default function getRow(row, channel = 0) {\n  this.checkProcessable('getRow', {\n    bitDepth: [8, 16]\n  });\n  checkRow(this, row);\n  checkChannel(this, channel);\n  let array = new Array(this.width);\n  let ptr = 0;\n  let begin = row * this.width * this.channels + channel;\n  let end = begin + this.width * this.channels;\n\n  for (let j = begin; j < end; j += this.channels) {\n    array[ptr++] = this.data[j];\n  }\n\n  return array;\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/node_modules/image-js/src/image/utility/getRow.js"],"names":["checkRow","checkChannel","getRow","row","channel","checkProcessable","bitDepth","array","Array","width","ptr","begin","channels","end","j","data"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,YAAnB,QAAuC,oBAAvC;AAEA;;;;;;;;AAOA,eAAe,SAASC,MAAT,CAAgBC,GAAhB,EAAqBC,OAAO,GAAG,CAA/B,EAAkC;AAC/C,OAAKC,gBAAL,CAAsB,QAAtB,EAAgC;AAC9BC,IAAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,EAAJ;AADoB,GAAhC;AAIAN,EAAAA,QAAQ,CAAC,IAAD,EAAOG,GAAP,CAAR;AACAF,EAAAA,YAAY,CAAC,IAAD,EAAOG,OAAP,CAAZ;AAEA,MAAIG,KAAK,GAAG,IAAIC,KAAJ,CAAU,KAAKC,KAAf,CAAZ;AACA,MAAIC,GAAG,GAAG,CAAV;AACA,MAAIC,KAAK,GAAGR,GAAG,GAAG,KAAKM,KAAX,GAAmB,KAAKG,QAAxB,GAAmCR,OAA/C;AACA,MAAIS,GAAG,GAAGF,KAAK,GAAG,KAAKF,KAAL,GAAa,KAAKG,QAApC;;AACA,OAAK,IAAIE,CAAC,GAAGH,KAAb,EAAoBG,CAAC,GAAGD,GAAxB,EAA6BC,CAAC,IAAI,KAAKF,QAAvC,EAAiD;AAC/CL,IAAAA,KAAK,CAACG,GAAG,EAAJ,CAAL,GAAe,KAAKK,IAAL,CAAUD,CAAV,CAAf;AACD;;AAED,SAAOP,KAAP;AACD","sourcesContent":["import { checkRow, checkChannel } from '../internal/checks';\n\n/**\n * @memberof Image\n * @instance\n * @param {number} row\n * @param {number} [channel=0]\n * @return {number[]}\n */\nexport default function getRow(row, channel = 0) {\n  this.checkProcessable('getRow', {\n    bitDepth: [8, 16],\n  });\n\n  checkRow(this, row);\n  checkChannel(this, channel);\n\n  let array = new Array(this.width);\n  let ptr = 0;\n  let begin = row * this.width * this.channels + channel;\n  let end = begin + this.width * this.channels;\n  for (let j = begin; j < end; j += this.channels) {\n    array[ptr++] = this.data[j];\n  }\n\n  return array;\n}\n"]},"metadata":{},"sourceType":"module"}