{"ast":null,"code":"export default function plastic(p) {\n  let canvas;\n  let garbageValues;\n\n  p.setup = () => {\n    canvas = p.createCanvas(600, 300);\n    garbageValues = new Array(p.floor(200));\n  };\n\n  p.draw = () => {\n    p.background('blue');\n    p.backWave();\n  }; //\n  //\n  //\n  //hear lies al information on how to create a garbage\n  //\n  //\n  //\n\n  /*p.calcPlastic= () => {\r\n      //console.log(temp_array)\r\n    if (temp_array != null){\r\n      for (let i = 0; i < (temp_array.length/8); i++) {\r\n        //console.log(typeof parseFloat(temp_array[i*8].land));\r\n        var average = parseFloat(temp_array[i*8].station)// + parseFloat(temp_array[i*8].land))/2);\r\n        //console.log(typeof average);\r\n        yvalues[i] = average+1;\r\n        //console.log(average);\r\n      }\r\n      //console.log(typeof temp_array[200]);\r\n    }\r\n  }*/\n  //\n  //\n  //\n  //hear lies al information on how to create a wave\n  //\n  //\n  //\n\n\n  function makeWaves() {\n    //these are all variables for our calc wave\n    let xspacing = 16; // Distance between each horizontal location\n\n    let w; // Width of entire wave\n\n    let theta = 0.15; // Start angle at 0\n\n    let amplitude = 25.0; // Height of wave\n\n    let period = 200.0; // How many pixels before the wave repeats\n\n    let dx = 2; // Value for incrementing x\n\n    let yvalues; // Using an array to store height values for the wave\n\n    let backvalues;\n    let back = 2; // back offset\n\n    function setup() {\n      w = p.width + 16;\n      dx = 2 * Math.PI / period * xspacing;\n      yvalues = new Array(p.floor(w / xspacing));\n      backvalues = new Array(p.floor(w / xspacing));\n    }\n\n    function draw() {\n      p.calcWave();\n      p.renderWave();\n      p.backWave();\n    } // Increment theta (try different values for\n    // 'angular velocity' here)\n\n\n    theta += 0.02; // For every x value, calculate a y value with sine function\n\n    function calcWave() {\n      let x = theta;\n\n      for (let i = 0; i < yvalues.length; i++) {\n        yvalues[i] = Math.sin(x) * amplitude;\n        backvalues[i] = Math.sin(x + back) * amplitude;\n        x += dx;\n      }\n    }\n\n    function renderWave() {\n      p.noStroke();\n      p.fill(37, 207, 122); // A simple way to draw the wave with an ellipse at each location\n\n      for (let x = 0; x < yvalues.length; x++) {\n        var waveHeight = 4 * p.height / 8 + yvalues[x];\n        p.ellipse(x * xspacing, p.height, 64, waveHeight);\n      }\n    }\n\n    function backWave() {\n      p.noStroke();\n      p.fill(19, 149, 244); // A simple way to draw the wave with an ellipse at each location\n\n      for (let x = 0; x < backvalues.length; x++) {\n        var waveHeight = 4 * p.height / 8 + backvalues[x];\n        p.ellipse(x * xspacing, p.height, 64, waveHeight);\n      }\n    }\n  }\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/src/sketches/plastic.js"],"names":["plastic","p","canvas","garbageValues","setup","createCanvas","Array","floor","draw","background","backWave","makeWaves","xspacing","w","theta","amplitude","period","dx","yvalues","backvalues","back","width","Math","PI","calcWave","renderWave","x","i","length","sin","noStroke","fill","waveHeight","height","ellipse"],"mappings":"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","sourcesContent":["\r\nexport default function plastic(p) {\r\n\r\n  let canvas;\r\n  let garbageValues;\r\n\r\n\r\n  p.setup = () => {\r\n    canvas = p.createCanvas(600, 300);\r\n\r\n    garbageValues = new Array(p.floor(200));\r\n  }\r\n  p.draw = () => {\r\n    p.background('blue');\r\n\r\n    p.backWave();\r\n  }\r\n  //\r\n  //\r\n  //\r\n  //hear lies al information on how to create a garbage\r\n  //\r\n  //\r\n  //\r\n  /*p.calcPlastic= () => {\r\n\r\n    //console.log(temp_array)\r\n    if (temp_array != null){\r\n      for (let i = 0; i < (temp_array.length/8); i++) {\r\n        //console.log(typeof parseFloat(temp_array[i*8].land));\r\n        var average = parseFloat(temp_array[i*8].station)// + parseFloat(temp_array[i*8].land))/2);\r\n        //console.log(typeof average);\r\n        yvalues[i] = average+1;\r\n        //console.log(average);\r\n      }\r\n      //console.log(typeof temp_array[200]);\r\n    }\r\n  }*/\r\n  //\r\n  //\r\n  //\r\n  //hear lies al information on how to create a wave\r\n  //\r\n  //\r\n  //\r\n  function makeWaves(){\r\n    //these are all variables for our calc wave\r\n    let xspacing = 16; // Distance between each horizontal location\r\n    let w; // Width of entire wave\r\n    let theta = 0.15; // Start angle at 0\r\n    let amplitude = 25.0; // Height of wave\r\n    let period = 200.0; // How many pixels before the wave repeats\r\n    let dx=2; // Value for incrementing x\r\n    let yvalues; // Using an array to store height values for the wave\r\n    let backvalues;\r\n    let back = 2 // back offset\r\n\r\n\r\n      function setup ()  {\r\n        w = p.width + 16;\r\n        dx = (2*Math.PI / period) * xspacing;\r\n        yvalues = new Array(p.floor(w / xspacing));\r\n        backvalues = new Array(p.floor(w / xspacing));\r\n      }\r\n      function draw () {\r\n        p.calcWave();\r\n        p.renderWave();\r\n        p.backWave();\r\n      }\r\n\r\n\r\n      // Increment theta (try different values for\r\n      // 'angular velocity' here)\r\n      theta += 0.02;\r\n\r\n      // For every x value, calculate a y value with sine function\r\n    function calcWave ()   {\r\n      let x = theta;\r\n      for (let i = 0; i < yvalues.length; i++) {\r\n\r\n        yvalues[i] = Math.sin(x) * amplitude;\r\n        backvalues[i] = Math.sin(x+back) * amplitude;\r\n        x += dx;\r\n      }\r\n    }\r\n    function renderWave ()  {\r\n      p.noStroke();\r\n      p.fill(37, 207, 122);\r\n      // A simple way to draw the wave with an ellipse at each location\r\n      for (let x = 0; x < yvalues.length; x++) {\r\n        var waveHeight = 4*p.height / 8 + yvalues[x]\r\n        p.ellipse((x) * xspacing, p.height, 64,waveHeight);\r\n\r\n      }\r\n    }\r\n    function backWave ()  {\r\n      p.noStroke();\r\n      p.fill(19, 149, 244);\r\n      // A simple way to draw the wave with an ellipse at each location\r\n      for (let x = 0; x < backvalues.length; x++) {\r\n        var waveHeight = 4*p.height / 8 + backvalues[x]\r\n        p.ellipse((x) * xspacing, p.height, 64,waveHeight);\r\n\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}