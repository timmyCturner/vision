{"ast":null,"code":"/**\n * Returns the number of transparent pixels\n * @memberof Image\n * @instance\n * @param {object} [options]\n * @param {number} [options.alpha=1] - Value of the alpha value to count.\n * @return {number} Number of transparent pixels\n */\nexport default function countAlphaPixels(options = {}) {\n  let {\n    alpha = 1\n  } = options;\n  this.checkProcessable('countAlphaPixels', {\n    bitDepth: [8, 16],\n    alpha: 1\n  });\n  let count = 0;\n\n  if (alpha !== undefined) {\n    for (let i = this.components; i < this.data.length; i += this.channels) {\n      if (this.data[i] === alpha) {\n        count++;\n      }\n    }\n\n    return count;\n  } else {\n    // because there is an alpha channel all the pixels have an alpha\n    return this.size;\n  }\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/node_modules/image-js/src/image/compute/countAlphaPixels.js"],"names":["countAlphaPixels","options","alpha","checkProcessable","bitDepth","count","undefined","i","components","data","length","channels","size"],"mappings":"AAAA;;;;;;;;AAQA,eAAe,SAASA,gBAAT,CAA0BC,OAAO,GAAG,EAApC,EAAwC;AACrD,MAAI;AAAEC,IAAAA,KAAK,GAAG;AAAV,MAAgBD,OAApB;AACA,OAAKE,gBAAL,CAAsB,kBAAtB,EAA0C;AACxCC,IAAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,EAAJ,CAD8B;AAExCF,IAAAA,KAAK,EAAE;AAFiC,GAA1C;AAKA,MAAIG,KAAK,GAAG,CAAZ;;AAEA,MAAIH,KAAK,KAAKI,SAAd,EAAyB;AACvB,SAAK,IAAIC,CAAC,GAAG,KAAKC,UAAlB,EAA8BD,CAAC,GAAG,KAAKE,IAAL,CAAUC,MAA5C,EAAoDH,CAAC,IAAI,KAAKI,QAA9D,EAAwE;AACtE,UAAI,KAAKF,IAAL,CAAUF,CAAV,MAAiBL,KAArB,EAA4B;AAC1BG,QAAAA,KAAK;AACN;AACF;;AACD,WAAOA,KAAP;AACD,GAPD,MAOO;AACL;AACA,WAAO,KAAKO,IAAZ;AACD;AACF","sourcesContent":["/**\n * Returns the number of transparent pixels\n * @memberof Image\n * @instance\n * @param {object} [options]\n * @param {number} [options.alpha=1] - Value of the alpha value to count.\n * @return {number} Number of transparent pixels\n */\nexport default function countAlphaPixels(options = {}) {\n  let { alpha = 1 } = options;\n  this.checkProcessable('countAlphaPixels', {\n    bitDepth: [8, 16],\n    alpha: 1,\n  });\n\n  let count = 0;\n\n  if (alpha !== undefined) {\n    for (let i = this.components; i < this.data.length; i += this.channels) {\n      if (this.data[i] === alpha) {\n        count++;\n      }\n    }\n    return count;\n  } else {\n    // because there is an alpha channel all the pixels have an alpha\n    return this.size;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}