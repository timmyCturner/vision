{"ast":null,"code":"export default function plastic(p) {\n  let canvas; //these are all variables for our wave function\n\n  let xspacing = 16; // Distance between each horizontal location\n\n  let w; // Width of entire wave\n\n  let theta = 0.15; // Start angle at 0\n\n  let amplitude = 25.0; // Height of wave\n\n  let period = 200.0; // How many pixels before the wave repeats\n\n  let dx = 2; // Value for incrementing x\n\n  let yvalues; // Using an array to store height values for the wave\n\n  let backvalues;\n  let back = 2; // back offset\n\n  /*async function execute() {\r\n    //image = await Image.load('plastic_images/bottle1.png');\r\n    console.log(image);\r\n    console.log('HERE');\r\n    let grey = image\r\n      .grey() // convert the image to greyscale.\r\n      .resize({ width: 600 }) // resize the image, forcing a width of 200 pixels. The height is computed automatically to preserve the aspect ratio.\r\n      .rotate(30); // rotate the image clockwise by 30 degrees.\r\n    return grey.save('bottle1.png');\r\n  }*/\n\n  p.setup = () => {\n    canvas = p.createCanvas(600, 300); //set up wave\n\n    w = p.width + 16;\n    dx = 2 * Math.PI / period * xspacing;\n    yvalues = new Array(p.floor(w / xspacing));\n    backvalues = new Array(p.floor(w / xspacing)); //set up plastic\n    //load plastic images into Array\n  };\n\n  p.draw = () => {\n    p.background('blue'); //p.drawPlastic();\n    //image = p.loadImage('./logo.png');\n    //console.log(image);\n\n    p.calcWave();\n    p.renderWave();\n    p.backWave();\n  }; //\n  //\n  //\n  //hear lies al information on how to create plastic\n  //\n  //\n  //\n\n\n  class Plastic {\n    constructor() {\n      this.x = p.random(0, p.width);\n      this.y = p.random(0, p.height);\n      this.image = p.loadImage('./assets/plastic_images/bottle1');\n    }\n\n    show() {\n      p.image(this.image, 20, 20, 20, 20);\n    }\n\n  } //\n  //\n  //\n  //hear lies al information on how to create a wave\n  //\n  //\n  //\n\n\n  p.calcWave = () => {\n    // Increment theta (try different values for\n    // 'angular velocity' here)\n    theta += 0.02; // For every x value, calculate a y value with sine function\n\n    let x = theta;\n\n    for (let i = 0; i < yvalues.length; i++) {\n      yvalues[i] = Math.sin(x) * amplitude;\n      backvalues[i] = Math.sin(x + back) * amplitude;\n      x += dx;\n    }\n  };\n\n  p.renderWave = () => {\n    p.noStroke();\n    p.fill(37, 207, 122); // A simple way to draw the wave with an ellipse at each location\n\n    for (let x = 0; x < yvalues.length; x++) {\n      var waveHeight = 4 * p.height / 8 + yvalues[x];\n      p.ellipse(x * xspacing, p.height, 64, waveHeight);\n    }\n  };\n\n  p.backWave = () => {\n    p.noStroke();\n    p.fill(19, 149, 244); // A simple way to draw the wave with an ellipse at each location\n\n    for (let x = 0; x < backvalues.length; x++) {\n      var waveHeight = 4 * p.height / 8 + backvalues[x];\n      p.ellipse(x * xspacing, p.height, 64, waveHeight);\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/src/sketches/plastic.js"],"names":["plastic","p","canvas","xspacing","w","theta","amplitude","period","dx","yvalues","backvalues","back","setup","createCanvas","width","Math","PI","Array","floor","draw","background","calcWave","renderWave","backWave","Plastic","constructor","x","random","y","height","image","loadImage","show","i","length","sin","noStroke","fill","waveHeight","ellipse"],"mappings":"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","sourcesContent":["\r\nexport default function plastic(p) {\r\n\r\n  let canvas;\r\n\r\n\r\n\r\n\r\n  //these are all variables for our wave function\r\n  let xspacing = 16; // Distance between each horizontal location\r\n  let w; // Width of entire wave\r\n  let theta = 0.15; // Start angle at 0\r\n  let amplitude = 25.0; // Height of wave\r\n  let period = 200.0; // How many pixels before the wave repeats\r\n  let dx=2; // Value for incrementing x\r\n  let yvalues; // Using an array to store height values for the wave\r\n  let backvalues;\r\n  let back = 2 // back offset\r\n\r\n  /*async function execute() {\r\n    //image = await Image.load('plastic_images/bottle1.png');\r\n    console.log(image);\r\n    console.log('HERE');\r\n    let grey = image\r\n      .grey() // convert the image to greyscale.\r\n      .resize({ width: 600 }) // resize the image, forcing a width of 200 pixels. The height is computed automatically to preserve the aspect ratio.\r\n      .rotate(30); // rotate the image clockwise by 30 degrees.\r\n    return grey.save('bottle1.png');\r\n  }*/\r\n\r\n\r\n  p.setup = () => {\r\n    canvas = p.createCanvas(600, 300);\r\n    //set up wave\r\n    w = p.width + 16;\r\n    dx = (2*Math.PI / period) * xspacing;\r\n    yvalues = new Array(p.floor(w / xspacing));\r\n    backvalues = new Array(p.floor(w / xspacing));\r\n\r\n\r\n    //set up plastic\r\n\r\n    //load plastic images into Array\r\n\r\n\r\n  }\r\n  p.draw = () => {\r\n    p.background('blue');\r\n\r\n    //p.drawPlastic();\r\n    //image = p.loadImage('./logo.png');\r\n\r\n    //console.log(image);\r\n    p.calcWave();\r\n    p.renderWave();\r\n    p.backWave();\r\n  }\r\n  //\r\n  //\r\n  //\r\n  //hear lies al information on how to create plastic\r\n  //\r\n  //\r\n  //\r\n  class Plastic{\r\n\r\n    constructor(){\r\n      this.x = p.random(0, p.width);\r\n      this.y = p.random(0,p.height);\r\n      this.image = p.loadImage('./assets/plastic_images/bottle1')\r\n    }\r\n\r\n\r\n    show() {\r\n      p.image(this.image, 20,20,20,20);\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  //\r\n  //\r\n  //\r\n  //hear lies al information on how to create a wave\r\n  //\r\n  //\r\n  //\r\n  p.calcWave= () =>  {\r\n    // Increment theta (try different values for\r\n    // 'angular velocity' here)\r\n    theta += 0.02;\r\n\r\n    // For every x value, calculate a y value with sine function\r\n    let x = theta;\r\n    for (let i = 0; i < yvalues.length; i++) {\r\n\r\n      yvalues[i] = Math.sin(x) * amplitude;\r\n      backvalues[i] = Math.sin(x+back) * amplitude;\r\n      x += dx;\r\n    }\r\n  }\r\n  p.renderWave = () => {\r\n    p.noStroke();\r\n    p.fill(37, 207, 122);\r\n    // A simple way to draw the wave with an ellipse at each location\r\n    for (let x = 0; x < yvalues.length; x++) {\r\n      var waveHeight = 4*p.height / 8 + yvalues[x]\r\n      p.ellipse((x) * xspacing, p.height, 64,waveHeight);\r\n\r\n    }\r\n  }\r\n  p.backWave = () => {\r\n    p.noStroke();\r\n    p.fill(19, 149, 244);\r\n    // A simple way to draw the wave with an ellipse at each location\r\n    for (let x = 0; x < backvalues.length; x++) {\r\n      var waveHeight = 4*p.height / 8 + backvalues[x]\r\n      p.ellipse((x) * xspacing, p.height, 64,waveHeight);\r\n\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}