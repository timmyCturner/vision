{"ast":null,"code":"import Matrix from 'ml-matrix';\n/**\n * @memberof Image\n * @instance\n * @param {object} [options]\n * @param {number} [options.channel]\n * @return {Matrix}\n */\n\nexport default function getMatrix(options = {}) {\n  let {\n    channel\n  } = options;\n  this.checkProcessable('getMatrix', {\n    bitDepth: [8, 16]\n  });\n\n  if (channel === undefined) {\n    if (this.components > 1) {\n      throw new RangeError('You need to define the channel for an image that contains more than one channel');\n    }\n\n    channel = 0;\n  }\n\n  let matrix = new Matrix(this.height, this.width);\n\n  for (let x = 0; x < this.height; x++) {\n    for (let y = 0; y < this.width; y++) {\n      matrix.set(x, y, this.getValueXY(y, x, channel));\n    }\n  }\n\n  return matrix;\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/node_modules/image-js/src/image/utility/getMatrix.js"],"names":["Matrix","getMatrix","options","channel","checkProcessable","bitDepth","undefined","components","RangeError","matrix","height","width","x","y","set","getValueXY"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,WAAnB;AAEA;;;;;;;;AAOA,eAAe,SAASC,SAAT,CAAmBC,OAAO,GAAG,EAA7B,EAAiC;AAC9C,MAAI;AAAEC,IAAAA;AAAF,MAAcD,OAAlB;AACA,OAAKE,gBAAL,CAAsB,WAAtB,EAAmC;AACjCC,IAAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,EAAJ;AADuB,GAAnC;;AAIA,MAAIF,OAAO,KAAKG,SAAhB,EAA2B;AACzB,QAAI,KAAKC,UAAL,GAAkB,CAAtB,EAAyB;AACvB,YAAM,IAAIC,UAAJ,CACJ,iFADI,CAAN;AAGD;;AACDL,IAAAA,OAAO,GAAG,CAAV;AACD;;AAED,MAAIM,MAAM,GAAG,IAAIT,MAAJ,CAAW,KAAKU,MAAhB,EAAwB,KAAKC,KAA7B,CAAb;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKF,MAAzB,EAAiCE,CAAC,EAAlC,EAAsC;AACpC,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKF,KAAzB,EAAgCE,CAAC,EAAjC,EAAqC;AACnCJ,MAAAA,MAAM,CAACK,GAAP,CAAWF,CAAX,EAAcC,CAAd,EAAiB,KAAKE,UAAL,CAAgBF,CAAhB,EAAmBD,CAAnB,EAAsBT,OAAtB,CAAjB;AACD;AACF;;AAED,SAAOM,MAAP;AACD","sourcesContent":["import Matrix from 'ml-matrix';\n\n/**\n * @memberof Image\n * @instance\n * @param {object} [options]\n * @param {number} [options.channel]\n * @return {Matrix}\n */\nexport default function getMatrix(options = {}) {\n  let { channel } = options;\n  this.checkProcessable('getMatrix', {\n    bitDepth: [8, 16],\n  });\n\n  if (channel === undefined) {\n    if (this.components > 1) {\n      throw new RangeError(\n        'You need to define the channel for an image that contains more than one channel',\n      );\n    }\n    channel = 0;\n  }\n\n  let matrix = new Matrix(this.height, this.width);\n  for (let x = 0; x < this.height; x++) {\n    for (let y = 0; y < this.width; y++) {\n      matrix.set(x, y, this.getValueXY(y, x, channel));\n    }\n  }\n\n  return matrix;\n}\n"]},"metadata":{},"sourceType":"module"}