{"ast":null,"code":"import BaseRegression, { checkArrayLength, maybeToPrecision } from 'ml-regression-base';\nimport SimpleLinearRegression from 'ml-regression-simple-linear';\nexport default class ExponentialRegression extends BaseRegression {\n  constructor(x, y) {\n    super();\n\n    if (x === true) {\n      this.A = y.A;\n      this.B = y.B;\n    } else {\n      checkArrayLength(x, y);\n      regress(this, x, y);\n    }\n  }\n\n  _predict(input) {\n    return this.B * Math.exp(input * this.A);\n  }\n\n  toJSON() {\n    return {\n      name: 'exponentialRegression',\n      A: this.A,\n      B: this.B\n    };\n  }\n\n  toString(precision) {\n    return `f(x) = ${maybeToPrecision(this.B, precision)} * e^(${maybeToPrecision(this.A, precision)} * x)`;\n  }\n\n  toLaTeX(precision) {\n    if (this.A >= 0) {\n      return `f(x) = ${maybeToPrecision(this.B, precision)}e^{${maybeToPrecision(this.A, precision)}x}`;\n    } else {\n      return `f(x) = \\\\frac{${maybeToPrecision(this.B, precision)}}{e^{${maybeToPrecision(-this.A, precision)}x}}`;\n    }\n  }\n\n  static load(json) {\n    if (json.name !== 'exponentialRegression') {\n      throw new TypeError('not a exponential regression model');\n    }\n\n    return new ExponentialRegression(true, json);\n  }\n\n}\n\nfunction regress(er, x, y) {\n  const n = x.length;\n  const yl = new Array(n);\n\n  for (let i = 0; i < n; i++) {\n    yl[i] = Math.log(y[i]);\n  }\n\n  const linear = new SimpleLinearRegression(x, yl);\n  er.A = linear.slope;\n  er.B = Math.exp(linear.intercept);\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/node_modules/ml-regression-exponential/src/index.js"],"names":["BaseRegression","checkArrayLength","maybeToPrecision","SimpleLinearRegression","ExponentialRegression","constructor","x","y","A","B","regress","_predict","input","Math","exp","toJSON","name","toString","precision","toLaTeX","load","json","TypeError","er","n","length","yl","Array","i","log","linear","slope","intercept"],"mappings":"AAAA,OAAOA,cAAP,IACEC,gBADF,EAEEC,gBAFF,QAGO,oBAHP;AAIA,OAAOC,sBAAP,MAAmC,6BAAnC;AAEA,eAAe,MAAMC,qBAAN,SAAoCJ,cAApC,CAAmD;AAChEK,EAAAA,WAAW,CAACC,CAAD,EAAIC,CAAJ,EAAO;AAChB;;AACA,QAAID,CAAC,KAAK,IAAV,EAAgB;AACd,WAAKE,CAAL,GAASD,CAAC,CAACC,CAAX;AACA,WAAKC,CAAL,GAASF,CAAC,CAACE,CAAX;AACD,KAHD,MAGO;AACLR,MAAAA,gBAAgB,CAACK,CAAD,EAAIC,CAAJ,CAAhB;AACAG,MAAAA,OAAO,CAAC,IAAD,EAAOJ,CAAP,EAAUC,CAAV,CAAP;AACD;AACF;;AAEDI,EAAAA,QAAQ,CAACC,KAAD,EAAQ;AACd,WAAO,KAAKH,CAAL,GAASI,IAAI,CAACC,GAAL,CAASF,KAAK,GAAG,KAAKJ,CAAtB,CAAhB;AACD;;AAEDO,EAAAA,MAAM,GAAG;AACP,WAAO;AACLC,MAAAA,IAAI,EAAE,uBADD;AAELR,MAAAA,CAAC,EAAE,KAAKA,CAFH;AAGLC,MAAAA,CAAC,EAAE,KAAKA;AAHH,KAAP;AAKD;;AAEDQ,EAAAA,QAAQ,CAACC,SAAD,EAAY;AAClB,WACG,UACChB,gBAAgB,CAAC,KAAKO,CAAN,EAASS,SAAT,CACjB,SACChB,gBAAgB,CAAC,KAAKM,CAAN,EAASU,SAAT,CACjB,OALH;AAOD;;AAEDC,EAAAA,OAAO,CAACD,SAAD,EAAY;AACjB,QAAI,KAAKV,CAAL,IAAU,CAAd,EAAiB;AACf,aACG,UACCN,gBAAgB,CAAC,KAAKO,CAAN,EAASS,SAAT,CACjB,MACChB,gBAAgB,CAAC,KAAKM,CAAN,EAASU,SAAT,CACjB,IALH;AAOD,KARD,MAQO;AACL,aACG,iBACChB,gBAAgB,CAAC,KAAKO,CAAN,EAASS,SAAT,CACjB,QACChB,gBAAgB,CAAC,CAAC,KAAKM,CAAP,EAAUU,SAAV,CACjB,KALH;AAOD;AACF;;AAED,SAAOE,IAAP,CAAYC,IAAZ,EAAkB;AAChB,QAAIA,IAAI,CAACL,IAAL,KAAc,uBAAlB,EAA2C;AACzC,YAAM,IAAIM,SAAJ,CAAc,oCAAd,CAAN;AACD;;AACD,WAAO,IAAIlB,qBAAJ,CAA0B,IAA1B,EAAgCiB,IAAhC,CAAP;AACD;;AA3D+D;;AA8DlE,SAASX,OAAT,CAAiBa,EAAjB,EAAqBjB,CAArB,EAAwBC,CAAxB,EAA2B;AACzB,QAAMiB,CAAC,GAAGlB,CAAC,CAACmB,MAAZ;AACA,QAAMC,EAAE,GAAG,IAAIC,KAAJ,CAAUH,CAAV,CAAX;;AACA,OAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,CAApB,EAAuBI,CAAC,EAAxB,EAA4B;AAC1BF,IAAAA,EAAE,CAACE,CAAD,CAAF,GAAQf,IAAI,CAACgB,GAAL,CAAStB,CAAC,CAACqB,CAAD,CAAV,CAAR;AACD;;AAED,QAAME,MAAM,GAAG,IAAI3B,sBAAJ,CAA2BG,CAA3B,EAA8BoB,EAA9B,CAAf;AACAH,EAAAA,EAAE,CAACf,CAAH,GAAOsB,MAAM,CAACC,KAAd;AACAR,EAAAA,EAAE,CAACd,CAAH,GAAOI,IAAI,CAACC,GAAL,CAASgB,MAAM,CAACE,SAAhB,CAAP;AACD","sourcesContent":["import BaseRegression, {\n  checkArrayLength,\n  maybeToPrecision\n} from 'ml-regression-base';\nimport SimpleLinearRegression from 'ml-regression-simple-linear';\n\nexport default class ExponentialRegression extends BaseRegression {\n  constructor(x, y) {\n    super();\n    if (x === true) {\n      this.A = y.A;\n      this.B = y.B;\n    } else {\n      checkArrayLength(x, y);\n      regress(this, x, y);\n    }\n  }\n\n  _predict(input) {\n    return this.B * Math.exp(input * this.A);\n  }\n\n  toJSON() {\n    return {\n      name: 'exponentialRegression',\n      A: this.A,\n      B: this.B\n    };\n  }\n\n  toString(precision) {\n    return (\n      `f(x) = ${\n        maybeToPrecision(this.B, precision)\n      } * e^(${\n        maybeToPrecision(this.A, precision)\n      } * x)`\n    );\n  }\n\n  toLaTeX(precision) {\n    if (this.A >= 0) {\n      return (\n        `f(x) = ${\n          maybeToPrecision(this.B, precision)\n        }e^{${\n          maybeToPrecision(this.A, precision)\n        }x}`\n      );\n    } else {\n      return (\n        `f(x) = \\\\frac{${\n          maybeToPrecision(this.B, precision)\n        }}{e^{${\n          maybeToPrecision(-this.A, precision)\n        }x}}`\n      );\n    }\n  }\n\n  static load(json) {\n    if (json.name !== 'exponentialRegression') {\n      throw new TypeError('not a exponential regression model');\n    }\n    return new ExponentialRegression(true, json);\n  }\n}\n\nfunction regress(er, x, y) {\n  const n = x.length;\n  const yl = new Array(n);\n  for (let i = 0; i < n; i++) {\n    yl[i] = Math.log(y[i]);\n  }\n\n  const linear = new SimpleLinearRegression(x, yl);\n  er.A = linear.slope;\n  er.B = Math.exp(linear.intercept);\n}\n"]},"metadata":{},"sourceType":"module"}