{"ast":null,"code":"/**\n * Returns an array of arrays containing the pixel values in the form\n * [[R1, G1, B1], [R2, G2, B2], ...]\n * @memberof Image\n * @instance\n * @return {Array<Array<number>>}\n */\nexport default function getPixelsArray() {\n  this.checkProcessable('getPixelsArray', {\n    bitDepth: [8, 16, 32]\n  });\n  let array = new Array(this.size);\n  let ptr = 0;\n\n  for (let i = 0; i < this.data.length; i += this.channels) {\n    let pixel = new Array(this.components);\n\n    for (let j = 0; j < this.components; j++) {\n      pixel[j] = this.data[i + j];\n    }\n\n    array[ptr++] = pixel;\n  }\n\n  return array;\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/node_modules/image-js/src/image/utility/getPixelsArray.js"],"names":["getPixelsArray","checkProcessable","bitDepth","array","Array","size","ptr","i","data","length","channels","pixel","components","j"],"mappings":"AAAA;;;;;;;AAOA,eAAe,SAASA,cAAT,GAA0B;AACvC,OAAKC,gBAAL,CAAsB,gBAAtB,EAAwC;AACtCC,IAAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR;AAD4B,GAAxC;AAIA,MAAIC,KAAK,GAAG,IAAIC,KAAJ,CAAU,KAAKC,IAAf,CAAZ;AACA,MAAIC,GAAG,GAAG,CAAV;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,IAAL,CAAUC,MAA9B,EAAsCF,CAAC,IAAI,KAAKG,QAAhD,EAA0D;AACxD,QAAIC,KAAK,GAAG,IAAIP,KAAJ,CAAU,KAAKQ,UAAf,CAAZ;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKD,UAAzB,EAAqCC,CAAC,EAAtC,EAA0C;AACxCF,MAAAA,KAAK,CAACE,CAAD,CAAL,GAAW,KAAKL,IAAL,CAAUD,CAAC,GAAGM,CAAd,CAAX;AACD;;AACDV,IAAAA,KAAK,CAACG,GAAG,EAAJ,CAAL,GAAeK,KAAf;AACD;;AAED,SAAOR,KAAP;AACD","sourcesContent":["/**\n * Returns an array of arrays containing the pixel values in the form\n * [[R1, G1, B1], [R2, G2, B2], ...]\n * @memberof Image\n * @instance\n * @return {Array<Array<number>>}\n */\nexport default function getPixelsArray() {\n  this.checkProcessable('getPixelsArray', {\n    bitDepth: [8, 16, 32],\n  });\n\n  let array = new Array(this.size);\n  let ptr = 0;\n  for (let i = 0; i < this.data.length; i += this.channels) {\n    let pixel = new Array(this.components);\n    for (let j = 0; j < this.components; j++) {\n      pixel[j] = this.data[i + j];\n    }\n    array[ptr++] = pixel;\n  }\n\n  return array;\n}\n"]},"metadata":{},"sourceType":"module"}