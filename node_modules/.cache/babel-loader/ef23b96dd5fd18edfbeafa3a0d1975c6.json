{"ast":null,"code":"const noiseSpeed = 0.01;\nconst noiseHeight = 20;\nconst num_clouds = 3;\nconst cloud_ellipses = [{\n  x: 0,\n  y: 20,\n  rx: 70,\n  ry: 40\n}, {\n  x: 25,\n  y: -3,\n  rx: 50,\n  ry: 28\n}, {\n  x: 70,\n  y: 3,\n  rx: 50,\n  ry: 28\n}, {\n  x: 100,\n  y: 5,\n  rx: 24,\n  ry: 24\n}, {\n  x: 115,\n  y: -2,\n  rx: 24,\n  ry: 24\n}, {\n  x: 130,\n  y: -2,\n  rx: 24,\n  ry: 24\n}, {\n  x: 145,\n  y: 0,\n  rx: 24,\n  ry: 24\n}, {\n  x: 160,\n  y: 5,\n  rx: 24,\n  ry: 24\n}, {\n  x: 173,\n  y: 5,\n  rx: 24,\n  ry: 24\n}, {\n  x: 185,\n  y: 5,\n  rx: 24,\n  ry: 24\n}, {\n  x: 198,\n  y: -3,\n  rx: 24,\n  ry: 24\n}, {\n  x: 215,\n  y: 3,\n  rx: 28,\n  ry: 24\n}, {\n  x: 230,\n  y: 4,\n  rx: 30,\n  ry: 24\n}, {\n  x: 245,\n  y: 6,\n  rx: 30,\n  ry: 24\n}, {\n  x: 260,\n  y: 6,\n  rx: 30,\n  ry: 24\n}, {\n  x: 270,\n  y: 3,\n  rx: 26,\n  ry: 24\n}, {\n  x: 285,\n  y: 10,\n  rx: 30,\n  ry: 24\n}, {\n  x: 310,\n  y: 4,\n  rx: 30,\n  ry: 24\n}, {\n  x: 325,\n  y: 4,\n  rx: 16,\n  ry: 16\n}, {\n  x: 339,\n  y: 2,\n  rx: 24,\n  ry: 24\n}, {\n  x: 365,\n  y: 5,\n  rx: 44,\n  ry: 28\n}, {\n  x: 400,\n  y: 0,\n  rx: 40,\n  ry: 24\n}, {\n  x: 435,\n  y: -5,\n  rx: 50,\n  ry: 30\n}, {\n  x: 465,\n  y: 5,\n  rx: 24,\n  ry: 24\n}, {\n  x: 490,\n  y: -3,\n  rx: 38,\n  ry: 30\n}, {\n  x: 524,\n  y: -3,\n  rx: 40,\n  ry: 24\n}, {\n  x: 550,\n  y: -10,\n  rx: 60,\n  ry: 50\n}, {\n  x: 595,\n  y: 3,\n  rx: 58,\n  ry: 40\n}, {\n  x: 627,\n  y: 12,\n  rx: 24,\n  ry: 24\n}, {\n  x: 643,\n  y: 20,\n  rx: 40,\n  ry: 24\n}, {\n  x: 665,\n  y: 19,\n  rx: 30,\n  ry: 24\n}, {\n  x: 695,\n  y: 20,\n  rx: 50,\n  ry: 24\n}, {\n  x: 715,\n  y: 25,\n  rx: 45,\n  ry: 30\n}, {\n  x: 740,\n  y: 25,\n  rx: 45,\n  ry: 30\n}, {\n  x: 754,\n  y: 17,\n  rx: 27,\n  ry: 24\n}, {\n  x: 766,\n  y: 17,\n  rx: 20,\n  ry: 20\n}, {\n  x: 780,\n  y: 17,\n  rx: 25,\n  ry: 20\n}, {\n  x: 800,\n  y: 10,\n  rx: 30,\n  ry: 20\n}, {\n  x: 820,\n  y: 10,\n  rx: 40,\n  ry: 40\n}, {\n  x: 860,\n  y: 10,\n  rx: 80,\n  ry: 60\n}, {\n  x: 890,\n  y: -5,\n  rx: 24,\n  ry: 24\n}, {\n  x: 910,\n  y: -10,\n  rx: 40,\n  ry: 40\n}, {\n  x: 950,\n  y: -18,\n  rx: 69,\n  ry: 50\n}, {\n  x: 990,\n  y: -18,\n  rx: 40,\n  ry: 30\n}, {\n  x: 1010,\n  y: 0,\n  rx: 40,\n  ry: 30\n}, {\n  x: 1030,\n  y: 10,\n  rx: 24,\n  ry: 24\n}, {\n  x: 1050,\n  y: 8,\n  rx: 24,\n  ry: 24\n}, {\n  x: 1065,\n  y: 10,\n  rx: 24,\n  ry: 24\n}, {\n  x: 1090,\n  y: 15,\n  rx: 50,\n  ry: 24\n}, {\n  x: 1115,\n  y: 20,\n  rx: 24,\n  ry: 24\n}, {\n  x: 1135,\n  y: 25,\n  rx: 40,\n  ry: 24\n}, {\n  x: 1155,\n  y: 25,\n  rx: 40,\n  ry: 24\n}, {\n  x: 1180,\n  y: 20,\n  rx: 38,\n  ry: 25\n}, {\n  x: 1200,\n  y: 100,\n  rx: 70,\n  ry: 40\n}];\nlet noiseY;\nlet clouds = []; //new height to add to the height of the wave to indicate see level rise\n\nlet newHeight = 0;\nexport function setupLandscape(p) {\n  for (let i = 0; i < 3; i++) {\n    // initialize the clouds\n    clouds[i] = new Cloud(p, num_clouds - i);\n  }\n\n  noiseY = p.height * 3 / 4; // y-noise for waves\n}\n;\nexport function drawLandscape(p, currentDate, seaLevelRise, temperatureData) {\n  // this loops everything inside body\n  //we wil add a new height to the starting height to make our landscape rise and fall\n  // with the date and sea seaLevelRise data\n  var currentYear = currentDate.getFullYear();\n  var index = currentYear - 1880;\n\n  if (index < 0) {\n    newHeight = 0;\n  }\n\n  if (currentYear > 2013) {\n    newHeight = seaLevelRise[2013 - 1880][1] * 3 + (currentYear - 2014) / 3;\n  } else {\n    newHeight = seaLevelRise[index][1] * 3;\n  }\n\n  drawClouds(currentYear);\n  drawWaves(p, currentDate, temperatureData);\n  p.noStroke();\n}\n\nfunction drawClouds(currentYear) {\n  // create the clouds and call their moethods\n  for (var i = 0; i < num_clouds; i++) {\n    clouds[i].move();\n    clouds[i].display(currentYear);\n  }\n}\n\nfunction drawWaves(p, currentDate, temperatureData) {\n  // create the waves\n  var startColor = {\n    r: 194,\n    g: 247,\n    b: 254\n  };\n  var endColor = {\n    r: 116,\n    g: 199,\n    b: 145\n  };\n  var color = calcWaveColor(p, currentDate, startColor, endColor, temperatureData);\n  createWave(p, 0 - newHeight, color, 2);\n  var startColor = {\n    r: 84,\n    g: 182,\n    b: 282\n  };\n  var endColor = {\n    r: 109,\n    g: 163,\n    b: 103\n  };\n  var color = calcWaveColor(p, currentDate, startColor, endColor, temperatureData);\n  createWave(p, 65 - newHeight, color, 2);\n  var startColor = {\n    r: 112,\n    g: 219,\n    b: 245\n  };\n  var endColor = {\n    r: 50,\n    g: 189,\n    b: 34\n  };\n  var color = calcWaveColor(p, currentDate, startColor, endColor, temperatureData);\n  createWave(p, 80 - newHeight, color, 2);\n}\n\nexport function drawSeaboard(p) {\n  // create the landscape\n  createWave(p, 180, {\n    r: 250,\n    g: 219,\n    b: 97\n  }, 1);\n}\n/**\r\n * Create wave\r\n *\r\n * @param {*} offsetY Vertical offset of wave\r\n * @param {*} rgb Wave color\r\n * @param {*} dim Dimension (1D or 2D)\r\n */\n\nfunction createWave(p, offsetY, rgb, dim) {\n  p.noFill();\n  p.stroke(rgb.r, rgb.g, rgb.b); // draw wave\n\n  p.strokeWeight(p.height / 2);\n  p.beginShape(); // create shape for area under waves\n\n  p.curveVertex(0, p.height / 2);\n\n  for (let i = 0; i < p.width; i += 50) {\n    let y = dim === 1 ? p.map(p.noise(i), 0, 1, 200, 300) + noiseY + offsetY : p.noise(p.frameCount * noiseSpeed + i) * noiseHeight + noiseY + offsetY; // redraw y-coordinates for waves\n\n    p.curveVertex(i, y);\n  }\n\n  p.curveVertex(p.width, p.height / 2);\n  p.endShape(p.LINES); // end shape for area under waves\n}\n\nclass Cloud {\n  // class for cloud objects\n  constructor(p, key) {\n    this.x = p.width - 1200 * key; // initial x position\n\n    this.y = p.height / 2 - 15; // initial y position\n\n    this.display = function (currentYear) {\n      var color = 255 - (currentYear - 1950) * 2;\n      console.log(color);\n      p.fill(color);\n      p.beginShape(); // create shape for area under ellipses\n\n      for (let i = 0; i < cloud_ellipses.length; i++) {\n        p.ellipse( // create ellipses that form clouds\n        this.x + cloud_ellipses[i].x, this.y + cloud_ellipses[i].y, cloud_ellipses[i].rx, cloud_ellipses[i].ry);\n        p.curveVertex( // create vertices to paint area under cloud white\n        this.x + cloud_ellipses[i].x, this.y + cloud_ellipses[i].y);\n      }\n\n      p.curveVertex(p.width, p.height);\n      p.endShape(p.CLOSE); // end shape for area under ellipses\n    };\n\n    this.move = function () {\n      this.x += 0.2; // cloud movement speed\n\n      if (this.x >= p.width) {\n        this.x = p.width - 1200 * num_clouds; // reset cloud to this position\n      }\n\n      this.y = p.height / 2 - 15 - newHeight; // update Yposition\n    };\n  }\n\n}\n\nexport function calcWaveColor(p, currentDate, startColor, endColor, temperatureData) {\n  var currentYear = currentDate.getFullYear();\n  var index = (currentYear - 1880) * temperatureData.length / 140 - 100;\n  var i = Math.round(index);\n  var average = 0;\n\n  for (var count = 0; count < 100; count++) {\n    average = average + parseFloat(temperatureData[i + count].station);\n  } //console.log(i);\n  //smallest is 0 largest is 115\n\n\n  average = average + 3;\n  var rGap = (startColor.r - endColor.r) / 115;\n  var gGap = (startColor.g - endColor.g) / 115;\n  var bGap = (startColor.b - endColor.b) / 115; // code body moved outside (above) statement block\n\n  var rIndex = startColor.r - (rGap * average | 0);\n  var gIndex = startColor.g - (gGap * average | 0);\n  var bIndex = startColor.b - (bGap * average | 0);\n  return {\n    r: rIndex,\n    g: gIndex,\n    b: bIndex\n  };\n  return endColor;\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/src/sketches/landscape.js"],"names":["noiseSpeed","noiseHeight","num_clouds","cloud_ellipses","x","y","rx","ry","noiseY","clouds","newHeight","setupLandscape","p","i","Cloud","height","drawLandscape","currentDate","seaLevelRise","temperatureData","currentYear","getFullYear","index","drawClouds","drawWaves","noStroke","move","display","startColor","r","g","b","endColor","color","calcWaveColor","createWave","drawSeaboard","offsetY","rgb","dim","noFill","stroke","strokeWeight","beginShape","curveVertex","width","map","noise","frameCount","endShape","LINES","constructor","key","console","log","fill","length","ellipse","CLOSE","Math","round","average","count","parseFloat","station","rGap","gGap","bGap","rIndex","gIndex","bIndex"],"mappings":"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","sourcesContent":["const noiseSpeed = 0.01;\r\nconst noiseHeight = 20;\r\nconst num_clouds = 3;\r\nconst cloud_ellipses = [\r\n    { x: 0, y: 20, rx: 70, ry: 40 },\r\n    { x: 25, y: -3, rx: 50, ry: 28 },\r\n    { x: 70, y: 3, rx: 50, ry: 28 },\r\n    { x: 100, y: 5, rx: 24, ry: 24 },\r\n    { x: 115, y: -2, rx: 24, ry: 24 },\r\n    { x: 130, y: -2, rx: 24, ry: 24 },\r\n    { x: 145, y: 0, rx: 24, ry: 24 },\r\n    { x: 160, y: 5, rx: 24, ry: 24 },\r\n    { x: 173, y: 5, rx: 24, ry: 24 },\r\n    { x: 185, y: 5, rx: 24, ry: 24 },\r\n    { x: 198, y: -3, rx: 24, ry: 24 },\r\n    { x: 215, y: 3, rx: 28, ry: 24 },\r\n    { x: 230, y: 4, rx: 30, ry: 24 },\r\n    { x: 245, y: 6, rx: 30, ry: 24 },\r\n    { x: 260, y: 6, rx: 30, ry: 24 },\r\n    { x: 270, y: 3, rx: 26, ry: 24 },\r\n    { x: 285, y: 10, rx: 30, ry: 24 },\r\n    { x: 310, y: 4, rx: 30, ry: 24 },\r\n    { x: 325, y: 4, rx: 16, ry: 16 },\r\n    { x: 339, y: 2, rx: 24, ry: 24 },\r\n    { x: 365, y: 5, rx: 44, ry: 28 },\r\n    { x: 400, y: 0, rx: 40, ry: 24 },\r\n    { x: 435, y: -5, rx: 50, ry: 30 },\r\n    { x: 465, y: 5, rx: 24, ry: 24 },\r\n    { x: 490, y: -3, rx: 38, ry: 30 },\r\n    { x: 524, y: -3, rx: 40, ry: 24 },\r\n    { x: 550, y: -10, rx: 60, ry: 50 },\r\n    { x: 595, y: 3, rx: 58, ry: 40 },\r\n    { x: 627, y: 12, rx: 24, ry: 24 },\r\n    { x: 643, y: 20, rx: 40, ry: 24 },\r\n    { x: 665, y: 19, rx: 30, ry: 24 },\r\n    { x: 695, y: 20, rx: 50, ry: 24 },\r\n    { x: 715, y: 25, rx: 45, ry: 30 },\r\n    { x: 740, y: 25, rx: 45, ry: 30 },\r\n    { x: 754, y: 17, rx: 27, ry: 24 },\r\n    { x: 766, y: 17, rx: 20, ry: 20 },\r\n    { x: 780, y: 17, rx: 25, ry: 20 },\r\n    { x: 800, y: 10, rx: 30, ry: 20 },\r\n    { x: 820, y: 10, rx: 40, ry: 40 },\r\n    { x: 860, y: 10, rx: 80, ry: 60 },\r\n    { x: 890, y: -5, rx: 24, ry: 24 },\r\n    { x: 910, y: -10, rx: 40, ry: 40 },\r\n    { x: 950, y: -18, rx: 69, ry: 50 },\r\n    { x: 990, y: -18, rx: 40, ry: 30 },\r\n    { x: 1010, y: 0, rx: 40, ry: 30 },\r\n    { x: 1030, y: 10, rx: 24, ry: 24 },\r\n    { x: 1050, y: 8, rx: 24, ry: 24 },\r\n    { x: 1065, y: 10, rx: 24, ry: 24 },\r\n    { x: 1090, y: 15, rx: 50, ry: 24 },\r\n    { x: 1115, y: 20, rx: 24, ry: 24 },\r\n    { x: 1135, y: 25, rx: 40, ry: 24 },\r\n    { x: 1155, y: 25, rx: 40, ry: 24 },\r\n    { x: 1180, y: 20, rx: 38, ry: 25 },\r\n    { x: 1200, y: 100, rx: 70, ry: 40 },\r\n];\r\nlet noiseY;\r\nlet clouds = [];\r\n//new height to add to the height of the wave to indicate see level rise\r\nlet newHeight = 0;\r\n\r\nexport function setupLandscape(p) {\r\n    for (let i = 0; i < 3; i++) { // initialize the clouds\r\n        clouds[i] = new Cloud(p, num_clouds - i);\r\n    }\r\n\r\n    noiseY = (p.height * 3) / 4; // y-noise for waves\r\n};\r\n\r\n\r\nexport function drawLandscape(p,currentDate,seaLevelRise,temperatureData) { // this loops everything inside body\r\n    //we wil add a new height to the starting height to make our landscape rise and fall\r\n    // with the date and sea seaLevelRise data\r\n\r\n    var currentYear = currentDate.getFullYear();\r\n    var index = currentYear - 1880;\r\n\r\n    if (index<0){\r\n      newHeight = 0\r\n    }\r\n    if (currentYear>2013)\r\n    {\r\n      newHeight = seaLevelRise[(2013-1880)][1]*3+((currentYear-2014))/3\r\n    }\r\n    else{\r\n      newHeight = seaLevelRise[index][1]*3\r\n    }\r\n\r\n\r\n    drawClouds(currentYear);\r\n    drawWaves(p,currentDate,temperatureData);\r\n    p.noStroke();\r\n}\r\n\r\nfunction drawClouds(currentYear) { // create the clouds and call their moethods\r\n    for (var i = 0; i < num_clouds; i++) {\r\n        clouds[i].move();\r\n        clouds[i].display(currentYear);\r\n    }\r\n}\r\n\r\nfunction drawWaves(p,currentDate,temperatureData) { // create the waves\r\n\r\n    var startColor = { r: 194, g: 247, b: 254 }\r\n    var endColor = {r: 116, g:199, b:145 }\r\n    var color = calcWaveColor(p,currentDate, startColor,endColor,temperatureData)\r\n    createWave(p, (0 - newHeight), color , 2);\r\n\r\n    var startColor = { r: 84, g: 182, b: 282 }\r\n    var endColor = {r: 109, g:163, b:103 }\r\n    var color = calcWaveColor(p,currentDate,startColor,endColor,temperatureData)\r\n    createWave(p, (65 - newHeight), color, 2);\r\n\r\n    var startColor = { r: 112, g: 219, b: 245 }\r\n    var endColor = {r: 50, g:189, b:34 }\r\n    var color = calcWaveColor(p,currentDate,startColor,endColor,temperatureData)\r\n    createWave(p, (80 - newHeight), color, 2);\r\n}\r\n\r\nexport function drawSeaboard(p) { // create the landscape\r\n    createWave(p, (180), { r: 250, g: 219, b: 97 }, 1);\r\n}\r\n\r\n/**\r\n * Create wave\r\n *\r\n * @param {*} offsetY Vertical offset of wave\r\n * @param {*} rgb Wave color\r\n * @param {*} dim Dimension (1D or 2D)\r\n */\r\nfunction createWave(p, offsetY, rgb, dim) {\r\n    p.noFill();\r\n    p.stroke(rgb.r, rgb.g, rgb.b); // draw wave\r\n    p.strokeWeight(p.height / 2);\r\n    p.beginShape(); // create shape for area under waves\r\n    p.curveVertex(0, p.height / 2);\r\n    for (let i = 0; i < p.width; i += 50) {\r\n        let y =\r\n            dim === 1 ?\r\n            p.map(p.noise(i), 0, 1, 200, 300) + noiseY + offsetY :\r\n                p.noise(p.frameCount * noiseSpeed + i) * noiseHeight +\r\n                noiseY +\r\n                offsetY; // redraw y-coordinates for waves\r\n        p.curveVertex(i, y);\r\n    }\r\n    p.curveVertex(p.width, p.height / 2);\r\n    p.endShape(p.LINES); // end shape for area under waves\r\n}\r\n\r\nclass Cloud { // class for cloud objects\r\n    constructor(p, key) {\r\n        this.x = (p.width - 1200 * key); // initial x position\r\n        this.y = (p.height / 2 - 15); // initial y position\r\n\r\n        this.display = function (currentYear) {\r\n            var color = 255-((currentYear-1950))*2\r\n            console.log(color);\r\n            p.fill(color);\r\n            p.beginShape(); // create shape for area under ellipses\r\n            for (let i = 0; i < cloud_ellipses.length; i++) {\r\n                p.ellipse( // create ellipses that form clouds\r\n                    this.x + cloud_ellipses[i].x,\r\n                    this.y + cloud_ellipses[i].y,\r\n                    cloud_ellipses[i].rx,\r\n                    cloud_ellipses[i].ry\r\n                );\r\n                p.curveVertex( // create vertices to paint area under cloud white\r\n                    this.x + cloud_ellipses[i].x,\r\n                    this.y + cloud_ellipses[i].y\r\n                );\r\n            }\r\n            p.curveVertex(p.width, p.height);\r\n            p.endShape(p.CLOSE); // end shape for area under ellipses\r\n        };\r\n\r\n        this.move = function () {\r\n            this.x += 0.2; // cloud movement speed\r\n\r\n            if (this.x >= p.width) {\r\n                this.x = p.width - 1200 * num_clouds; // reset cloud to this position\r\n            }\r\n\r\n            this.y = (p.height / 2 - 15) - newHeight ; // update Yposition\r\n        };\r\n    }\r\n}\r\n\r\nexport function calcWaveColor(p, currentDate ,startColor, endColor, temperatureData ) {\r\n\r\n    var currentYear = currentDate.getFullYear();\r\n\r\n    var index = ((currentYear - 1880) * temperatureData.length) / 140 - 100;\r\n\r\n    var i = Math.round(index);\r\n    var average = 0;\r\n    for (var count = 0; count < 100; count++) {\r\n        average = average + parseFloat(temperatureData[i + count].station);\r\n    }\r\n    //console.log(i);\r\n    //smallest is 0 largest is 115\r\n    average = average + 3\r\n\r\n    var rGap = (startColor.r-endColor.r)/ 115;\r\n    var gGap = (startColor.g-endColor.g)/ 115;\r\n    var bGap = (startColor.b-endColor.b)/ 115;\r\n\r\n     // code body moved outside (above) statement block\r\n     var rIndex = startColor.r - ((rGap * average) | 0);\r\n     var gIndex = startColor.g - ((gGap * average) | 0);\r\n     var bIndex = startColor.b - ((bGap * average) | 0);\r\n\r\n     return {r:rIndex, g:gIndex, b:bIndex}\r\n\r\n\r\n    return endColor\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}