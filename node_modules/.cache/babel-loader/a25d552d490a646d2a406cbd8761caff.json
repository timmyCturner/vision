{"ast":null,"code":"export default function microPlastic(p) {\n  let canvas; //these are gonna be the variables for our garbage collection\n  //these are all variables for our wave function\n\n  let xspacing = 16; // Distance between each horizontal location\n\n  let w; // Width of entire wave\n\n  let theta = 0.15; // Start angle at 0\n\n  let amplitude = 25.0; // Height of wave\n\n  let period = 200.0; // How many pixels before the wave repeats\n\n  let dx = 2; // Value for incrementing x\n\n  let yvalues; // Using an array to store height values for the wave\n\n  let backvalues;\n  let back = 2; // back offset\n\n  p.setup = () => {\n    canvas = p.createCanvas(600, 300); //set up wave\n\n    w = p.width + 16;\n    dx = 2 * Math.PI / period * xspacing;\n    yvalues = new Array(p.floor(w / xspacing));\n    backvalues = new Array(p.floor(w / xspacing)); //\n    //set up plastic\n    //\n  };\n\n  p.draw = () => {\n    p.background('blue'); //do wave\n    //p.calcWave();\n    //p.renderWave();\n    //p.backWave();\n    //calc microplastic\n    //\n\n    p.background(230, 230, 250);\n\n    for (var i = 0; i < drops.length; i++) {\n      drops[i].fall();\n      drops[i].show();\n    }\n  };\n\n  class Drop {\n    constructor() {\n      this.x = 0 + 10;\n      this.y = 0 + 10;\n    }\n\n    show() {\n      p.noStroke();\n      p.fill(255);\n      p.ellipse(this.x, this.y, 2, 3);\n    }\n\n    update() {\n      this.speed = 5;\n      this.gravity = 1.05;\n      this.y = this.y + this.speed * this.gravity;\n\n      if (this.y > p.height) {\n        this.y = 0 + 10;\n        this.gravity = 0;\n      }\n    }\n\n  }\n  /*\r\n  //\r\n  //\r\n  //\r\n  //hear lies al information on how to create a wave\r\n  //\r\n  //\r\n  //\r\n  p.calcWave= () =>  {\r\n    // Increment theta (try different values for\r\n    // 'angular velocity' here)\r\n    theta += 0.02;\r\n    // For every x value, calculate a y value with sine function\r\n    let x = theta;\r\n    for (let i = 0; i < yvalues.length; i++) {\r\n        yvalues[i] = Math.sin(x) * amplitude;\r\n      backvalues[i] = Math.sin(x+back) * amplitude;\r\n      x += dx;\r\n    }\r\n  }\r\n  p.renderWave = () => {\r\n    p.noStroke();\r\n    p.fill(37, 207, 122);\r\n    // A simple way to draw the wave with an ellipse at each location\r\n    for (let x = 0; x < yvalues.length; x++) {\r\n      var waveHeight = 4*p.height / 8 + yvalues[x]\r\n      p.ellipse((x) * xspacing, p.height, 64,waveHeight);\r\n      }\r\n  }\r\n  p.backWave = () => {\r\n    p.noStroke();\r\n    p.fill(19, 149, 244);\r\n    // A simple way to draw the wave with an ellipse at each location\r\n    for (let x = 0; x < backvalues.length; x++) {\r\n      var waveHeight = 4*p.height / 8 + backvalues[x]\r\n      p.ellipse((x) * xspacing, p.height, 64,waveHeight);\r\n      }\r\n  }\r\n  */\n\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/src/sketches/microPlastic.js"],"names":["microPlastic","p","canvas","xspacing","w","theta","amplitude","period","dx","yvalues","backvalues","back","setup","createCanvas","width","Math","PI","Array","floor","draw","background","i","drops","length","fall","show","Drop","constructor","x","y","noStroke","fill","ellipse","update","speed","gravity","height"],"mappings":"AAEA,eAAe,SAASA,YAAT,CAAsBC,CAAtB,EAAyB;AAEtC,MAAIC,MAAJ,CAFsC,CAItC;AAEA;;AACA,MAAIC,QAAQ,GAAG,EAAf,CAPsC,CAOnB;;AACnB,MAAIC,CAAJ,CARsC,CAQ/B;;AACP,MAAIC,KAAK,GAAG,IAAZ,CATsC,CASpB;;AAClB,MAAIC,SAAS,GAAG,IAAhB,CAVsC,CAUhB;;AACtB,MAAIC,MAAM,GAAG,KAAb,CAXsC,CAWlB;;AACpB,MAAIC,EAAE,GAAC,CAAP,CAZsC,CAY5B;;AACV,MAAIC,OAAJ,CAbsC,CAazB;;AACb,MAAIC,UAAJ;AACA,MAAIC,IAAI,GAAG,CAAX,CAfsC,CAezB;;AAIbV,EAAAA,CAAC,CAACW,KAAF,GAAU,MAAM;AACdV,IAAAA,MAAM,GAAGD,CAAC,CAACY,YAAF,CAAe,GAAf,EAAoB,GAApB,CAAT,CADc,CAEd;;AACAT,IAAAA,CAAC,GAAGH,CAAC,CAACa,KAAF,GAAU,EAAd;AACAN,IAAAA,EAAE,GAAI,IAAEO,IAAI,CAACC,EAAP,GAAYT,MAAb,GAAuBJ,QAA5B;AACAM,IAAAA,OAAO,GAAG,IAAIQ,KAAJ,CAAUhB,CAAC,CAACiB,KAAF,CAAQd,CAAC,GAAGD,QAAZ,CAAV,CAAV;AACAO,IAAAA,UAAU,GAAG,IAAIO,KAAJ,CAAUhB,CAAC,CAACiB,KAAF,CAAQd,CAAC,GAAGD,QAAZ,CAAV,CAAb,CANc,CAOd;AACA;AACA;AAEC,GAXH;;AAaAF,EAAAA,CAAC,CAACkB,IAAF,GAAS,MAAM;AACblB,IAAAA,CAAC,CAACmB,UAAF,CAAa,MAAb,EADa,CAGb;AACA;AACA;AACA;AACA;AACA;;AACAnB,IAAAA,CAAC,CAACmB,UAAF,CAAa,GAAb,EAAkB,GAAlB,EAAuB,GAAvB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,KAAK,CAACC,MAA1B,EAAkCF,CAAC,EAAnC,EAAuC;AACrCC,MAAAA,KAAK,CAACD,CAAD,CAAL,CAASG,IAAT;AACAF,MAAAA,KAAK,CAACD,CAAD,CAAL,CAASI,IAAT;AACD;AAEF,GAfD;;AAmBA,QAAMC,IAAN,CAAU;AAERC,IAAAA,WAAW,GAAE;AACX,WAAKC,CAAL,GAAS,IAAI,EAAb;AACA,WAAKC,CAAL,GAAS,IAAI,EAAb;AACD;;AAGDJ,IAAAA,IAAI,GAAG;AACLxB,MAAAA,CAAC,CAAC6B,QAAF;AACA7B,MAAAA,CAAC,CAAC8B,IAAF,CAAO,GAAP;AACA9B,MAAAA,CAAC,CAAC+B,OAAF,CAAU,KAAKJ,CAAf,EAAkB,KAAKC,CAAvB,EAA0B,CAA1B,EAA6B,CAA7B;AACD;;AACDI,IAAAA,MAAM,GAAG;AACP,WAAKC,KAAL,GAAa,CAAb;AACA,WAAKC,OAAL,GAAe,IAAf;AACA,WAAKN,CAAL,GAAS,KAAKA,CAAL,GAAS,KAAKK,KAAL,GAAW,KAAKC,OAAlC;;AAEA,UAAI,KAAKN,CAAL,GAAS5B,CAAC,CAACmC,MAAf,EAAuB;AACrB,aAAKP,CAAL,GAAS,IAAI,EAAb;AAEA,aAAKM,OAAL,GAAe,CAAf;AACC;AACF;;AAvBK;AA0BV;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CD","sourcesContent":["\r\n\r\nexport default function microPlastic(p) {\r\n\r\n  let canvas;\r\n\r\n  //these are gonna be the variables for our garbage collection\r\n\r\n  //these are all variables for our wave function\r\n  let xspacing = 16; // Distance between each horizontal location\r\n  let w; // Width of entire wave\r\n  let theta = 0.15; // Start angle at 0\r\n  let amplitude = 25.0; // Height of wave\r\n  let period = 200.0; // How many pixels before the wave repeats\r\n  let dx=2; // Value for incrementing x\r\n  let yvalues; // Using an array to store height values for the wave\r\n  let backvalues;\r\n  let back = 2 // back offset\r\n\r\n\r\n\r\n  p.setup = () => {\r\n    canvas = p.createCanvas(600, 300);\r\n    //set up wave\r\n    w = p.width + 16;\r\n    dx = (2*Math.PI / period) * xspacing;\r\n    yvalues = new Array(p.floor(w / xspacing));\r\n    backvalues = new Array(p.floor(w / xspacing));\r\n    //\r\n    //set up plastic\r\n    //\r\n\r\n    }\r\n\r\n  p.draw = () => {\r\n    p.background('blue');\r\n\r\n    //do wave\r\n    //p.calcWave();\r\n    //p.renderWave();\r\n    //p.backWave();\r\n    //calc microplastic\r\n    //\r\n    p.background(230, 230, 250);\r\n    for (var i = 0; i < drops.length; i++) {\r\n      drops[i].fall();\r\n      drops[i].show();\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  class Drop{\r\n\r\n    constructor(){\r\n      this.x = 0 + 10\r\n      this.y = 0 + 10;\r\n    }\r\n\r\n\r\n    show() {\r\n      p.noStroke();\r\n      p.fill(255);\r\n      p.ellipse(this.x, this.y, 2, 3);\r\n    }\r\n    update() {\r\n      this.speed = 5;\r\n      this.gravity = 1.05;\r\n      this.y = this.y + this.speed*this.gravity;\r\n\r\n      if (this.y > p.height) {\r\n        this.y = 0 + 10;\r\n\r\n        this.gravity = 0;\r\n        }\r\n      }\r\n    }\r\n\r\n  /*\r\n  //\r\n  //\r\n  //\r\n  //hear lies al information on how to create a wave\r\n  //\r\n  //\r\n  //\r\n  p.calcWave= () =>  {\r\n    // Increment theta (try different values for\r\n    // 'angular velocity' here)\r\n    theta += 0.02;\r\n    // For every x value, calculate a y value with sine function\r\n    let x = theta;\r\n    for (let i = 0; i < yvalues.length; i++) {\r\n\r\n      yvalues[i] = Math.sin(x) * amplitude;\r\n      backvalues[i] = Math.sin(x+back) * amplitude;\r\n      x += dx;\r\n    }\r\n  }\r\n  p.renderWave = () => {\r\n    p.noStroke();\r\n    p.fill(37, 207, 122);\r\n    // A simple way to draw the wave with an ellipse at each location\r\n    for (let x = 0; x < yvalues.length; x++) {\r\n      var waveHeight = 4*p.height / 8 + yvalues[x]\r\n      p.ellipse((x) * xspacing, p.height, 64,waveHeight);\r\n\r\n    }\r\n  }\r\n  p.backWave = () => {\r\n    p.noStroke();\r\n    p.fill(19, 149, 244);\r\n    // A simple way to draw the wave with an ellipse at each location\r\n    for (let x = 0; x < backvalues.length; x++) {\r\n      var waveHeight = 4*p.height / 8 + backvalues[x]\r\n      p.ellipse((x) * xspacing, p.height, 64,waveHeight);\r\n\r\n    }\r\n  }\r\n  */\r\n}\r\n"]},"metadata":{},"sourceType":"module"}