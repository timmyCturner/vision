{"ast":null,"code":"import { checkColumn, checkChannel } from '../internal/checks';\n/**\n * @memberof Image\n * @instance\n * @param {number} column\n * @param {number} [channel=0]\n * @return {number[]}\n */\n\nexport default function getColumn(column, channel = 0) {\n  this.checkProcessable('getColumn', {\n    bitDepth: [8, 16]\n  });\n  checkColumn(this, column);\n  checkChannel(this, channel);\n  let array = new Array(this.height);\n  let ptr = 0;\n  let step = this.width * this.channels;\n\n  for (let j = channel + column * this.channels; j < this.data.length; j += step) {\n    array[ptr++] = this.data[j];\n  }\n\n  return array;\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/node_modules/image-js/src/image/utility/getColumn.js"],"names":["checkColumn","checkChannel","getColumn","column","channel","checkProcessable","bitDepth","array","Array","height","ptr","step","width","channels","j","data","length"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,YAAtB,QAA0C,oBAA1C;AAEA;;;;;;;;AAOA,eAAe,SAASC,SAAT,CAAmBC,MAAnB,EAA2BC,OAAO,GAAG,CAArC,EAAwC;AACrD,OAAKC,gBAAL,CAAsB,WAAtB,EAAmC;AACjCC,IAAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,EAAJ;AADuB,GAAnC;AAIAN,EAAAA,WAAW,CAAC,IAAD,EAAOG,MAAP,CAAX;AACAF,EAAAA,YAAY,CAAC,IAAD,EAAOG,OAAP,CAAZ;AAEA,MAAIG,KAAK,GAAG,IAAIC,KAAJ,CAAU,KAAKC,MAAf,CAAZ;AACA,MAAIC,GAAG,GAAG,CAAV;AACA,MAAIC,IAAI,GAAG,KAAKC,KAAL,GAAa,KAAKC,QAA7B;;AACA,OACE,IAAIC,CAAC,GAAGV,OAAO,GAAGD,MAAM,GAAG,KAAKU,QADlC,EAEEC,CAAC,GAAG,KAAKC,IAAL,CAAUC,MAFhB,EAGEF,CAAC,IAAIH,IAHP,EAIE;AACAJ,IAAAA,KAAK,CAACG,GAAG,EAAJ,CAAL,GAAe,KAAKK,IAAL,CAAUD,CAAV,CAAf;AACD;;AACD,SAAOP,KAAP;AACD","sourcesContent":["import { checkColumn, checkChannel } from '../internal/checks';\n\n/**\n * @memberof Image\n * @instance\n * @param {number} column\n * @param {number} [channel=0]\n * @return {number[]}\n */\nexport default function getColumn(column, channel = 0) {\n  this.checkProcessable('getColumn', {\n    bitDepth: [8, 16],\n  });\n\n  checkColumn(this, column);\n  checkChannel(this, channel);\n\n  let array = new Array(this.height);\n  let ptr = 0;\n  let step = this.width * this.channels;\n  for (\n    let j = channel + column * this.channels;\n    j < this.data.length;\n    j += step\n  ) {\n    array[ptr++] = this.data[j];\n  }\n  return array;\n}\n"]},"metadata":{},"sourceType":"module"}