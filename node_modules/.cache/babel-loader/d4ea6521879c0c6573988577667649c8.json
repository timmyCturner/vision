{"ast":null,"code":"import { validateChannel } from '../../util/channel';\nimport Image from '../Image';\nimport { GREY } from '../model/model';\n/**\n * Create a grey image based on the selected channel\n * @memberof Image\n * @instance\n * @param {number|string} channel\n * @param {object} [options]\n * @param {boolean} [options.keepAlpha]\n * @param {boolean} [options.mergeAlpha]\n * @return {Image} A grey image with the extracted channel\n */\n\nexport default function getChannel(channel, options = {}) {\n  let {\n    keepAlpha = false,\n    mergeAlpha = false\n  } = options;\n  keepAlpha &= this.alpha;\n  mergeAlpha &= this.alpha;\n  this.checkProcessable('getChannel', {\n    bitDepth: [8, 16]\n  });\n  channel = validateChannel(this, channel);\n  let newImage = Image.createFrom(this, {\n    components: 1,\n    alpha: keepAlpha,\n    colorModel: GREY\n  });\n  let ptr = 0;\n\n  for (let j = 0; j < this.data.length; j += this.channels) {\n    if (mergeAlpha) {\n      newImage.data[ptr++] = this.data[j + channel] * this.data[j + this.components] / this.maxValue;\n    } else {\n      newImage.data[ptr++] = this.data[j + channel];\n\n      if (keepAlpha) {\n        newImage.data[ptr++] = this.data[j + this.components];\n      }\n    }\n  }\n\n  return newImage;\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/node_modules/image-js/src/image/utility/getChannel.js"],"names":["validateChannel","Image","GREY","getChannel","channel","options","keepAlpha","mergeAlpha","alpha","checkProcessable","bitDepth","newImage","createFrom","components","colorModel","ptr","j","data","length","channels","maxValue"],"mappings":"AAAA,SAASA,eAAT,QAAgC,oBAAhC;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,SAASC,IAAT,QAAqB,gBAArB;AAEA;;;;;;;;;;;AAUA,eAAe,SAASC,UAAT,CAAoBC,OAApB,EAA6BC,OAAO,GAAG,EAAvC,EAA2C;AACxD,MAAI;AAAEC,IAAAA,SAAS,GAAG,KAAd;AAAqBC,IAAAA,UAAU,GAAG;AAAlC,MAA4CF,OAAhD;AAEAC,EAAAA,SAAS,IAAI,KAAKE,KAAlB;AACAD,EAAAA,UAAU,IAAI,KAAKC,KAAnB;AAEA,OAAKC,gBAAL,CAAsB,YAAtB,EAAoC;AAClCC,IAAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,EAAJ;AADwB,GAApC;AAIAN,EAAAA,OAAO,GAAGJ,eAAe,CAAC,IAAD,EAAOI,OAAP,CAAzB;AAEA,MAAIO,QAAQ,GAAGV,KAAK,CAACW,UAAN,CAAiB,IAAjB,EAAuB;AACpCC,IAAAA,UAAU,EAAE,CADwB;AAEpCL,IAAAA,KAAK,EAAEF,SAF6B;AAGpCQ,IAAAA,UAAU,EAAEZ;AAHwB,GAAvB,CAAf;AAKA,MAAIa,GAAG,GAAG,CAAV;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,IAAL,CAAUC,MAA9B,EAAsCF,CAAC,IAAI,KAAKG,QAAhD,EAA0D;AACxD,QAAIZ,UAAJ,EAAgB;AACdI,MAAAA,QAAQ,CAACM,IAAT,CAAcF,GAAG,EAAjB,IACG,KAAKE,IAAL,CAAUD,CAAC,GAAGZ,OAAd,IAAyB,KAAKa,IAAL,CAAUD,CAAC,GAAG,KAAKH,UAAnB,CAA1B,GACA,KAAKO,QAFP;AAGD,KAJD,MAIO;AACLT,MAAAA,QAAQ,CAACM,IAAT,CAAcF,GAAG,EAAjB,IAAuB,KAAKE,IAAL,CAAUD,CAAC,GAAGZ,OAAd,CAAvB;;AACA,UAAIE,SAAJ,EAAe;AACbK,QAAAA,QAAQ,CAACM,IAAT,CAAcF,GAAG,EAAjB,IAAuB,KAAKE,IAAL,CAAUD,CAAC,GAAG,KAAKH,UAAnB,CAAvB;AACD;AACF;AACF;;AAED,SAAOF,QAAP;AACD","sourcesContent":["import { validateChannel } from '../../util/channel';\nimport Image from '../Image';\nimport { GREY } from '../model/model';\n\n/**\n * Create a grey image based on the selected channel\n * @memberof Image\n * @instance\n * @param {number|string} channel\n * @param {object} [options]\n * @param {boolean} [options.keepAlpha]\n * @param {boolean} [options.mergeAlpha]\n * @return {Image} A grey image with the extracted channel\n */\nexport default function getChannel(channel, options = {}) {\n  let { keepAlpha = false, mergeAlpha = false } = options;\n\n  keepAlpha &= this.alpha;\n  mergeAlpha &= this.alpha;\n\n  this.checkProcessable('getChannel', {\n    bitDepth: [8, 16],\n  });\n\n  channel = validateChannel(this, channel);\n\n  let newImage = Image.createFrom(this, {\n    components: 1,\n    alpha: keepAlpha,\n    colorModel: GREY,\n  });\n  let ptr = 0;\n  for (let j = 0; j < this.data.length; j += this.channels) {\n    if (mergeAlpha) {\n      newImage.data[ptr++] =\n        (this.data[j + channel] * this.data[j + this.components]) /\n        this.maxValue;\n    } else {\n      newImage.data[ptr++] = this.data[j + channel];\n      if (keepAlpha) {\n        newImage.data[ptr++] = this.data[j + this.components];\n      }\n    }\n  }\n\n  return newImage;\n}\n"]},"metadata":{},"sourceType":"module"}