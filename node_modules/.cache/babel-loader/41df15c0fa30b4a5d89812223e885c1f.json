{"ast":null,"code":"import { Matrix, SVD } from 'ml-matrix';\nimport BaseRegression from 'ml-regression-base';\nconst defaultOptions = {\n  order: 2\n}; // Implements the Kernel ridge regression algorithm.\n// http://www.ics.uci.edu/~welling/classnotes/papers_class/Kernel-Ridge.pdf\n\nexport default class PolynomialFitRegression2D extends BaseRegression {\n  /**\n   * Constructor for the 2D polynomial fitting\n   *\n   * @param inputs\n   * @param outputs\n   * @param options\n   * @constructor\n   */\n  constructor(inputs, outputs, options) {\n    super();\n\n    if (inputs === true) {\n      // reloading model\n      this.coefficients = Matrix.columnVector(outputs.coefficients);\n      this.order = outputs.order;\n\n      if (outputs.r) {\n        this.r = outputs.r;\n        this.r2 = outputs.r2;\n      }\n\n      if (outputs.chi2) {\n        this.chi2 = outputs.chi2;\n      }\n    } else {\n      options = Object.assign({}, defaultOptions, options);\n      this.order = options.order;\n      this.coefficients = [];\n      this.X = inputs;\n      this.y = outputs;\n      this.train(this.X, this.y, options);\n    }\n  }\n  /**\n   * Function that fits the model given the data(X) and predictions(y).\n   * The third argument is an object with the following options:\n   * * order: order of the polynomial to fit.\n   *\n   * @param {Matrix} X - A matrix with n rows and 2 columns.\n   * @param {Matrix} y - A vector of the prediction values.\n   */\n\n\n  train(X, y) {\n    if (!Matrix.isMatrix(X)) X = new Matrix(X);\n    if (!Matrix.isMatrix(y)) y = Matrix.columnVector(y);\n\n    if (y.rows !== X.rows) {\n      y = y.transpose();\n    }\n\n    if (X.columns !== 2) {\n      throw new RangeError(`You give X with ${X.columns} columns and it must be 2`);\n    }\n\n    if (X.rows !== y.rows) {\n      throw new RangeError('X and y must have the same rows');\n    }\n\n    var examples = X.rows;\n    var coefficients = (this.order + 2) * (this.order + 1) / 2;\n    this.coefficients = new Array(coefficients);\n    var x1 = X.getColumnVector(0);\n    var x2 = X.getColumnVector(1);\n    var scaleX1 = 1.0 / x1.clone().abs().max();\n    var scaleX2 = 1.0 / x2.clone().abs().max();\n    var scaleY = 1.0 / y.clone().abs().max();\n    x1.mulColumn(0, scaleX1);\n    x2.mulColumn(0, scaleX2);\n    y.mulColumn(0, scaleY);\n    var A = new Matrix(examples, coefficients);\n    var col = 0;\n\n    for (var i = 0; i <= this.order; ++i) {\n      var limit = this.order - i;\n\n      for (var j = 0; j <= limit; ++j) {\n        var result = powColVector(x1, i).mulColumnVector(powColVector(x2, j));\n        A.setColumn(col, result);\n        col++;\n      }\n    }\n\n    var svd = new SVD(A.transpose(), {\n      computeLeftSingularVectors: true,\n      computeRightSingularVectors: true,\n      autoTranspose: false\n    });\n    var qqs = Matrix.rowVector(svd.diagonal);\n    qqs = qqs.apply(function (i, j) {\n      if (this.get(i, j) >= 1e-15) this.set(i, j, 1 / this.get(i, j));else this.set(i, j, 0);\n    });\n    var qqs1 = Matrix.zeros(examples, coefficients);\n\n    for (i = 0; i < coefficients; ++i) {\n      qqs1.set(i, i, qqs.get(0, i));\n    }\n\n    qqs = qqs1;\n    var U = svd.rightSingularVectors;\n    var V = svd.leftSingularVectors;\n    this.coefficients = V.mmul(qqs.transpose()).mmul(U.transpose()).mmul(y);\n    col = 0;\n\n    for (i = 0; i <= coefficients; ++i) {\n      limit = this.order - i;\n\n      for (j = 0; j <= limit; ++j) {\n        this.coefficients.set(col, 0, this.coefficients.get(col, 0) * Math.pow(scaleX1, i) * Math.pow(scaleX2, j) / scaleY);\n        col++;\n      }\n    }\n  }\n\n  _predict(newInputs) {\n    var x1 = newInputs[0];\n    var x2 = newInputs[1];\n    var y = 0;\n    var column = 0;\n\n    for (var i = 0; i <= this.order; i++) {\n      for (var j = 0; j <= this.order - i; j++) {\n        y += Math.pow(x1, i) * Math.pow(x2, j) * this.coefficients.get(column, 0);\n        column++;\n      }\n    }\n\n    return y;\n  }\n\n  toJSON() {\n    return {\n      name: 'polyfit2D',\n      order: this.order,\n      coefficients: this.coefficients\n    };\n  }\n\n  static load(json) {\n    if (json.name !== 'polyfit2D') {\n      throw new TypeError('not a polyfit2D model');\n    }\n\n    return new PolynomialFitRegression2D(true, json);\n  }\n\n}\n/**\n * Function that given a column vector return this: vector^power\n *\n * @param x - Column vector.\n * @param power - Pow number.\n * @return {Suite|Matrix}\n */\n\nfunction powColVector(x, power) {\n  var result = x.clone();\n\n  for (var i = 0; i < x.rows; ++i) {\n    result.set(i, 0, Math.pow(result.get(i, 0), power));\n  }\n\n  return result;\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/node_modules/ml-regression/src/regression/poly-fit-regression2d.js"],"names":["Matrix","SVD","BaseRegression","defaultOptions","order","PolynomialFitRegression2D","constructor","inputs","outputs","options","coefficients","columnVector","r","r2","chi2","Object","assign","X","y","train","isMatrix","rows","transpose","columns","RangeError","examples","Array","x1","getColumnVector","x2","scaleX1","clone","abs","max","scaleX2","scaleY","mulColumn","A","col","i","limit","j","result","powColVector","mulColumnVector","setColumn","svd","computeLeftSingularVectors","computeRightSingularVectors","autoTranspose","qqs","rowVector","diagonal","apply","get","set","qqs1","zeros","U","rightSingularVectors","V","leftSingularVectors","mmul","Math","pow","_predict","newInputs","column","toJSON","name","load","json","TypeError","x","power"],"mappings":"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","sourcesContent":["import { Matrix, SVD } from 'ml-matrix';\nimport BaseRegression from 'ml-regression-base';\n\nconst defaultOptions = {\n  order: 2\n};\n// Implements the Kernel ridge regression algorithm.\n// http://www.ics.uci.edu/~welling/classnotes/papers_class/Kernel-Ridge.pdf\nexport default class PolynomialFitRegression2D extends BaseRegression {\n  /**\n   * Constructor for the 2D polynomial fitting\n   *\n   * @param inputs\n   * @param outputs\n   * @param options\n   * @constructor\n   */\n  constructor(inputs, outputs, options) {\n    super();\n    if (inputs === true) {\n      // reloading model\n      this.coefficients = Matrix.columnVector(outputs.coefficients);\n      this.order = outputs.order;\n      if (outputs.r) {\n        this.r = outputs.r;\n        this.r2 = outputs.r2;\n      }\n      if (outputs.chi2) {\n        this.chi2 = outputs.chi2;\n      }\n    } else {\n      options = Object.assign({}, defaultOptions, options);\n      this.order = options.order;\n      this.coefficients = [];\n      this.X = inputs;\n      this.y = outputs;\n\n      this.train(this.X, this.y, options);\n    }\n  }\n\n  /**\n   * Function that fits the model given the data(X) and predictions(y).\n   * The third argument is an object with the following options:\n   * * order: order of the polynomial to fit.\n   *\n   * @param {Matrix} X - A matrix with n rows and 2 columns.\n   * @param {Matrix} y - A vector of the prediction values.\n   */\n  train(X, y) {\n    if (!Matrix.isMatrix(X)) X = new Matrix(X);\n    if (!Matrix.isMatrix(y)) y = Matrix.columnVector(y);\n\n    if (y.rows !== X.rows) {\n      y = y.transpose();\n    }\n\n    if (X.columns !== 2) {\n      throw new RangeError(\n        `You give X with ${X.columns} columns and it must be 2`\n      );\n    }\n    if (X.rows !== y.rows) {\n      throw new RangeError('X and y must have the same rows');\n    }\n\n    var examples = X.rows;\n    var coefficients = ((this.order + 2) * (this.order + 1)) / 2;\n    this.coefficients = new Array(coefficients);\n\n    var x1 = X.getColumnVector(0);\n    var x2 = X.getColumnVector(1);\n\n    var scaleX1 =\n      1.0 /\n      x1\n        .clone()\n        .abs()\n        .max();\n    var scaleX2 =\n      1.0 /\n      x2\n        .clone()\n        .abs()\n        .max();\n    var scaleY =\n      1.0 /\n      y\n        .clone()\n        .abs()\n        .max();\n\n    x1.mulColumn(0, scaleX1);\n    x2.mulColumn(0, scaleX2);\n    y.mulColumn(0, scaleY);\n\n    var A = new Matrix(examples, coefficients);\n    var col = 0;\n\n    for (var i = 0; i <= this.order; ++i) {\n      var limit = this.order - i;\n      for (var j = 0; j <= limit; ++j) {\n        var result = powColVector(x1, i).mulColumnVector(powColVector(x2, j));\n        A.setColumn(col, result);\n        col++;\n      }\n    }\n\n    var svd = new SVD(A.transpose(), {\n      computeLeftSingularVectors: true,\n      computeRightSingularVectors: true,\n      autoTranspose: false\n    });\n\n    var qqs = Matrix.rowVector(svd.diagonal);\n    qqs = qqs.apply(function (i, j) {\n      if (this.get(i, j) >= 1e-15) this.set(i, j, 1 / this.get(i, j));\n      else this.set(i, j, 0);\n    });\n\n    var qqs1 = Matrix.zeros(examples, coefficients);\n    for (i = 0; i < coefficients; ++i) {\n      qqs1.set(i, i, qqs.get(0, i));\n    }\n\n    qqs = qqs1;\n\n    var U = svd.rightSingularVectors;\n    var V = svd.leftSingularVectors;\n\n    this.coefficients = V.mmul(qqs.transpose())\n      .mmul(U.transpose())\n      .mmul(y);\n\n    col = 0;\n\n    for (i = 0; i <= coefficients; ++i) {\n      limit = this.order - i;\n      for (j = 0; j <= limit; ++j) {\n        this.coefficients.set(\n          col,\n          0,\n          (this.coefficients.get(col, 0) *\n            Math.pow(scaleX1, i) *\n            Math.pow(scaleX2, j)) /\n            scaleY\n        );\n        col++;\n      }\n    }\n  }\n\n  _predict(newInputs) {\n    var x1 = newInputs[0];\n    var x2 = newInputs[1];\n\n    var y = 0;\n    var column = 0;\n\n    for (var i = 0; i <= this.order; i++) {\n      for (var j = 0; j <= this.order - i; j++) {\n        y +=\n          Math.pow(x1, i) * Math.pow(x2, j) * this.coefficients.get(column, 0);\n        column++;\n      }\n    }\n\n    return y;\n  }\n\n  toJSON() {\n    return {\n      name: 'polyfit2D',\n      order: this.order,\n      coefficients: this.coefficients\n    };\n  }\n\n  static load(json) {\n    if (json.name !== 'polyfit2D') {\n      throw new TypeError('not a polyfit2D model');\n    }\n    return new PolynomialFitRegression2D(true, json);\n  }\n}\n\n/**\n * Function that given a column vector return this: vector^power\n *\n * @param x - Column vector.\n * @param power - Pow number.\n * @return {Suite|Matrix}\n */\nfunction powColVector(x, power) {\n  var result = x.clone();\n  for (var i = 0; i < x.rows; ++i) {\n    result.set(i, 0, Math.pow(result.get(i, 0), power));\n  }\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}