{"ast":null,"code":"'use strict';\n\nconst tags = {\n  standard: require('./tags/standard'),\n  exif: require('./tags/exif'),\n  gps: require('./tags/gps')\n};\n\nclass IFD {\n  constructor(kind) {\n    if (!kind) {\n      throw new Error('missing kind');\n    }\n\n    this.data = null;\n    this.fields = new Map();\n    this.kind = kind;\n    this._map = null;\n  }\n\n  get(tag) {\n    if (typeof tag === 'number') {\n      return this.fields.get(tag);\n    } else if (typeof tag === 'string') {\n      return this.fields.get(tags[this.kind].tagsByName[tag]);\n    } else {\n      throw new Error('expected a number or string');\n    }\n  }\n\n  get map() {\n    if (!this._map) {\n      this._map = {};\n      const taglist = tags[this.kind].tagsById;\n\n      for (var key of this.fields.keys()) {\n        if (taglist[key]) {\n          this._map[taglist[key]] = this.fields.get(key);\n        }\n      }\n    }\n\n    return this._map;\n  }\n\n}\n\nmodule.exports = IFD;","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/node_modules/fast-jpeg/node_modules/tiff/src/ifd.js"],"names":["tags","standard","require","exif","gps","IFD","constructor","kind","Error","data","fields","Map","_map","get","tag","tagsByName","map","taglist","tagsById","key","keys","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAG;AACTC,EAAAA,QAAQ,EAAEC,OAAO,CAAC,iBAAD,CADR;AAETC,EAAAA,IAAI,EAAED,OAAO,CAAC,aAAD,CAFJ;AAGTE,EAAAA,GAAG,EAAEF,OAAO,CAAC,YAAD;AAHH,CAAb;;AAMA,MAAMG,GAAN,CAAU;AACNC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,QAAI,CAACA,IAAL,EAAW;AACP,YAAM,IAAIC,KAAJ,CAAU,cAAV,CAAN;AACH;;AACD,SAAKC,IAAL,GAAY,IAAZ;AACA,SAAKC,MAAL,GAAc,IAAIC,GAAJ,EAAd;AACA,SAAKJ,IAAL,GAAYA,IAAZ;AACA,SAAKK,IAAL,GAAY,IAAZ;AACH;;AAEDC,EAAAA,GAAG,CAACC,GAAD,EAAM;AACL,QAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AACzB,aAAO,KAAKJ,MAAL,CAAYG,GAAZ,CAAgBC,GAAhB,CAAP;AACH,KAFD,MAEO,IAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AAChC,aAAO,KAAKJ,MAAL,CAAYG,GAAZ,CAAgBb,IAAI,CAAC,KAAKO,IAAN,CAAJ,CAAgBQ,UAAhB,CAA2BD,GAA3B,CAAhB,CAAP;AACH,KAFM,MAEA;AACH,YAAM,IAAIN,KAAJ,CAAU,6BAAV,CAAN;AACH;AACJ;;AAED,MAAIQ,GAAJ,GAAU;AACN,QAAI,CAAC,KAAKJ,IAAV,EAAgB;AACZ,WAAKA,IAAL,GAAY,EAAZ;AACA,YAAMK,OAAO,GAAGjB,IAAI,CAAC,KAAKO,IAAN,CAAJ,CAAgBW,QAAhC;;AACA,WAAK,IAAIC,GAAT,IAAgB,KAAKT,MAAL,CAAYU,IAAZ,EAAhB,EAAoC;AAChC,YAAIH,OAAO,CAACE,GAAD,CAAX,EAAkB;AACd,eAAKP,IAAL,CAAUK,OAAO,CAACE,GAAD,CAAjB,IAA0B,KAAKT,MAAL,CAAYG,GAAZ,CAAgBM,GAAhB,CAA1B;AACH;AACJ;AACJ;;AACD,WAAO,KAAKP,IAAZ;AACH;;AAhCK;;AAmCVS,MAAM,CAACC,OAAP,GAAiBjB,GAAjB","sourcesContent":["'use strict';\n\nconst tags = {\n    standard: require('./tags/standard'),\n    exif: require('./tags/exif'),\n    gps: require('./tags/gps')\n};\n\nclass IFD {\n    constructor(kind) {\n        if (!kind) {\n            throw new Error('missing kind');\n        }\n        this.data = null;\n        this.fields = new Map();\n        this.kind = kind;\n        this._map = null;\n    }\n\n    get(tag) {\n        if (typeof tag === 'number') {\n            return this.fields.get(tag);\n        } else if (typeof tag === 'string') {\n            return this.fields.get(tags[this.kind].tagsByName[tag]);\n        } else {\n            throw new Error('expected a number or string');\n        }\n    }\n\n    get map() {\n        if (!this._map) {\n            this._map = {};\n            const taglist = tags[this.kind].tagsById;\n            for (var key of this.fields.keys()) {\n                if (taglist[key]) {\n                    this._map[taglist[key]] = this.fields.get(key);\n                }\n            }\n        }\n        return this._map;\n    }\n}\n\nmodule.exports = IFD;\n"]},"metadata":{},"sourceType":"script"}