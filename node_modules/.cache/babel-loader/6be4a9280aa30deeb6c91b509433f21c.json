{"ast":null,"code":"import BaseRegression, { checkArrayLength, maybeToPrecision } from 'ml-regression-base';\nimport { solve } from 'ml-matrix';\n/**\n * @class RobustPolynomialRegression\n * @param {Array<number>} x\n * @param {Array<number>} y\n * @param {number} degree - polynomial degree\n */\n\nexport default class RobustPolynomialRegression extends BaseRegression {\n  constructor(x, y, degree) {\n    super();\n\n    if (x === true) {\n      this.degree = y.degree;\n      this.powers = y.powers;\n      this.coefficients = y.coefficients;\n    } else {\n      checkArrayLength(x, y);\n      robustPolynomial(this, x, y, degree);\n    }\n  }\n\n  toJSON() {\n    return {\n      name: 'robustPolynomialRegression',\n      degree: this.degree,\n      powers: this.powers,\n      coefficients: this.coefficients\n    };\n  }\n\n  _predict(x) {\n    return predict(x, this.powers, this.coefficients);\n  }\n  /**\n   * Display the formula\n   * @param {number} precision - precision for the numbers\n   * @return {string}\n   */\n\n\n  toString(precision) {\n    return this._toFormula(precision, false);\n  }\n  /**\n   * Display the formula in LaTeX format\n   * @param {number} precision - precision for the numbers\n   * @return {string}\n   */\n\n\n  toLaTeX(precision) {\n    return this._toFormula(precision, true);\n  }\n\n  _toFormula(precision, isLaTeX) {\n    let sup = '^';\n    let closeSup = '';\n    let times = ' * ';\n\n    if (isLaTeX) {\n      sup = '^{';\n      closeSup = '}';\n      times = '';\n    }\n\n    let fn = '';\n    let str = '';\n\n    for (let k = 0; k < this.coefficients.length; k++) {\n      str = '';\n\n      if (this.coefficients[k] !== 0) {\n        if (this.powers[k] === 0) {\n          str = maybeToPrecision(this.coefficients[k], precision);\n        } else {\n          if (this.powers[k] === 1) {\n            str = `${maybeToPrecision(this.coefficients[k], precision) + times}x`;\n          } else {\n            str = `${maybeToPrecision(this.coefficients[k], precision) + times}x${sup}${this.powers[k]}${closeSup}`;\n          }\n        }\n\n        if (this.coefficients[k] > 0 && k !== this.coefficients.length - 1) {\n          str = ` + ${str}`;\n        } else if (k !== this.coefficients.length - 1) {\n          str = ` ${str}`;\n        }\n      }\n\n      fn = str + fn;\n    }\n\n    if (fn.charAt(0) === '+') {\n      fn = fn.slice(1);\n    }\n\n    return `f(x) = ${fn}`;\n  }\n\n  static load(json) {\n    if (json.name !== 'robustPolynomialRegression') {\n      throw new TypeError('not a RobustPolynomialRegression model');\n    }\n\n    return new RobustPolynomialRegression(true, json);\n  }\n\n}\n\nfunction robustPolynomial(regression, x, y, degree) {\n  let powers = Array(degree).fill(0).map((_, index) => index);\n  const tuples = getRandomTuples(x, y, degree);\n  var min;\n\n  for (var i = 0; i < tuples.length; i++) {\n    var tuple = tuples[i];\n    var coefficients = calcCoefficients(tuple, powers);\n    var residuals = x.slice();\n\n    for (var j = 0; j < x.length; j++) {\n      residuals[j] = y[j] - predict(x[j], powers, coefficients);\n      residuals[j] = {\n        residual: residuals[j] * residuals[j],\n        coefficients\n      };\n    }\n\n    var median = residualsMedian(residuals);\n\n    if (!min || median.residual < min.residual) {\n      min = median;\n    }\n  }\n\n  regression.degree = degree;\n  regression.powers = powers;\n  regression.coefficients = min.coefficients;\n}\n/**\n * @ignore\n * @param {Array<number>} x\n * @param {Array<number>} y\n * @param {number} degree\n * @return {Array<{x:number,y:number}>}\n */\n\n\nfunction getRandomTuples(x, y, degree) {\n  var len = Math.floor(x.length / degree);\n  var tuples = new Array(len);\n\n  for (var i = 0; i < x.length; i++) {\n    var pos = Math.floor(Math.random() * len);\n    var counter = 0;\n\n    while (counter < x.length) {\n      if (!tuples[pos]) {\n        tuples[pos] = [{\n          x: x[i],\n          y: y[i]\n        }];\n        break;\n      } else if (tuples[pos].length < degree) {\n        tuples[pos].push({\n          x: x[i],\n          y: y[i]\n        });\n        break;\n      } else {\n        counter++;\n        pos = (pos + 1) % len;\n      }\n    }\n\n    if (counter === x.length) {\n      return tuples;\n    }\n  }\n\n  return tuples;\n}\n/**\n * @ignore\n * @param {{x:number,y:number}} tuple\n * @param {Array<number>} powers\n * @return {Array<number>}\n */\n\n\nfunction calcCoefficients(tuple, powers) {\n  var X = tuple.slice();\n  var Y = tuple.slice();\n\n  for (var i = 0; i < X.length; i++) {\n    Y[i] = [tuple[i].y];\n    X[i] = new Array(powers.length);\n\n    for (var j = 0; j < powers.length; j++) {\n      X[i][j] = Math.pow(tuple[i].x, powers[j]);\n    }\n  }\n\n  return solve(X, Y).to1DArray();\n}\n\nfunction predict(x, powers, coefficients) {\n  let y = 0;\n\n  for (let k = 0; k < powers.length; k++) {\n    y += coefficients[k] * Math.pow(x, powers[k]);\n  }\n\n  return y;\n}\n\nfunction residualsMedian(residuals) {\n  residuals.sort((a, b) => a.residual - b.residual);\n  var l = residuals.length;\n  var half = Math.floor(l / 2);\n  return l % 2 === 0 ? residuals[half - 1] : residuals[half];\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/node_modules/ml-regression-robust-polynomial/src/index.js"],"names":["BaseRegression","checkArrayLength","maybeToPrecision","solve","RobustPolynomialRegression","constructor","x","y","degree","powers","coefficients","robustPolynomial","toJSON","name","_predict","predict","toString","precision","_toFormula","toLaTeX","isLaTeX","sup","closeSup","times","fn","str","k","length","charAt","slice","load","json","TypeError","regression","Array","fill","map","_","index","tuples","getRandomTuples","min","i","tuple","calcCoefficients","residuals","j","residual","median","residualsMedian","len","Math","floor","pos","random","counter","push","X","Y","pow","to1DArray","sort","a","b","l","half"],"mappings":"AAAA,OAAOA,cAAP,IACEC,gBADF,EAEEC,gBAFF,QAGO,oBAHP;AAIA,SAASC,KAAT,QAAsB,WAAtB;AAEA;;;;;;;AAMA,eAAe,MAAMC,0BAAN,SAAyCJ,cAAzC,CAAwD;AACrEK,EAAAA,WAAW,CAACC,CAAD,EAAIC,CAAJ,EAAOC,MAAP,EAAe;AACxB;;AACA,QAAIF,CAAC,KAAK,IAAV,EAAgB;AACd,WAAKE,MAAL,GAAcD,CAAC,CAACC,MAAhB;AACA,WAAKC,MAAL,GAAcF,CAAC,CAACE,MAAhB;AACA,WAAKC,YAAL,GAAoBH,CAAC,CAACG,YAAtB;AACD,KAJD,MAIO;AACLT,MAAAA,gBAAgB,CAACK,CAAD,EAAIC,CAAJ,CAAhB;AACAI,MAAAA,gBAAgB,CAAC,IAAD,EAAOL,CAAP,EAAUC,CAAV,EAAaC,MAAb,CAAhB;AACD;AACF;;AAEDI,EAAAA,MAAM,GAAG;AACP,WAAO;AACLC,MAAAA,IAAI,EAAE,4BADD;AAELL,MAAAA,MAAM,EAAE,KAAKA,MAFR;AAGLC,MAAAA,MAAM,EAAE,KAAKA,MAHR;AAILC,MAAAA,YAAY,EAAE,KAAKA;AAJd,KAAP;AAMD;;AAEDI,EAAAA,QAAQ,CAACR,CAAD,EAAI;AACV,WAAOS,OAAO,CAACT,CAAD,EAAI,KAAKG,MAAT,EAAiB,KAAKC,YAAtB,CAAd;AACD;AAED;;;;;;;AAKAM,EAAAA,QAAQ,CAACC,SAAD,EAAY;AAClB,WAAO,KAAKC,UAAL,CAAgBD,SAAhB,EAA2B,KAA3B,CAAP;AACD;AAED;;;;;;;AAKAE,EAAAA,OAAO,CAACF,SAAD,EAAY;AACjB,WAAO,KAAKC,UAAL,CAAgBD,SAAhB,EAA2B,IAA3B,CAAP;AACD;;AAEDC,EAAAA,UAAU,CAACD,SAAD,EAAYG,OAAZ,EAAqB;AAC7B,QAAIC,GAAG,GAAG,GAAV;AACA,QAAIC,QAAQ,GAAG,EAAf;AACA,QAAIC,KAAK,GAAG,KAAZ;;AACA,QAAIH,OAAJ,EAAa;AACXC,MAAAA,GAAG,GAAG,IAAN;AACAC,MAAAA,QAAQ,GAAG,GAAX;AACAC,MAAAA,KAAK,GAAG,EAAR;AACD;;AAED,QAAIC,EAAE,GAAG,EAAT;AACA,QAAIC,GAAG,GAAG,EAAV;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKhB,YAAL,CAAkBiB,MAAtC,EAA8CD,CAAC,EAA/C,EAAmD;AACjDD,MAAAA,GAAG,GAAG,EAAN;;AACA,UAAI,KAAKf,YAAL,CAAkBgB,CAAlB,MAAyB,CAA7B,EAAgC;AAC9B,YAAI,KAAKjB,MAAL,CAAYiB,CAAZ,MAAmB,CAAvB,EAA0B;AACxBD,UAAAA,GAAG,GAAGvB,gBAAgB,CAAC,KAAKQ,YAAL,CAAkBgB,CAAlB,CAAD,EAAuBT,SAAvB,CAAtB;AACD,SAFD,MAEO;AACL,cAAI,KAAKR,MAAL,CAAYiB,CAAZ,MAAmB,CAAvB,EAA0B;AACxBD,YAAAA,GAAG,GAAI,GAAEvB,gBAAgB,CAAC,KAAKQ,YAAL,CAAkBgB,CAAlB,CAAD,EAAuBT,SAAvB,CAAhB,GACPM,KAAM,GADR;AAED,WAHD,MAGO;AACLE,YAAAA,GAAG,GAAI,GAAEvB,gBAAgB,CAAC,KAAKQ,YAAL,CAAkBgB,CAAlB,CAAD,EAAuBT,SAAvB,CAAhB,GACPM,KAAM,IAAGF,GAAI,GAAE,KAAKZ,MAAL,CAAYiB,CAAZ,CAAe,GAAEJ,QAAS,EAD3C;AAED;AACF;;AAED,YAAI,KAAKZ,YAAL,CAAkBgB,CAAlB,IAAuB,CAAvB,IAA4BA,CAAC,KAAK,KAAKhB,YAAL,CAAkBiB,MAAlB,GAA2B,CAAjE,EAAoE;AAClEF,UAAAA,GAAG,GAAI,MAAKA,GAAI,EAAhB;AACD,SAFD,MAEO,IAAIC,CAAC,KAAK,KAAKhB,YAAL,CAAkBiB,MAAlB,GAA2B,CAArC,EAAwC;AAC7CF,UAAAA,GAAG,GAAI,IAAGA,GAAI,EAAd;AACD;AACF;;AACDD,MAAAA,EAAE,GAAGC,GAAG,GAAGD,EAAX;AACD;;AACD,QAAIA,EAAE,CAACI,MAAH,CAAU,CAAV,MAAiB,GAArB,EAA0B;AACxBJ,MAAAA,EAAE,GAAGA,EAAE,CAACK,KAAH,CAAS,CAAT,CAAL;AACD;;AAED,WAAQ,UAASL,EAAG,EAApB;AACD;;AAED,SAAOM,IAAP,CAAYC,IAAZ,EAAkB;AAChB,QAAIA,IAAI,CAAClB,IAAL,KAAc,4BAAlB,EAAgD;AAC9C,YAAM,IAAImB,SAAJ,CAAc,wCAAd,CAAN;AACD;;AACD,WAAO,IAAI5B,0BAAJ,CAA+B,IAA/B,EAAqC2B,IAArC,CAAP;AACD;;AA3FoE;;AA8FvE,SAASpB,gBAAT,CAA0BsB,UAA1B,EAAsC3B,CAAtC,EAAyCC,CAAzC,EAA4CC,MAA5C,EAAoD;AAClD,MAAIC,MAAM,GAAGyB,KAAK,CAAC1B,MAAD,CAAL,CACV2B,IADU,CACL,CADK,EAEVC,GAFU,CAEN,CAACC,CAAD,EAAIC,KAAJ,KAAcA,KAFR,CAAb;AAIA,QAAMC,MAAM,GAAGC,eAAe,CAAClC,CAAD,EAAIC,CAAJ,EAAOC,MAAP,CAA9B;AAEA,MAAIiC,GAAJ;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,MAAM,CAACZ,MAA3B,EAAmCe,CAAC,EAApC,EAAwC;AACtC,QAAIC,KAAK,GAAGJ,MAAM,CAACG,CAAD,CAAlB;AACA,QAAIhC,YAAY,GAAGkC,gBAAgB,CAACD,KAAD,EAAQlC,MAAR,CAAnC;AAEA,QAAIoC,SAAS,GAAGvC,CAAC,CAACuB,KAAF,EAAhB;;AACA,SAAK,IAAIiB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGxC,CAAC,CAACqB,MAAtB,EAA8BmB,CAAC,EAA/B,EAAmC;AACjCD,MAAAA,SAAS,CAACC,CAAD,CAAT,GAAevC,CAAC,CAACuC,CAAD,CAAD,GAAO/B,OAAO,CAACT,CAAC,CAACwC,CAAD,CAAF,EAAOrC,MAAP,EAAeC,YAAf,CAA7B;AACAmC,MAAAA,SAAS,CAACC,CAAD,CAAT,GAAe;AACbC,QAAAA,QAAQ,EAAEF,SAAS,CAACC,CAAD,CAAT,GAAeD,SAAS,CAACC,CAAD,CADrB;AAEbpC,QAAAA;AAFa,OAAf;AAID;;AAED,QAAIsC,MAAM,GAAGC,eAAe,CAACJ,SAAD,CAA5B;;AACA,QAAI,CAACJ,GAAD,IAAQO,MAAM,CAACD,QAAP,GAAkBN,GAAG,CAACM,QAAlC,EAA4C;AAC1CN,MAAAA,GAAG,GAAGO,MAAN;AACD;AACF;;AAEDf,EAAAA,UAAU,CAACzB,MAAX,GAAoBA,MAApB;AACAyB,EAAAA,UAAU,CAACxB,MAAX,GAAoBA,MAApB;AACAwB,EAAAA,UAAU,CAACvB,YAAX,GAA0B+B,GAAG,CAAC/B,YAA9B;AACD;AAED;;;;;;;;;AAOA,SAAS8B,eAAT,CAAyBlC,CAAzB,EAA4BC,CAA5B,EAA+BC,MAA/B,EAAuC;AACrC,MAAI0C,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAW9C,CAAC,CAACqB,MAAF,GAAWnB,MAAtB,CAAV;AACA,MAAI+B,MAAM,GAAG,IAAIL,KAAJ,CAAUgB,GAAV,CAAb;;AAEA,OAAK,IAAIR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGpC,CAAC,CAACqB,MAAtB,EAA8Be,CAAC,EAA/B,EAAmC;AACjC,QAAIW,GAAG,GAAGF,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACG,MAAL,KAAgBJ,GAA3B,CAAV;AAEA,QAAIK,OAAO,GAAG,CAAd;;AACA,WAAOA,OAAO,GAAGjD,CAAC,CAACqB,MAAnB,EAA2B;AACzB,UAAI,CAACY,MAAM,CAACc,GAAD,CAAX,EAAkB;AAChBd,QAAAA,MAAM,CAACc,GAAD,CAAN,GAAc,CACZ;AACE/C,UAAAA,CAAC,EAAEA,CAAC,CAACoC,CAAD,CADN;AAEEnC,UAAAA,CAAC,EAAEA,CAAC,CAACmC,CAAD;AAFN,SADY,CAAd;AAMA;AACD,OARD,MAQO,IAAIH,MAAM,CAACc,GAAD,CAAN,CAAY1B,MAAZ,GAAqBnB,MAAzB,EAAiC;AACtC+B,QAAAA,MAAM,CAACc,GAAD,CAAN,CAAYG,IAAZ,CAAiB;AACflD,UAAAA,CAAC,EAAEA,CAAC,CAACoC,CAAD,CADW;AAEfnC,UAAAA,CAAC,EAAEA,CAAC,CAACmC,CAAD;AAFW,SAAjB;AAIA;AACD,OANM,MAMA;AACLa,QAAAA,OAAO;AACPF,QAAAA,GAAG,GAAG,CAACA,GAAG,GAAG,CAAP,IAAYH,GAAlB;AACD;AACF;;AAED,QAAIK,OAAO,KAAKjD,CAAC,CAACqB,MAAlB,EAA0B;AACxB,aAAOY,MAAP;AACD;AACF;;AACD,SAAOA,MAAP;AACD;AAED;;;;;;;;AAMA,SAASK,gBAAT,CAA0BD,KAA1B,EAAiClC,MAAjC,EAAyC;AACvC,MAAIgD,CAAC,GAAGd,KAAK,CAACd,KAAN,EAAR;AACA,MAAI6B,CAAC,GAAGf,KAAK,CAACd,KAAN,EAAR;;AACA,OAAK,IAAIa,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGe,CAAC,CAAC9B,MAAtB,EAA8Be,CAAC,EAA/B,EAAmC;AACjCgB,IAAAA,CAAC,CAAChB,CAAD,CAAD,GAAO,CAACC,KAAK,CAACD,CAAD,CAAL,CAASnC,CAAV,CAAP;AACAkD,IAAAA,CAAC,CAACf,CAAD,CAAD,GAAO,IAAIR,KAAJ,CAAUzB,MAAM,CAACkB,MAAjB,CAAP;;AACA,SAAK,IAAImB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGrC,MAAM,CAACkB,MAA3B,EAAmCmB,CAAC,EAApC,EAAwC;AACtCW,MAAAA,CAAC,CAACf,CAAD,CAAD,CAAKI,CAAL,IAAUK,IAAI,CAACQ,GAAL,CAAShB,KAAK,CAACD,CAAD,CAAL,CAASpC,CAAlB,EAAqBG,MAAM,CAACqC,CAAD,CAA3B,CAAV;AACD;AACF;;AAED,SAAO3C,KAAK,CAACsD,CAAD,EAAIC,CAAJ,CAAL,CAAYE,SAAZ,EAAP;AACD;;AAED,SAAS7C,OAAT,CAAiBT,CAAjB,EAAoBG,MAApB,EAA4BC,YAA5B,EAA0C;AACxC,MAAIH,CAAC,GAAG,CAAR;;AACA,OAAK,IAAImB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGjB,MAAM,CAACkB,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtCnB,IAAAA,CAAC,IAAIG,YAAY,CAACgB,CAAD,CAAZ,GAAkByB,IAAI,CAACQ,GAAL,CAASrD,CAAT,EAAYG,MAAM,CAACiB,CAAD,CAAlB,CAAvB;AACD;;AACD,SAAOnB,CAAP;AACD;;AAED,SAAS0C,eAAT,CAAyBJ,SAAzB,EAAoC;AAClCA,EAAAA,SAAS,CAACgB,IAAV,CAAe,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACf,QAAF,GAAagB,CAAC,CAAChB,QAAxC;AAEA,MAAIiB,CAAC,GAAGnB,SAAS,CAAClB,MAAlB;AACA,MAAIsC,IAAI,GAAGd,IAAI,CAACC,KAAL,CAAWY,CAAC,GAAG,CAAf,CAAX;AACA,SAAOA,CAAC,GAAG,CAAJ,KAAU,CAAV,GAAcnB,SAAS,CAACoB,IAAI,GAAG,CAAR,CAAvB,GAAoCpB,SAAS,CAACoB,IAAD,CAApD;AACD","sourcesContent":["import BaseRegression, {\n  checkArrayLength,\n  maybeToPrecision\n} from 'ml-regression-base';\nimport { solve } from 'ml-matrix';\n\n/**\n * @class RobustPolynomialRegression\n * @param {Array<number>} x\n * @param {Array<number>} y\n * @param {number} degree - polynomial degree\n */\nexport default class RobustPolynomialRegression extends BaseRegression {\n  constructor(x, y, degree) {\n    super();\n    if (x === true) {\n      this.degree = y.degree;\n      this.powers = y.powers;\n      this.coefficients = y.coefficients;\n    } else {\n      checkArrayLength(x, y);\n      robustPolynomial(this, x, y, degree);\n    }\n  }\n\n  toJSON() {\n    return {\n      name: 'robustPolynomialRegression',\n      degree: this.degree,\n      powers: this.powers,\n      coefficients: this.coefficients\n    };\n  }\n\n  _predict(x) {\n    return predict(x, this.powers, this.coefficients);\n  }\n\n  /**\n   * Display the formula\n   * @param {number} precision - precision for the numbers\n   * @return {string}\n   */\n  toString(precision) {\n    return this._toFormula(precision, false);\n  }\n\n  /**\n   * Display the formula in LaTeX format\n   * @param {number} precision - precision for the numbers\n   * @return {string}\n   */\n  toLaTeX(precision) {\n    return this._toFormula(precision, true);\n  }\n\n  _toFormula(precision, isLaTeX) {\n    let sup = '^';\n    let closeSup = '';\n    let times = ' * ';\n    if (isLaTeX) {\n      sup = '^{';\n      closeSup = '}';\n      times = '';\n    }\n\n    let fn = '';\n    let str = '';\n    for (let k = 0; k < this.coefficients.length; k++) {\n      str = '';\n      if (this.coefficients[k] !== 0) {\n        if (this.powers[k] === 0) {\n          str = maybeToPrecision(this.coefficients[k], precision);\n        } else {\n          if (this.powers[k] === 1) {\n            str = `${maybeToPrecision(this.coefficients[k], precision) +\n              times}x`;\n          } else {\n            str = `${maybeToPrecision(this.coefficients[k], precision) +\n              times}x${sup}${this.powers[k]}${closeSup}`;\n          }\n        }\n\n        if (this.coefficients[k] > 0 && k !== this.coefficients.length - 1) {\n          str = ` + ${str}`;\n        } else if (k !== this.coefficients.length - 1) {\n          str = ` ${str}`;\n        }\n      }\n      fn = str + fn;\n    }\n    if (fn.charAt(0) === '+') {\n      fn = fn.slice(1);\n    }\n\n    return `f(x) = ${fn}`;\n  }\n\n  static load(json) {\n    if (json.name !== 'robustPolynomialRegression') {\n      throw new TypeError('not a RobustPolynomialRegression model');\n    }\n    return new RobustPolynomialRegression(true, json);\n  }\n}\n\nfunction robustPolynomial(regression, x, y, degree) {\n  let powers = Array(degree)\n    .fill(0)\n    .map((_, index) => index);\n\n  const tuples = getRandomTuples(x, y, degree);\n\n  var min;\n  for (var i = 0; i < tuples.length; i++) {\n    var tuple = tuples[i];\n    var coefficients = calcCoefficients(tuple, powers);\n\n    var residuals = x.slice();\n    for (var j = 0; j < x.length; j++) {\n      residuals[j] = y[j] - predict(x[j], powers, coefficients);\n      residuals[j] = {\n        residual: residuals[j] * residuals[j],\n        coefficients\n      };\n    }\n\n    var median = residualsMedian(residuals);\n    if (!min || median.residual < min.residual) {\n      min = median;\n    }\n  }\n\n  regression.degree = degree;\n  regression.powers = powers;\n  regression.coefficients = min.coefficients;\n}\n\n/**\n * @ignore\n * @param {Array<number>} x\n * @param {Array<number>} y\n * @param {number} degree\n * @return {Array<{x:number,y:number}>}\n */\nfunction getRandomTuples(x, y, degree) {\n  var len = Math.floor(x.length / degree);\n  var tuples = new Array(len);\n\n  for (var i = 0; i < x.length; i++) {\n    var pos = Math.floor(Math.random() * len);\n\n    var counter = 0;\n    while (counter < x.length) {\n      if (!tuples[pos]) {\n        tuples[pos] = [\n          {\n            x: x[i],\n            y: y[i]\n          }\n        ];\n        break;\n      } else if (tuples[pos].length < degree) {\n        tuples[pos].push({\n          x: x[i],\n          y: y[i]\n        });\n        break;\n      } else {\n        counter++;\n        pos = (pos + 1) % len;\n      }\n    }\n\n    if (counter === x.length) {\n      return tuples;\n    }\n  }\n  return tuples;\n}\n\n/**\n * @ignore\n * @param {{x:number,y:number}} tuple\n * @param {Array<number>} powers\n * @return {Array<number>}\n */\nfunction calcCoefficients(tuple, powers) {\n  var X = tuple.slice();\n  var Y = tuple.slice();\n  for (var i = 0; i < X.length; i++) {\n    Y[i] = [tuple[i].y];\n    X[i] = new Array(powers.length);\n    for (var j = 0; j < powers.length; j++) {\n      X[i][j] = Math.pow(tuple[i].x, powers[j]);\n    }\n  }\n\n  return solve(X, Y).to1DArray();\n}\n\nfunction predict(x, powers, coefficients) {\n  let y = 0;\n  for (let k = 0; k < powers.length; k++) {\n    y += coefficients[k] * Math.pow(x, powers[k]);\n  }\n  return y;\n}\n\nfunction residualsMedian(residuals) {\n  residuals.sort((a, b) => a.residual - b.residual);\n\n  var l = residuals.length;\n  var half = Math.floor(l / 2);\n  return l % 2 === 0 ? residuals[half - 1] : residuals[half];\n}\n"]},"metadata":{},"sourceType":"module"}