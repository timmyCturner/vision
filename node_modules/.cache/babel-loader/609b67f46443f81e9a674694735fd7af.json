{"ast":null,"code":"import isInteger from 'is-integer';\nexport function validateKernel(kernel) {\n  let kHeight, kWidth;\n\n  if (Array.isArray(kernel)) {\n    if (Array.isArray(kernel[0])) {\n      // 2D array\n      if ((kernel.length & 1) === 0 || (kernel[0].length & 1) === 0) {\n        throw new RangeError('validateKernel: Kernel rows and columns should be odd numbers');\n      } else {\n        kHeight = Math.floor(kernel.length / 2);\n        kWidth = Math.floor(kernel[0].length / 2);\n      }\n    } else {\n      let kernelWidth = Math.sqrt(kernel.length);\n\n      if (isInteger(kernelWidth)) {\n        kWidth = kHeight = Math.floor(Math.sqrt(kernel.length) / 2);\n      } else {\n        throw new RangeError('validateKernel: Kernel array should be a square');\n      } // we convert the array to a matrix\n\n\n      let newKernel = new Array(kernelWidth);\n\n      for (let i = 0; i < kernelWidth; i++) {\n        newKernel[i] = new Array(kernelWidth);\n\n        for (let j = 0; j < kernelWidth; j++) {\n          newKernel[i][j] = kernel[i * kernelWidth + j];\n        }\n      }\n\n      kernel = newKernel;\n    }\n  } else {\n    throw new Error(`validateKernel: Invalid Kernel: ${kernel}`);\n  }\n\n  return {\n    kernel,\n    kWidth,\n    kHeight\n  };\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/node_modules/image-js/src/util/kernel.js"],"names":["isInteger","validateKernel","kernel","kHeight","kWidth","Array","isArray","length","RangeError","Math","floor","kernelWidth","sqrt","newKernel","i","j","Error"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,YAAtB;AAEA,OAAO,SAASC,cAAT,CAAwBC,MAAxB,EAAgC;AACrC,MAAIC,OAAJ,EAAaC,MAAb;;AACA,MAAIC,KAAK,CAACC,OAAN,CAAcJ,MAAd,CAAJ,EAA2B;AACzB,QAAIG,KAAK,CAACC,OAAN,CAAcJ,MAAM,CAAC,CAAD,CAApB,CAAJ,EAA8B;AAC5B;AACA,UAAI,CAACA,MAAM,CAACK,MAAP,GAAgB,CAAjB,MAAwB,CAAxB,IAA6B,CAACL,MAAM,CAAC,CAAD,CAAN,CAAUK,MAAV,GAAmB,CAApB,MAA2B,CAA5D,EAA+D;AAC7D,cAAM,IAAIC,UAAJ,CACJ,+DADI,CAAN;AAGD,OAJD,MAIO;AACLL,QAAAA,OAAO,GAAGM,IAAI,CAACC,KAAL,CAAWR,MAAM,CAACK,MAAP,GAAgB,CAA3B,CAAV;AACAH,QAAAA,MAAM,GAAGK,IAAI,CAACC,KAAL,CAAWR,MAAM,CAAC,CAAD,CAAN,CAAUK,MAAV,GAAmB,CAA9B,CAAT;AACD;AACF,KAVD,MAUO;AACL,UAAII,WAAW,GAAGF,IAAI,CAACG,IAAL,CAAUV,MAAM,CAACK,MAAjB,CAAlB;;AACA,UAAIP,SAAS,CAACW,WAAD,CAAb,EAA4B;AAC1BP,QAAAA,MAAM,GAAGD,OAAO,GAAGM,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACG,IAAL,CAAUV,MAAM,CAACK,MAAjB,IAA2B,CAAtC,CAAnB;AACD,OAFD,MAEO;AACL,cAAM,IAAIC,UAAJ,CAAe,iDAAf,CAAN;AACD,OANI,CAOL;;;AACA,UAAIK,SAAS,GAAG,IAAIR,KAAJ,CAAUM,WAAV,CAAhB;;AACA,WAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,WAApB,EAAiCG,CAAC,EAAlC,EAAsC;AACpCD,QAAAA,SAAS,CAACC,CAAD,CAAT,GAAe,IAAIT,KAAJ,CAAUM,WAAV,CAAf;;AACA,aAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,WAApB,EAAiCI,CAAC,EAAlC,EAAsC;AACpCF,UAAAA,SAAS,CAACC,CAAD,CAAT,CAAaC,CAAb,IAAkBb,MAAM,CAACY,CAAC,GAAGH,WAAJ,GAAkBI,CAAnB,CAAxB;AACD;AACF;;AACDb,MAAAA,MAAM,GAAGW,SAAT;AACD;AACF,GA5BD,MA4BO;AACL,UAAM,IAAIG,KAAJ,CAAW,mCAAkCd,MAAO,EAApD,CAAN;AACD;;AACD,SAAO;AAAEA,IAAAA,MAAF;AAAUE,IAAAA,MAAV;AAAkBD,IAAAA;AAAlB,GAAP;AACD","sourcesContent":["import isInteger from 'is-integer';\n\nexport function validateKernel(kernel) {\n  let kHeight, kWidth;\n  if (Array.isArray(kernel)) {\n    if (Array.isArray(kernel[0])) {\n      // 2D array\n      if ((kernel.length & 1) === 0 || (kernel[0].length & 1) === 0) {\n        throw new RangeError(\n          'validateKernel: Kernel rows and columns should be odd numbers',\n        );\n      } else {\n        kHeight = Math.floor(kernel.length / 2);\n        kWidth = Math.floor(kernel[0].length / 2);\n      }\n    } else {\n      let kernelWidth = Math.sqrt(kernel.length);\n      if (isInteger(kernelWidth)) {\n        kWidth = kHeight = Math.floor(Math.sqrt(kernel.length) / 2);\n      } else {\n        throw new RangeError('validateKernel: Kernel array should be a square');\n      }\n      // we convert the array to a matrix\n      let newKernel = new Array(kernelWidth);\n      for (let i = 0; i < kernelWidth; i++) {\n        newKernel[i] = new Array(kernelWidth);\n        for (let j = 0; j < kernelWidth; j++) {\n          newKernel[i][j] = kernel[i * kernelWidth + j];\n        }\n      }\n      kernel = newKernel;\n    }\n  } else {\n    throw new Error(`validateKernel: Invalid Kernel: ${kernel}`);\n  }\n  return { kernel, kWidth, kHeight };\n}\n"]},"metadata":{},"sourceType":"module"}