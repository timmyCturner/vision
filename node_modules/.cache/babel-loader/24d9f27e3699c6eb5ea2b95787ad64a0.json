{"ast":null,"code":"import { methods, names } from '../transform/mask/thresholdAlgorithms';\n/**\n * Returns a threshold for the creation of a binary mask with the `mask()` method.\n * @memberof Image\n * @instance\n * @param {object} [options]\n * @param {ThresholdAlgorithm} [options.algorithm='otsu']\n * @return {number}\n */\n\nexport default function getThreshold(options = {}) {\n  let {\n    algorithm = names.otsu\n  } = options;\n  this.checkProcessable('getThreshold', {\n    components: 1,\n    bitDepth: [8, 16]\n  });\n  let method = methods[algorithm.toLowerCase()];\n\n  if (method) {\n    let histogram = this.getHistogram();\n    return method(histogram, this.size);\n  } else {\n    throw new Error(`unknown thresholding algorithm: ${algorithm}`);\n  }\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/node_modules/image-js/src/image/utility/getThreshold.js"],"names":["methods","names","getThreshold","options","algorithm","otsu","checkProcessable","components","bitDepth","method","toLowerCase","histogram","getHistogram","size","Error"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,KAAlB,QAA+B,uCAA/B;AAEA;;;;;;;;;AAQA,eAAe,SAASC,YAAT,CAAsBC,OAAO,GAAG,EAAhC,EAAoC;AACjD,MAAI;AAAEC,IAAAA,SAAS,GAAGH,KAAK,CAACI;AAApB,MAA6BF,OAAjC;AAEA,OAAKG,gBAAL,CAAsB,cAAtB,EAAsC;AACpCC,IAAAA,UAAU,EAAE,CADwB;AAEpCC,IAAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,EAAJ;AAF0B,GAAtC;AAKA,MAAIC,MAAM,GAAGT,OAAO,CAACI,SAAS,CAACM,WAAV,EAAD,CAApB;;AACA,MAAID,MAAJ,EAAY;AACV,QAAIE,SAAS,GAAG,KAAKC,YAAL,EAAhB;AACA,WAAOH,MAAM,CAACE,SAAD,EAAY,KAAKE,IAAjB,CAAb;AACD,GAHD,MAGO;AACL,UAAM,IAAIC,KAAJ,CAAW,mCAAkCV,SAAU,EAAvD,CAAN;AACD;AACF","sourcesContent":["import { methods, names } from '../transform/mask/thresholdAlgorithms';\n\n/**\n * Returns a threshold for the creation of a binary mask with the `mask()` method.\n * @memberof Image\n * @instance\n * @param {object} [options]\n * @param {ThresholdAlgorithm} [options.algorithm='otsu']\n * @return {number}\n */\nexport default function getThreshold(options = {}) {\n  let { algorithm = names.otsu } = options;\n\n  this.checkProcessable('getThreshold', {\n    components: 1,\n    bitDepth: [8, 16],\n  });\n\n  let method = methods[algorithm.toLowerCase()];\n  if (method) {\n    let histogram = this.getHistogram();\n    return method(histogram, this.size);\n  } else {\n    throw new Error(`unknown thresholding algorithm: ${algorithm}`);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}