{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kuent\\\\Documents\\\\FinishDipshit\\\\Creative\\\\Ocean-Weather-Visualization\\\\src\\\\App.js\";\nimport React from 'react';\nimport './App.css';\nimport OWVisualization from './OWVisualization'; // import both children\n\nimport axios from 'axios'; // used for API stuff\n// below imports are for static files to avoid 429 errors from requests while testing\n\nimport carbonJSON from './static/carbon.json';\nimport methaneJSON from './static/methane.json';\nimport nitrousJSON from './static/nitrous.json';\nimport temperatureJSON from './static/temperature.json'; //get plastic //repeat for others\n\nimport macroGrowth2050 from './plastic_pollution/macroGrowth2050.json';\nimport microGrowth2050 from './plastic_pollution/microGrowth2050.json';\nimport * as d3 from 'd3'; // import {sliderBottom} from 'd3-simple-slider';\n// end testing-related import block\n\nclass App extends React.Component {\n  // you can create class-scope fields in here like in Java\n  constructor(props) {\n    super();\n    this.createSlider = this.createSlider.bind(this);\n    this.state = {\n      // you can add new states here\n      // initialize below states to null if not using static data for testing\n      carbonData: carbonJSON.co2,\n      methaneData: methaneJSON.methane,\n      nitrousData: nitrousJSON.nitrous,\n      temperatureData: temperatureJSON.result,\n      //get plastic //repeat for others\n      macroGrowth2050: macroGrowth2050.macroGrowth2050,\n      microGrowth2050: microGrowth2050.microGrowth2050,\n      currentDate: new Date(\"2004-11-01\"),\n      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\n      dataIsLoaded: false\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"App\",\n      className: \"App-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(OWVisualization, {\n      currentDate: this.state.currentDate,\n      temperatureData: this.state.temperatureData // need to pass data into children via props\n      ,\n      microGrowth2050: this.state.microGrowth2050,\n      macroGrowth2050: this.state.macroGrowth2050,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }\n    }));\n  }\n\n  componentDidMount() {\n    // this is called when the page is initially loaded/mounted\n    console.log(\"Parent Mounted\"); // this.loadData(); // comment this out if using static files; loadData() will make API requests\n\n    this.createSlider(d3.select(\".App-container\"));\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    // when re-render occurs, componentDidUpdate() is called\n    console.log(\"Parent Updated\");\n  }\n\n  loadData() {\n    const fetchData = async () => {\n      const proxyurl = \"https://cors-anywhere.herokuapp.com/\"; // proxy url that is used in combination with real url\n\n      let promises = []; // make an array of promises\n\n      this.props.urls.split(\",\").forEach(function (url) {\n        promises.push(axios(proxyurl + url)); // push request onto promise array\n      }); // order of promises is retained; reference: https://stackoverflow.com/questions/28066429/promise-all-order-of-resolved-values/28066851\n\n      const data = await Promise.all(promises);\n      this.state.carbonData = data[0].data.co2; // directly modifying the state like this does NOT force re-render\n\n      this.state.methaneData = data[1].data.methane;\n      this.state.nitrousData = data[2].data.nitrous;\n      this.state.temperatureData = data[3].data.result;\n      this.setState({\n        dataIsLoaded: true\n      }); // calling this.setState(...) forces re-render\n    };\n\n    fetchData();\n  }\n\n  createSlider(element) {\n    // parameter is the App-container svg body\n    const self = this; // reference constructor\n\n    let formatDateIntoYear = d3.timeFormat(\"%Y\");\n    let formatDate = d3.timeFormat(\"%d %B %Y\"); // DD MM YY https://github.com/d3/d3-time-format\n\n    let startDate = new Date(\"1950-11-01\"); // subject to change\n\n    let endDate = new Date(\"2020-10-15\"); // subject to change\n\n    let margin = {\n      top: 50,\n      right: 50,\n      bottom: 0,\n      left: 75\n    };\n    let width = window.innerWidth; // - margin.left - margin.right;\n\n    let timer = 0;\n    let currentValue = 0;\n    let targetValue = width - 50;\n    let sliderRange = element // appends svg on top of .App svg\n    .append(\"div\").classed(\"slider-svg\", true) // container class to make iresponsive\n    .attr(\"id\", \"App\");\n    let gRange = sliderRange // gRange is the svg body that will be made responsive\n    .append(\"svg\") // append the responsive svg container\n    .attr(\"preserveAspectRatio\", \"xMinYMin meet\") // responsive svg container needs to preserve aspect ratio for responsiveness\n    .attr(\"viewBox\", `0 0 ${window.innerWidth + margin.left * 2} 200`) // set aspect ratio for slider svg body\n    // it seems that ADDING margin would actually shrink the slider svg body\n    .append(\"g\") // overlay the slider svg body; now gRange reflects the slider body\n    .attr(\"transform\", \"translate(\" + margin.left + \", 100)\"); // shift slider to right and down\n    // .classed(\"class\", \"slider\") // apply slider css properties\n\n    gRange // we want to add a foreign object embodied in a html element\n    .append(\"foreignObject\") // append the foreign object then set coordinates relative to slider svg body\n    .attr(\"x\", 60).attr(\"y\", 60).attr(\"width\", 60) // set width and height of the play button\n    .attr(\"height\", 30).html(function (d) {\n      // this is the html element we want to append\n      return '<button id=\"play-button\">Play</button>';\n    });\n    let playButton = d3.select(\"#play-button\"); // get the play button svg\n\n    playButton.on(\"click\", function () {\n      // set the play button's behavior\n      let button = d3.select(this); // note that 'this' references the play button svg\n\n      if (button.text() === \"Pause\") {\n        // if paused, clear interval and change text to 'play'\n        clearInterval(timer);\n        button.text(\"Play\");\n      } else {\n        // otherwise set behavior for the play button\n        timer = setInterval(function () {\n          // play interval asynchronously\n          update(x.invert(currentValue)); // update handle position and adjust current value tick jumps\n\n          currentValue = currentValue + targetValue / 151;\n\n          if (currentValue > targetValue) {\n            // if at end of range, clear interval and change text to 'play'\n            clearInterval(timer); // this will stop the asynchronous interval\n\n            playButton.text(\"Play\");\n          }\n\n          self.setState({\n            currentDate: x.invert(currentValue)\n          }); // ref parent constructor and communicate with child\n        }, 100); // loops for about 20 seconds going from month to month (or longer)\n\n        button.text(\"Pause\"); // when play button is selected, change text to 'pause'\n      }\n    });\n    let x = d3.scaleTime() // ref: https://observablehq.com/@d3/d3-scaletime\n    .domain([startDate, endDate]) // use timescale domain between start and end dates\n    .range([0, targetValue]) // define range of slider being from beginning to end of its range\n    .clamp(true); // ensure that handle does not escape range\n\n    gRange.append(\"line\").attr(\"class\", \"track\") // apply track css properties within slider svg body\n    .attr(\"x1\", x.range()[0]).attr(\"x2\", x.range()[1]).select(function () {\n      return this.parentNode.appendChild(this.cloneNode(true)); // not sure what this is yet\n    }).attr(\"class\", \"track-inset\") // apply track-inset css properties within slider svg body\n    .select(function () {\n      return this.parentNode.appendChild(this.cloneNode(true));\n    }).attr(\"class\", \"track-overlay\") // apply track-overlay css properties within slider svg body\n    .call(d3.drag() // dragging behavior\n    .on(\"start.interrupt\", function () {\n      // handle interrupts\n      gRange.interrupt();\n    }).on(\"start drag\", function (event) {\n      // while hande is dragged, store current value and update handle location\n      currentValue = event.x;\n      update(x.invert(currentValue));\n    }).on(\"end\", function (event) {\n      // when handle is released, use the last recorded current value\n      self.setState({\n        currentDate: x.invert(currentValue)\n      });\n    }));\n    let handle = gRange.insert(\"circle\", \".track-overlay\") // inserts the track\n    .attr(\"class\", \"handle\") // apply handle css properties to track within slider svg body\n    .attr(\"r\", 9); // set radius of handle\n\n    let label = gRange.append(\"text\") // append text onto slider which will be our tick representations\n    .attr(\"class\", \"label\") // apply label css properties\n    .attr(\"text-anchor\", \"middle\") // anchor text to middle\n    .text(formatDate(startDate)) // display currently selected date in text\n    .attr(\"transform\", \"translate(0,\" + -25 + \")\"); // shift text to left\n\n    document.addEventListener('keydown', function (event) {\n      // listen for keypresses\n      switch (event.key) {\n        // we are only concerned about left/right arrow keys\n        case \"ArrowLeft\":\n          currentValue = // ensure handle does not decrement below zero\n          currentValue === 0 ? currentValue : currentValue - 1;\n          update(x.invert(currentValue)); // shift handle one tick to left\n\n          break;\n\n        case \"ArrowRight\":\n          currentValue++; // increment current value\n\n          update(x.invert(currentValue)); // shift handle one tick to right\n\n          break;\n\n        default:\n          break;\n      }\n    });\n    gRange.insert(\"g\", \".track-overlay\") // create the track overlay\n    .attr(\"class\", \"ticks\") // apply ticks css properties within slider svg body\n    .attr(\"transform\", \"translate(0,\" + 18 + \")\") // shift to right\n    .selectAll(\"text\") // apply following changes to all text on slider (ticks)\n    .data(x.ticks(10)) // ref: https://observablehq.com/@d3/d3-scaletime\n    .enter() // ref: https://observablehq.com/@dnarvaez27/understanding-enter-exit-merge-key-function\n    .append(\"text\") // append text representing ticks then set its coordinates (x-coordinate is variable, y-coordinate is fixed)\n    .attr(\"x\", x).attr(\"y\", 10).attr(\"text-anchor\", \"middle\") // center text on tick\n    .text(d => formatDateIntoYear(d)); // write formatted date as text\n\n    function update(h) {\n      // update position and text of label according to slider scale\n      handle.attr(\"cx\", x(h)); // update handle position\n\n      label // update tick label position and tick label content to new date\n      .attr(\"x\", x(h)).text(formatDate(h));\n    }\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/src/App.js"],"names":["React","OWVisualization","axios","carbonJSON","methaneJSON","nitrousJSON","temperatureJSON","macroGrowth2050","microGrowth2050","d3","App","Component","constructor","props","createSlider","bind","state","carbonData","co2","methaneData","methane","nitrousData","nitrous","temperatureData","result","currentDate","Date","dataIsLoaded","render","componentDidMount","console","log","select","componentDidUpdate","prevProps","prevState","snapshot","loadData","fetchData","proxyurl","promises","urls","split","forEach","url","push","data","Promise","all","setState","element","self","formatDateIntoYear","timeFormat","formatDate","startDate","endDate","margin","top","right","bottom","left","width","window","innerWidth","timer","currentValue","targetValue","sliderRange","append","classed","attr","gRange","html","d","playButton","on","button","text","clearInterval","setInterval","update","x","invert","scaleTime","domain","range","clamp","parentNode","appendChild","cloneNode","call","drag","interrupt","event","handle","insert","label","document","addEventListener","key","selectAll","ticks","enter","h"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport OWVisualization from './OWVisualization' // import both children\r\nimport axios from 'axios'; // used for API stuff\r\n\r\n// below imports are for static files to avoid 429 errors from requests while testing\r\nimport carbonJSON from './static/carbon.json'\r\nimport methaneJSON from './static/methane.json'\r\nimport nitrousJSON from './static/nitrous.json'\r\nimport temperatureJSON from './static/temperature.json'\r\n\r\n//get plastic //repeat for others\r\nimport macroGrowth2050 from './plastic_pollution/macroGrowth2050.json'\r\nimport microGrowth2050 from './plastic_pollution/microGrowth2050.json'\r\n\r\nimport * as d3 from 'd3';\r\n// import {sliderBottom} from 'd3-simple-slider';\r\n// end testing-related import block\r\n\r\nclass App extends React.Component {\r\n    // you can create class-scope fields in here like in Java\r\n    constructor(props) {\r\n        super();\r\n        this.createSlider = this.createSlider.bind(this);\r\n        this.state = { // you can add new states here\r\n            // initialize below states to null if not using static data for testing\r\n            carbonData: carbonJSON.co2,\r\n            methaneData: methaneJSON.methane,\r\n            nitrousData: nitrousJSON.nitrous,\r\n            temperatureData: temperatureJSON.result,\r\n\r\n            //get plastic //repeat for others\r\n            macroGrowth2050: macroGrowth2050.macroGrowth2050,\r\n            microGrowth2050: microGrowth2050.microGrowth2050,\r\n\r\n            currentDate: new Date(\"2004-11-01\"), // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\r\n            dataIsLoaded: false\r\n        };\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div id=\"App\" className=\"App-container\">\r\n                <OWVisualization\r\n                    currentDate={this.state.currentDate}\r\n                    temperatureData={this.state.temperatureData} // need to pass data into children via props\r\n                    microGrowth2050 = {this.state.microGrowth2050}\r\n                    macroGrowth2050={this.state.macroGrowth2050}\r\n                />\r\n                {/* <button id=\"play-button\">Play</button> */}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    componentDidMount() { // this is called when the page is initially loaded/mounted\r\n        console.log(\"Parent Mounted\");\r\n        // this.loadData(); // comment this out if using static files; loadData() will make API requests\r\n        this.createSlider(d3.select(\".App-container\"));\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) { // when re-render occurs, componentDidUpdate() is called\r\n        console.log(\"Parent Updated\");\r\n\r\n    }\r\n\r\n    loadData() {\r\n        const fetchData = async () => {\r\n            const proxyurl = \"https://cors-anywhere.herokuapp.com/\"; // proxy url that is used in combination with real url\r\n\r\n            let promises = []; // make an array of promises\r\n            this.props.urls.split(\",\").forEach(function(url) {\r\n                promises.push(axios(proxyurl + url)); // push request onto promise array\r\n            })\r\n\r\n            // order of promises is retained; reference: https://stackoverflow.com/questions/28066429/promise-all-order-of-resolved-values/28066851\r\n            const data = await Promise.all(promises);\r\n\r\n            this.state.carbonData = data[0].data.co2; // directly modifying the state like this does NOT force re-render\r\n            this.state.methaneData = data[1].data.methane;\r\n            this.state.nitrousData = data[2].data.nitrous;\r\n            this.state.temperatureData = data[3].data.result;\r\n\r\n            this.setState({ dataIsLoaded: true }); // calling this.setState(...) forces re-render\r\n        };\r\n        fetchData();\r\n    }\r\n\r\n    createSlider(element) { // parameter is the App-container svg body\r\n        const self = this; // reference constructor\r\n\r\n        let formatDateIntoYear = d3.timeFormat(\"%Y\");\r\n        let formatDate = d3.timeFormat(\"%d %B %Y\"); // DD MM YY https://github.com/d3/d3-time-format\r\n\r\n        let startDate = new Date(\"1950-11-01\"); // subject to change\r\n        let endDate = new Date(\"2020-10-15\"); // subject to change\r\n\r\n        let margin = {top:50, right:50, bottom:0, left:75};\r\n        let width = window.innerWidth; // - margin.left - margin.right;\r\n\r\n        let timer = 0;\r\n        let currentValue = 0;\r\n        let targetValue = width - 50;\r\n\r\n        let sliderRange = element // appends svg on top of .App svg\r\n            .append(\"div\")\r\n            .classed(\"slider-svg\", true) // container class to make iresponsive\r\n            .attr(\"id\", \"App\");\r\n\r\n        let gRange = sliderRange // gRange is the svg body that will be made responsive\r\n            .append(\"svg\") // append the responsive svg container\r\n            .attr(\"preserveAspectRatio\", \"xMinYMin meet\") // responsive svg container needs to preserve aspect ratio for responsiveness\r\n            .attr(\"viewBox\", `0 0 ${window.innerWidth + margin.left * 2} 200`) // set aspect ratio for slider svg body\r\n            // it seems that ADDING margin would actually shrink the slider svg body\r\n            .append(\"g\") // overlay the slider svg body; now gRange reflects the slider body\r\n            .attr(\"transform\", \"translate(\" + margin.left + \", 100)\") // shift slider to right and down\r\n            // .classed(\"class\", \"slider\") // apply slider css properties\r\n\r\n        gRange // we want to add a foreign object embodied in a html element\r\n            .append(\"foreignObject\") // append the foreign object then set coordinates relative to slider svg body\r\n            .attr(\"x\", 60)\r\n            .attr(\"y\", 60)\r\n            .attr(\"width\", 60) // set width and height of the play button\r\n            .attr(\"height\", 30)\r\n            .html(function(d) { // this is the html element we want to append\r\n                return '<button id=\"play-button\">Play</button>'\r\n            })\r\n\r\n        let playButton = d3.select(\"#play-button\"); // get the play button svg\r\n\r\n        playButton\r\n            .on(\"click\", function() { // set the play button's behavior\r\n                let button = d3.select(this); // note that 'this' references the play button svg\r\n                if (button.text() === \"Pause\") { // if paused, clear interval and change text to 'play'\r\n                    clearInterval(timer);\r\n                    button.text(\"Play\");\r\n                } else { // otherwise set behavior for the play button\r\n                    timer = setInterval(function() { // play interval asynchronously\r\n                        update(x.invert(currentValue)); // update handle position and adjust current value tick jumps\r\n                        currentValue = currentValue + (targetValue / 151);\r\n                        if (currentValue > targetValue) { // if at end of range, clear interval and change text to 'play'\r\n                            clearInterval(timer); // this will stop the asynchronous interval\r\n                            playButton.text(\"Play\");\r\n                        }\r\n                        self.setState({ currentDate: x.invert(currentValue) }); // ref parent constructor and communicate with child\r\n                    }, 100); // loops for about 20 seconds going from month to month (or longer)\r\n                    button.text(\"Pause\"); // when play button is selected, change text to 'pause'\r\n                }\r\n            });\r\n\r\n        let x = d3.scaleTime() // ref: https://observablehq.com/@d3/d3-scaletime\r\n            .domain([startDate, endDate]) // use timescale domain between start and end dates\r\n            .range([0, targetValue]) // define range of slider being from beginning to end of its range\r\n            .clamp(true); // ensure that handle does not escape range\r\n\r\n        gRange.append(\"line\")\r\n            .attr(\"class\", \"track\") // apply track css properties within slider svg body\r\n            .attr(\"x1\", x.range()[0])\r\n            .attr(\"x2\", x.range()[1])\r\n            .select(function() {\r\n                return this.parentNode.appendChild(this.cloneNode(true)); // not sure what this is yet\r\n            })\r\n            .attr(\"class\", \"track-inset\") // apply track-inset css properties within slider svg body\r\n            .select(function() {\r\n                return this.parentNode.appendChild(this.cloneNode(true));\r\n            })\r\n            .attr(\"class\", \"track-overlay\") // apply track-overlay css properties within slider svg body\r\n            .call(d3.drag() // dragging behavior\r\n                .on(\"start.interrupt\", function() { // handle interrupts\r\n                    gRange.interrupt();\r\n                })\r\n                .on(\"start drag\", function(event) { // while hande is dragged, store current value and update handle location\r\n                    currentValue = event.x;\r\n                    update(x.invert(currentValue));\r\n                })\r\n                .on(\"end\", function(event) { // when handle is released, use the last recorded current value\r\n                    self.setState({ currentDate: x.invert(currentValue) });\r\n                })\r\n            );\r\n\r\n        let handle = gRange.insert(\"circle\", \".track-overlay\") // inserts the track\r\n            .attr(\"class\", \"handle\") // apply handle css properties to track within slider svg body\r\n            .attr(\"r\", 9); // set radius of handle\r\n\r\n        let label = gRange.append(\"text\") // append text onto slider which will be our tick representations\r\n            .attr(\"class\", \"label\") // apply label css properties\r\n            .attr(\"text-anchor\", \"middle\") // anchor text to middle\r\n            .text(formatDate(startDate)) // display currently selected date in text\r\n            .attr(\"transform\", \"translate(0,\" + (-25) + \")\") // shift text to left\r\n\r\n        document.addEventListener('keydown', function(event) { // listen for keypresses\r\n            switch (event.key) { // we are only concerned about left/right arrow keys\r\n                case \"ArrowLeft\":\r\n                    currentValue = // ensure handle does not decrement below zero\r\n                        (currentValue === 0) ? currentValue : currentValue - 1;\r\n                    update(x.invert(currentValue)); // shift handle one tick to left\r\n                    break;\r\n                case \"ArrowRight\":\r\n                    currentValue++; // increment current value\r\n                    update(x.invert(currentValue)); // shift handle one tick to right\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        });\r\n\r\n        gRange.insert(\"g\", \".track-overlay\") // create the track overlay\r\n            .attr(\"class\", \"ticks\") // apply ticks css properties within slider svg body\r\n            .attr(\"transform\", \"translate(0,\" + 18 + \")\") // shift to right\r\n            .selectAll(\"text\") // apply following changes to all text on slider (ticks)\r\n            .data(x.ticks(10)) // ref: https://observablehq.com/@d3/d3-scaletime\r\n            .enter() // ref: https://observablehq.com/@dnarvaez27/understanding-enter-exit-merge-key-function\r\n            .append(\"text\") // append text representing ticks then set its coordinates (x-coordinate is variable, y-coordinate is fixed)\r\n            .attr(\"x\", x)\r\n            .attr(\"y\", 10)\r\n            .attr(\"text-anchor\", \"middle\") // center text on tick\r\n            .text((d) => formatDateIntoYear(d)); // write formatted date as text\r\n\r\n        function update(h) { // update position and text of label according to slider scale\r\n            handle.attr(\"cx\", x(h)); // update handle position\r\n            label // update tick label position and tick label content to new date\r\n                .attr(\"x\", x(h))\r\n                .text(formatDate(h));\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}