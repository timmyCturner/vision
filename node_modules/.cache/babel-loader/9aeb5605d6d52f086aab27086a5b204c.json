{"ast":null,"code":"/*\n *\n * see https://github.com/fiji/Auto_Threshold/blob/master/src/main/java/fiji/threshold/Auto_Threshold.java\n * Intermodes: This assumes a bimodal histogram. Implements the thresholding Prewitt, JMS & Mendelsohn, ML (1966),\n * \"The analysis of cell images\", Annals of the NewYork Academy of Sciences 128: 1035-1053\n *\n */\nexport default function intermodes(histogram) {\n  let iHisto = histogram.slice();\n  let iter = 0;\n\n  while (!bimodalTest(iHisto)) {\n    // smooth with a 3 point running mean filter\n    let previous = 0;\n    let current = 0;\n    let next = iHisto[0];\n\n    for (let i = 0; i < histogram.length - 1; i++) {\n      previous = current;\n      current = next;\n      next = iHisto[i + 1];\n      iHisto[i] = (previous + current + next) / 3;\n    }\n\n    iHisto[histogram.length - 1] = (current + next) / 3;\n    iter++;\n\n    if (iter > 10000) {\n      throw new Error('Intermodes Threshold not found after 10000 iterations');\n    }\n  } // The threshold is the mean between the two peaks.\n\n\n  let tt = 0;\n\n  for (let i = 1; i < histogram.length - 1; i++) {\n    if (iHisto[i - 1] < iHisto[i] && iHisto[i + 1] < iHisto[i]) {\n      tt += i;\n    }\n  }\n\n  return Math.floor(tt / 2.0);\n}\n\nfunction bimodalTest(iHisto) {\n  let b = false;\n  let modes = 0;\n\n  for (let k = 1; k < iHisto.length - 1; k++) {\n    if (iHisto[k - 1] < iHisto[k] && iHisto[k + 1] < iHisto[k]) {\n      modes++;\n\n      if (modes > 2) {\n        return false;\n      }\n    }\n  }\n\n  if (modes === 2) {\n    b = true;\n  }\n\n  return b;\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/node_modules/image-js/src/image/transform/mask/intermodes.js"],"names":["intermodes","histogram","iHisto","slice","iter","bimodalTest","previous","current","next","i","length","Error","tt","Math","floor","b","modes","k"],"mappings":"AAAA;;;;;;;AAQA,eAAe,SAASA,UAAT,CAAoBC,SAApB,EAA+B;AAC5C,MAAIC,MAAM,GAAGD,SAAS,CAACE,KAAV,EAAb;AACA,MAAIC,IAAI,GAAG,CAAX;;AACA,SAAO,CAACC,WAAW,CAACH,MAAD,CAAnB,EAA6B;AAC3B;AACA,QAAII,QAAQ,GAAG,CAAf;AACA,QAAIC,OAAO,GAAG,CAAd;AACA,QAAIC,IAAI,GAAGN,MAAM,CAAC,CAAD,CAAjB;;AACA,SAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,SAAS,CAACS,MAAV,GAAmB,CAAvC,EAA0CD,CAAC,EAA3C,EAA+C;AAC7CH,MAAAA,QAAQ,GAAGC,OAAX;AACAA,MAAAA,OAAO,GAAGC,IAAV;AACAA,MAAAA,IAAI,GAAGN,MAAM,CAACO,CAAC,GAAG,CAAL,CAAb;AACAP,MAAAA,MAAM,CAACO,CAAD,CAAN,GAAY,CAACH,QAAQ,GAAGC,OAAX,GAAqBC,IAAtB,IAA8B,CAA1C;AACD;;AACDN,IAAAA,MAAM,CAACD,SAAS,CAACS,MAAV,GAAmB,CAApB,CAAN,GAA+B,CAACH,OAAO,GAAGC,IAAX,IAAmB,CAAlD;AACAJ,IAAAA,IAAI;;AACJ,QAAIA,IAAI,GAAG,KAAX,EAAkB;AAChB,YAAM,IAAIO,KAAJ,CAAU,uDAAV,CAAN;AACD;AACF,GAnB2C,CAqB5C;;;AACA,MAAIC,EAAE,GAAG,CAAT;;AACA,OAAK,IAAIH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,SAAS,CAACS,MAAV,GAAmB,CAAvC,EAA0CD,CAAC,EAA3C,EAA+C;AAC7C,QAAIP,MAAM,CAACO,CAAC,GAAG,CAAL,CAAN,GAAgBP,MAAM,CAACO,CAAD,CAAtB,IAA6BP,MAAM,CAACO,CAAC,GAAG,CAAL,CAAN,GAAgBP,MAAM,CAACO,CAAD,CAAvD,EAA4D;AAC1DG,MAAAA,EAAE,IAAIH,CAAN;AACD;AACF;;AACD,SAAOI,IAAI,CAACC,KAAL,CAAWF,EAAE,GAAG,GAAhB,CAAP;AACD;;AAED,SAASP,WAAT,CAAqBH,MAArB,EAA6B;AAC3B,MAAIa,CAAC,GAAG,KAAR;AACA,MAAIC,KAAK,GAAG,CAAZ;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGf,MAAM,CAACQ,MAAP,GAAgB,CAApC,EAAuCO,CAAC,EAAxC,EAA4C;AAC1C,QAAIf,MAAM,CAACe,CAAC,GAAG,CAAL,CAAN,GAAgBf,MAAM,CAACe,CAAD,CAAtB,IAA6Bf,MAAM,CAACe,CAAC,GAAG,CAAL,CAAN,GAAgBf,MAAM,CAACe,CAAD,CAAvD,EAA4D;AAC1DD,MAAAA,KAAK;;AACL,UAAIA,KAAK,GAAG,CAAZ,EAAe;AACb,eAAO,KAAP;AACD;AACF;AACF;;AACD,MAAIA,KAAK,KAAK,CAAd,EAAiB;AACfD,IAAAA,CAAC,GAAG,IAAJ;AACD;;AACD,SAAOA,CAAP;AACD","sourcesContent":["/*\n *\n * see https://github.com/fiji/Auto_Threshold/blob/master/src/main/java/fiji/threshold/Auto_Threshold.java\n * Intermodes: This assumes a bimodal histogram. Implements the thresholding Prewitt, JMS & Mendelsohn, ML (1966),\n * \"The analysis of cell images\", Annals of the NewYork Academy of Sciences 128: 1035-1053\n *\n */\n\nexport default function intermodes(histogram) {\n  let iHisto = histogram.slice();\n  let iter = 0;\n  while (!bimodalTest(iHisto)) {\n    // smooth with a 3 point running mean filter\n    let previous = 0;\n    let current = 0;\n    let next = iHisto[0];\n    for (let i = 0; i < histogram.length - 1; i++) {\n      previous = current;\n      current = next;\n      next = iHisto[i + 1];\n      iHisto[i] = (previous + current + next) / 3;\n    }\n    iHisto[histogram.length - 1] = (current + next) / 3;\n    iter++;\n    if (iter > 10000) {\n      throw new Error('Intermodes Threshold not found after 10000 iterations');\n    }\n  }\n\n  // The threshold is the mean between the two peaks.\n  let tt = 0;\n  for (let i = 1; i < histogram.length - 1; i++) {\n    if (iHisto[i - 1] < iHisto[i] && iHisto[i + 1] < iHisto[i]) {\n      tt += i;\n    }\n  }\n  return Math.floor(tt / 2.0);\n}\n\nfunction bimodalTest(iHisto) {\n  let b = false;\n  let modes = 0;\n\n  for (let k = 1; k < iHisto.length - 1; k++) {\n    if (iHisto[k - 1] < iHisto[k] && iHisto[k + 1] < iHisto[k]) {\n      modes++;\n      if (modes > 2) {\n        return false;\n      }\n    }\n  }\n  if (modes === 2) {\n    b = true;\n  }\n  return b;\n}\n"]},"metadata":{},"sourceType":"module"}