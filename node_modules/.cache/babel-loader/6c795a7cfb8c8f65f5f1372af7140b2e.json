{"ast":null,"code":"import BaseRegression, { maybeToPrecision } from 'ml-regression-base';\nimport PolynomialRegression from 'ml-regression-polynomial';\n/*\n * Function that calculate the potential fit in the form f(x) = A*x^M\n * with a given M and return de A coefficient.\n *\n * @param {Vector} X - Vector of the x positions of the points.\n * @param {Vector} Y - Vector of the x positions of the points.\n * @param {Number} M - The exponent of the potential fit.\n * @return {Number} A - The A coefficient of the potential fit.\n */\n\nexport default class PotentialRegression extends BaseRegression {\n  /**\n   * @constructor\n   * @param x: Independent variable\n   * @param y: Dependent variable\n   * @param M\n   */\n  constructor(x, y, M) {\n    super();\n\n    if (x === true) {\n      // reloading model\n      this.A = y.A;\n      this.M = y.M;\n    } else {\n      var n = x.length;\n\n      if (n !== y.length) {\n        throw new RangeError('input and output array have a different length');\n      }\n\n      var linear = new PolynomialRegression(x, y, [M]);\n      this.A = linear.coefficients[0];\n      this.M = M;\n    }\n  }\n\n  _predict(x) {\n    return this.A * Math.pow(x, this.M);\n  }\n\n  toJSON() {\n    return {\n      name: 'potentialRegression',\n      A: this.A,\n      M: this.M\n    };\n  }\n\n  toString(precision) {\n    return `f(x) = ${maybeToPrecision(this.A, precision)} * x^${this.M}`;\n  }\n\n  toLaTeX(precision) {\n    if (this.M >= 0) {\n      return `f(x) = ${maybeToPrecision(this.A, precision)}x^{${this.M}}`;\n    } else {\n      return `f(x) = \\\\frac{${maybeToPrecision(this.A, precision)}}{x^{${-this.M}}}`;\n    }\n  }\n\n  static load(json) {\n    if (json.name !== 'potentialRegression') {\n      throw new TypeError('not a potential regression model');\n    }\n\n    return new PotentialRegression(true, json);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/node_modules/ml-regression/src/regression/potential-regression.js"],"names":["BaseRegression","maybeToPrecision","PolynomialRegression","PotentialRegression","constructor","x","y","M","A","n","length","RangeError","linear","coefficients","_predict","Math","pow","toJSON","name","toString","precision","toLaTeX","load","json","TypeError"],"mappings":"AAAA,OAAOA,cAAP,IAAyBC,gBAAzB,QAAiD,oBAAjD;AACA,OAAOC,oBAAP,MAAiC,0BAAjC;AAGA;;;;;;;;;;AASA,eAAe,MAAMC,mBAAN,SAAkCH,cAAlC,CAAiD;AAC9D;;;;;;AAMAI,EAAAA,WAAW,CAACC,CAAD,EAAIC,CAAJ,EAAOC,CAAP,EAAU;AACnB;;AACA,QAAIF,CAAC,KAAK,IAAV,EAAgB;AACd;AACA,WAAKG,CAAL,GAASF,CAAC,CAACE,CAAX;AACA,WAAKD,CAAL,GAASD,CAAC,CAACC,CAAX;AACD,KAJD,MAIO;AACL,UAAIE,CAAC,GAAGJ,CAAC,CAACK,MAAV;;AACA,UAAID,CAAC,KAAKH,CAAC,CAACI,MAAZ,EAAoB;AAClB,cAAM,IAAIC,UAAJ,CAAe,gDAAf,CAAN;AACD;;AAED,UAAIC,MAAM,GAAG,IAAIV,oBAAJ,CAAyBG,CAAzB,EAA4BC,CAA5B,EAA+B,CAACC,CAAD,CAA/B,CAAb;AACA,WAAKC,CAAL,GAASI,MAAM,CAACC,YAAP,CAAoB,CAApB,CAAT;AACA,WAAKN,CAAL,GAASA,CAAT;AACD;AACF;;AAEDO,EAAAA,QAAQ,CAACT,CAAD,EAAI;AACV,WAAO,KAAKG,CAAL,GAASO,IAAI,CAACC,GAAL,CAASX,CAAT,EAAY,KAAKE,CAAjB,CAAhB;AACD;;AAEDU,EAAAA,MAAM,GAAG;AACP,WAAO;AACLC,MAAAA,IAAI,EAAE,qBADD;AAELV,MAAAA,CAAC,EAAE,KAAKA,CAFH;AAGLD,MAAAA,CAAC,EAAE,KAAKA;AAHH,KAAP;AAKD;;AAEDY,EAAAA,QAAQ,CAACC,SAAD,EAAY;AAClB,WAAQ,UAASnB,gBAAgB,CAAC,KAAKO,CAAN,EAASY,SAAT,CAAoB,QAAO,KAAKb,CAAE,EAAnE;AACD;;AAEDc,EAAAA,OAAO,CAACD,SAAD,EAAY;AACjB,QAAI,KAAKb,CAAL,IAAU,CAAd,EAAiB;AACf,aACG,UAASN,gBAAgB,CAAC,KAAKO,CAAN,EAASY,SAAT,CAAoB,MAAK,KAAKb,CAAE,GAD5D;AAGD,KAJD,MAIO;AACL,aACG,iBACCN,gBAAgB,CAAC,KAAKO,CAAN,EAASY,SAAT,CACjB,QACC,CAAC,KAAKb,CACP,IALH;AAOD;AACF;;AAED,SAAOe,IAAP,CAAYC,IAAZ,EAAkB;AAChB,QAAIA,IAAI,CAACL,IAAL,KAAc,qBAAlB,EAAyC;AACvC,YAAM,IAAIM,SAAJ,CAAc,kCAAd,CAAN;AACD;;AACD,WAAO,IAAIrB,mBAAJ,CAAwB,IAAxB,EAA8BoB,IAA9B,CAAP;AACD;;AA9D6D","sourcesContent":["import BaseRegression, { maybeToPrecision } from 'ml-regression-base';\nimport PolynomialRegression from 'ml-regression-polynomial';\n\n\n/*\n * Function that calculate the potential fit in the form f(x) = A*x^M\n * with a given M and return de A coefficient.\n *\n * @param {Vector} X - Vector of the x positions of the points.\n * @param {Vector} Y - Vector of the x positions of the points.\n * @param {Number} M - The exponent of the potential fit.\n * @return {Number} A - The A coefficient of the potential fit.\n */\nexport default class PotentialRegression extends BaseRegression {\n  /**\n   * @constructor\n   * @param x: Independent variable\n   * @param y: Dependent variable\n   * @param M\n   */\n  constructor(x, y, M) {\n    super();\n    if (x === true) {\n      // reloading model\n      this.A = y.A;\n      this.M = y.M;\n    } else {\n      var n = x.length;\n      if (n !== y.length) {\n        throw new RangeError('input and output array have a different length');\n      }\n\n      var linear = new PolynomialRegression(x, y, [M]);\n      this.A = linear.coefficients[0];\n      this.M = M;\n    }\n  }\n\n  _predict(x) {\n    return this.A * Math.pow(x, this.M);\n  }\n\n  toJSON() {\n    return {\n      name: 'potentialRegression',\n      A: this.A,\n      M: this.M\n    };\n  }\n\n  toString(precision) {\n    return `f(x) = ${maybeToPrecision(this.A, precision)} * x^${this.M}`;\n  }\n\n  toLaTeX(precision) {\n    if (this.M >= 0) {\n      return (\n        `f(x) = ${maybeToPrecision(this.A, precision)}x^{${this.M}}`\n      );\n    } else {\n      return (\n        `f(x) = \\\\frac{${\n          maybeToPrecision(this.A, precision)\n        }}{x^{${\n          -this.M\n        }}}`\n      );\n    }\n  }\n\n  static load(json) {\n    if (json.name !== 'potentialRegression') {\n      throw new TypeError('not a potential regression model');\n    }\n    return new PotentialRegression(true, json);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}