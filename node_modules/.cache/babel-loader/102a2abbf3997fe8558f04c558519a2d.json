{"ast":null,"code":"// Section 14: Differencing Predictor (p. 64)\nexport function applyHorizontalDifferencing8Bit(data, width, components) {\n  let i = 0;\n\n  while (i < data.length) {\n    for (let j = components; j < width * components; j += components) {\n      for (let k = 0; k < components; k++) {\n        data[i + j + k] = data[i + j + k] + data[i + j - (components - k)] & 255;\n      }\n    }\n\n    i += width * components;\n  }\n}\nexport function applyHorizontalDifferencing16Bit(data, width, components) {\n  let i = 0;\n\n  while (i < data.length) {\n    for (let j = components; j < width * components; j += components) {\n      for (let k = 0; k < components; k++) {\n        data[i + j + k] = data[i + j + k] + data[i + j - (components - k)] & 65535;\n      }\n    }\n\n    i += width * components;\n  }\n}","map":{"version":3,"sources":["../src/horizontalDifferencing.ts"],"names":[],"mappings":"AAAA;AAEA,OAAM,SAAU,+BAAV,CACJ,IADI,EAEJ,KAFI,EAGJ,UAHI,EAGc;AAElB,MAAI,CAAC,GAAG,CAAR;;AACA,SAAO,CAAC,GAAG,IAAI,CAAC,MAAhB,EAAwB;AACtB,SAAK,IAAI,CAAC,GAAG,UAAb,EAAyB,CAAC,GAAG,KAAK,GAAG,UAArC,EAAiD,CAAC,IAAI,UAAtD,EAAkE;AAChE,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,UAApB,EAAgC,CAAC,EAAjC,EAAqC;AACnC,QAAA,IAAI,CAAC,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAJ,GACG,IAAI,CAAC,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAJ,GAAkB,IAAI,CAAC,CAAC,GAAG,CAAJ,IAAS,UAAU,GAAG,CAAtB,CAAD,CAAvB,GAAqD,GADvD;AAED;AACF;;AACD,IAAA,CAAC,IAAI,KAAK,GAAG,UAAb;AACD;AACF;AAED,OAAM,SAAU,gCAAV,CACJ,IADI,EAEJ,KAFI,EAGJ,UAHI,EAGc;AAElB,MAAI,CAAC,GAAG,CAAR;;AACA,SAAO,CAAC,GAAG,IAAI,CAAC,MAAhB,EAAwB;AACtB,SAAK,IAAI,CAAC,GAAG,UAAb,EAAyB,CAAC,GAAG,KAAK,GAAG,UAArC,EAAiD,CAAC,IAAI,UAAtD,EAAkE;AAChE,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,UAApB,EAAgC,CAAC,EAAjC,EAAqC;AACnC,QAAA,IAAI,CAAC,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAJ,GACG,IAAI,CAAC,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAJ,GAAkB,IAAI,CAAC,CAAC,GAAG,CAAJ,IAAS,UAAU,GAAG,CAAtB,CAAD,CAAvB,GAAqD,KADvD;AAED;AACF;;AACD,IAAA,CAAC,IAAI,KAAK,GAAG,UAAb;AACD;AACF","sourceRoot":"","sourcesContent":["// Section 14: Differencing Predictor (p. 64)\r\nexport function applyHorizontalDifferencing8Bit(data, width, components) {\r\n    let i = 0;\r\n    while (i < data.length) {\r\n        for (let j = components; j < width * components; j += components) {\r\n            for (let k = 0; k < components; k++) {\r\n                data[i + j + k] =\r\n                    (data[i + j + k] + data[i + j - (components - k)]) & 255;\r\n            }\r\n        }\r\n        i += width * components;\r\n    }\r\n}\r\nexport function applyHorizontalDifferencing16Bit(data, width, components) {\r\n    let i = 0;\r\n    while (i < data.length) {\r\n        for (let j = components; j < width * components; j += components) {\r\n            for (let k = 0; k < components; k++) {\r\n                data[i + j + k] =\r\n                    (data[i + j + k] + data[i + j - (components - k)]) & 65535;\r\n            }\r\n        }\r\n        i += width * components;\r\n    }\r\n}\r\n//# sourceMappingURL=horizontalDifferencing.js.map"]},"metadata":{},"sourceType":"module"}