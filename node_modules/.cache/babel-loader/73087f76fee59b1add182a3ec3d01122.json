{"ast":null,"code":"const noiseSpeed = 0.01;\nconst noiseHeight = 30; // controls how high up waves go\n\nconst num_clouds = 3;\nconst cloud_ellipses = [{\n  x: 0,\n  y: 20,\n  rx: 70,\n  ry: 40\n}, {\n  x: 25,\n  y: -3,\n  rx: 50,\n  ry: 28\n}, {\n  x: 70,\n  y: 3,\n  rx: 50,\n  ry: 28\n}, {\n  x: 100,\n  y: 5,\n  rx: 24,\n  ry: 24\n}, {\n  x: 115,\n  y: -2,\n  rx: 24,\n  ry: 24\n}, {\n  x: 130,\n  y: -2,\n  rx: 24,\n  ry: 24\n}, {\n  x: 145,\n  y: 0,\n  rx: 24,\n  ry: 24\n}, {\n  x: 160,\n  y: 5,\n  rx: 24,\n  ry: 24\n}, {\n  x: 173,\n  y: 5,\n  rx: 24,\n  ry: 24\n}, {\n  x: 185,\n  y: 5,\n  rx: 24,\n  ry: 24\n}, {\n  x: 198,\n  y: -3,\n  rx: 24,\n  ry: 24\n}, {\n  x: 215,\n  y: 3,\n  rx: 28,\n  ry: 24\n}, {\n  x: 230,\n  y: 4,\n  rx: 30,\n  ry: 24\n}, {\n  x: 245,\n  y: 6,\n  rx: 30,\n  ry: 24\n}, {\n  x: 260,\n  y: 6,\n  rx: 30,\n  ry: 24\n}, {\n  x: 270,\n  y: 3,\n  rx: 26,\n  ry: 24\n}, {\n  x: 285,\n  y: 10,\n  rx: 30,\n  ry: 24\n}, {\n  x: 310,\n  y: 4,\n  rx: 30,\n  ry: 24\n}, {\n  x: 325,\n  y: 4,\n  rx: 16,\n  ry: 16\n}, {\n  x: 339,\n  y: 2,\n  rx: 24,\n  ry: 24\n}, {\n  x: 365,\n  y: 5,\n  rx: 44,\n  ry: 28\n}, {\n  x: 400,\n  y: 0,\n  rx: 40,\n  ry: 24\n}, {\n  x: 435,\n  y: -5,\n  rx: 50,\n  ry: 30\n}, {\n  x: 465,\n  y: 5,\n  rx: 24,\n  ry: 24\n}, {\n  x: 490,\n  y: -3,\n  rx: 38,\n  ry: 30\n}, {\n  x: 524,\n  y: -3,\n  rx: 40,\n  ry: 24\n}, {\n  x: 550,\n  y: -10,\n  rx: 60,\n  ry: 50\n}, {\n  x: 595,\n  y: 3,\n  rx: 58,\n  ry: 40\n}, {\n  x: 627,\n  y: 12,\n  rx: 24,\n  ry: 24\n}, {\n  x: 643,\n  y: 20,\n  rx: 40,\n  ry: 24\n}, {\n  x: 665,\n  y: 19,\n  rx: 30,\n  ry: 24\n}, {\n  x: 695,\n  y: 20,\n  rx: 50,\n  ry: 24\n}, {\n  x: 715,\n  y: 25,\n  rx: 45,\n  ry: 30\n}, {\n  x: 740,\n  y: 25,\n  rx: 45,\n  ry: 30\n}, {\n  x: 754,\n  y: 17,\n  rx: 27,\n  ry: 24\n}, {\n  x: 766,\n  y: 17,\n  rx: 20,\n  ry: 20\n}, {\n  x: 780,\n  y: 17,\n  rx: 25,\n  ry: 20\n}, {\n  x: 800,\n  y: 10,\n  rx: 30,\n  ry: 20\n}, {\n  x: 820,\n  y: 10,\n  rx: 40,\n  ry: 40\n}, {\n  x: 860,\n  y: 10,\n  rx: 80,\n  ry: 60\n}, {\n  x: 890,\n  y: -5,\n  rx: 24,\n  ry: 24\n}, {\n  x: 910,\n  y: -10,\n  rx: 40,\n  ry: 40\n}, {\n  x: 950,\n  y: -18,\n  rx: 69,\n  ry: 50\n}, {\n  x: 990,\n  y: -18,\n  rx: 40,\n  ry: 30\n}, {\n  x: 1010,\n  y: 0,\n  rx: 40,\n  ry: 30\n}, {\n  x: 1030,\n  y: 10,\n  rx: 24,\n  ry: 24\n}, {\n  x: 1050,\n  y: 8,\n  rx: 24,\n  ry: 24\n}, {\n  x: 1065,\n  y: 10,\n  rx: 24,\n  ry: 24\n}, {\n  x: 1090,\n  y: 15,\n  rx: 50,\n  ry: 24\n}, {\n  x: 1115,\n  y: 20,\n  rx: 24,\n  ry: 24\n}, {\n  x: 1135,\n  y: 25,\n  rx: 40,\n  ry: 24\n}, {\n  x: 1155,\n  y: 25,\n  rx: 40,\n  ry: 24\n}, {\n  x: 1180,\n  y: 20,\n  rx: 38,\n  ry: 25\n}, {\n  x: 1200,\n  y: 100,\n  rx: 70,\n  ry: 40\n}];\nlet clouds = []; //new height to add to the height of the wave to indicate see level rise\n\nlet newHeight = 0;\nexport function setupLandscape(p) {\n  for (let i = 0; i < 3; i++) {\n    // initialize the clouds\n    clouds[i] = new Cloud(p, num_clouds - i);\n  }\n}\nexport function drawLandscape(p, currentDate, seaLevelRise, temperatureData) {\n  // this loops everything inside body\n  //we wil add a new height to the starting height to make our landscape rise and fall\n  // with the date and sea seaLevelRise data\n  if (seaLevelRise != null) {\n    var currentYear = currentDate.getFullYear();\n    var index = currentYear - 1880;\n\n    if (index < 0) {\n      newHeight = 0;\n    }\n\n    if (currentYear > 2013) {\n      newHeight = seaLevelRise[2013 - 1880][1] * 3 + (currentYear - 2014) / 3;\n    } else {\n      newHeight = seaLevelRise[index][1] * 3;\n    }\n\n    newHeight *= 2;\n    drawClouds(p, currentYear);\n    drawWaves(p, currentDate, temperatureData);\n    p.noStroke();\n  }\n}\n\nfunction drawClouds(p, currentYear) {\n  // create the clouds to call their methods\n  for (var i = 0; i < num_clouds; i++) {\n    clouds[i].move();\n    clouds[i].display(currentYear);\n  }\n\n  p.rect(0, p.windowHeight / 2 - 18, p.windowWidth, p.windowHeight / 2 + 18);\n}\n\nfunction drawWaves(p, currentDate, temperatureData) {\n  if (temperatureData) {\n    // create the waves\n    var startColor = {\n      r: 194,\n      g: 247,\n      b: 254\n    };\n    var endColor = {\n      r: 116,\n      g: 199,\n      b: 145\n    };\n    var color = calcWaveColor(p, currentDate, startColor, endColor, temperatureData);\n    createWave(p, 10 - newHeight, color, 2); // 0\n\n    startColor = {\n      r: 84,\n      g: 182,\n      b: 282\n    };\n    endColor = {\n      r: 109,\n      g: 163,\n      b: 103\n    };\n    color = calcWaveColor(p, currentDate, startColor, endColor, temperatureData);\n    createWave(p, 65 - newHeight, color, 2); // 65\n\n    startColor = {\n      r: 112,\n      g: 219,\n      b: 245\n    };\n    endColor = {\n      r: 77,\n      g: 202,\n      b: 123\n    };\n    color = calcWaveColor(p, currentDate, startColor, endColor, temperatureData);\n    createWave(p, 80 - newHeight, color, 2); // 80\n  }\n}\n\nexport function drawSeaboard(p) {\n  // create the landscape\n  createWave(p, 0, {\n    r: 250,\n    g: 219,\n    b: 97\n  }, 1);\n}\n/**\r\n * Create wave\r\n *\r\n * @param {*} offsetY Vertical offset of wave\r\n * @param {*} rgb Wave color\r\n * @param {*} dim Dimension (1D or 2D)\r\n */\n\nfunction createWave(p, offsetY, rgb, dim) {\n  p.noFill();\n  p.stroke(rgb.r, rgb.g, rgb.b); // draw wave\n\n  p.strokeWeight(p.windowHeight / 1.5); // controls how tall the wave is\n\n  p.beginShape(); // create shape for area under waves\n\n  p.curveVertex(0, p.windowHeight / 2);\n\n  for (let i = 0; i < p.width; i += 50) {\n    let y;\n\n    if (dim === 1) {\n      y = p.map(p.noise(i), 0, 1, 200, 300);\n      p.curveVertex(i, p.windowHeight * 1.55 - y);\n    } else {\n      y = p.noise(p.frameCount * noiseSpeed + i) * noiseHeight; // + noiseY + offsetY;\n\n      p.curveVertex(i, y + p.windowHeight / 1.22 + offsetY);\n    } // console.log(y);\n\n  }\n\n  p.curveVertex(p.width, p.windowHeight / 2);\n  p.endShape(p.LINES); // end shape for area under waves\n}\n\nclass Cloud {\n  // class for cloud objects\n  constructor(p, key) {\n    this.x = p.width - 1200 * key; // initial x position\n\n    this.y = p.height / 2; // initial y position\n\n    this.display = function (currentYear) {\n      var color = 255 - (currentYear - 1950) * 2; //console.log(color);\n\n      p.fill(color);\n      p.beginShape(); // create shape for area under ellipses\n\n      for (let i = 0; i < cloud_ellipses.length; i++) {\n        p.ellipse( // create ellipses that form clouds\n        this.x + cloud_ellipses[i].x, this.y + cloud_ellipses[i].y, cloud_ellipses[i].rx, cloud_ellipses[i].ry);\n        p.curveVertex( // create vertices to paint area under cloud white\n        this.x + cloud_ellipses[i].x, this.y + cloud_ellipses[i].y);\n      }\n\n      p.curveVertex(p.windowWidth, p.windowHeight);\n      p.endShape(p.CLOSE); // end shape for area under ellipses\n    };\n\n    this.move = function () {\n      this.x += 0.2; // cloud movement speed\n\n      if (this.x >= p.width) {\n        this.x = p.width - 1200 * num_clouds; // reset cloud to this position\n      }\n\n      this.y = p.height / 2 - 15 - newHeight; // update Yposition\n    };\n  }\n\n}\n\nexport function calcWaveColor(p, currentDate, startColor, endColor, temperatureData) {\n  var currentYear = currentDate.getFullYear();\n  var index = (currentYear - 1880) * temperatureData.length / 140 - 100;\n  var i = Math.round(index);\n  var average = 0;\n\n  for (var count = 0; count < 100; count++) {\n    average = average + parseFloat(temperatureData[i + count].station);\n  } //console.log(i);\n  //smallest is 0 largest is 115\n\n\n  average = average + 3;\n  var rGap = (startColor.r - endColor.r) / 115;\n  var gGap = (startColor.g - endColor.g) / 115;\n  var bGap = (startColor.b - endColor.b) / 115; // code body moved outside (above) statement block\n\n  var rIndex = startColor.r - (rGap * average | 0);\n  var gIndex = startColor.g - (gGap * average | 0);\n  var bIndex = startColor.b - (bGap * average | 0);\n  return {\n    r: rIndex,\n    g: gIndex,\n    b: bIndex\n  };\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/src/sketches/landscape.js"],"names":["noiseSpeed","noiseHeight","num_clouds","cloud_ellipses","x","y","rx","ry","clouds","newHeight","setupLandscape","p","i","Cloud","drawLandscape","currentDate","seaLevelRise","temperatureData","currentYear","getFullYear","index","drawClouds","drawWaves","noStroke","move","display","rect","windowHeight","windowWidth","startColor","r","g","b","endColor","color","calcWaveColor","createWave","drawSeaboard","offsetY","rgb","dim","noFill","stroke","strokeWeight","beginShape","curveVertex","width","map","noise","frameCount","endShape","LINES","constructor","key","height","fill","length","ellipse","CLOSE","Math","round","average","count","parseFloat","station","rGap","gGap","bGap","rIndex","gIndex","bIndex"],"mappings":"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","sourcesContent":["const noiseSpeed = 0.01;\r\nconst noiseHeight = 30; // controls how high up waves go\r\nconst num_clouds = 3;\r\nconst cloud_ellipses = [\r\n    { x: 0, y: 20, rx: 70, ry: 40 },\r\n    { x: 25, y: -3, rx: 50, ry: 28 },\r\n    { x: 70, y: 3, rx: 50, ry: 28 },\r\n    { x: 100, y: 5, rx: 24, ry: 24 },\r\n    { x: 115, y: -2, rx: 24, ry: 24 },\r\n    { x: 130, y: -2, rx: 24, ry: 24 },\r\n    { x: 145, y: 0, rx: 24, ry: 24 },\r\n    { x: 160, y: 5, rx: 24, ry: 24 },\r\n    { x: 173, y: 5, rx: 24, ry: 24 },\r\n    { x: 185, y: 5, rx: 24, ry: 24 },\r\n    { x: 198, y: -3, rx: 24, ry: 24 },\r\n    { x: 215, y: 3, rx: 28, ry: 24 },\r\n    { x: 230, y: 4, rx: 30, ry: 24 },\r\n    { x: 245, y: 6, rx: 30, ry: 24 },\r\n    { x: 260, y: 6, rx: 30, ry: 24 },\r\n    { x: 270, y: 3, rx: 26, ry: 24 },\r\n    { x: 285, y: 10, rx: 30, ry: 24 },\r\n    { x: 310, y: 4, rx: 30, ry: 24 },\r\n    { x: 325, y: 4, rx: 16, ry: 16 },\r\n    { x: 339, y: 2, rx: 24, ry: 24 },\r\n    { x: 365, y: 5, rx: 44, ry: 28 },\r\n    { x: 400, y: 0, rx: 40, ry: 24 },\r\n    { x: 435, y: -5, rx: 50, ry: 30 },\r\n    { x: 465, y: 5, rx: 24, ry: 24 },\r\n    { x: 490, y: -3, rx: 38, ry: 30 },\r\n    { x: 524, y: -3, rx: 40, ry: 24 },\r\n    { x: 550, y: -10, rx: 60, ry: 50 },\r\n    { x: 595, y: 3, rx: 58, ry: 40 },\r\n    { x: 627, y: 12, rx: 24, ry: 24 },\r\n    { x: 643, y: 20, rx: 40, ry: 24 },\r\n    { x: 665, y: 19, rx: 30, ry: 24 },\r\n    { x: 695, y: 20, rx: 50, ry: 24 },\r\n    { x: 715, y: 25, rx: 45, ry: 30 },\r\n    { x: 740, y: 25, rx: 45, ry: 30 },\r\n    { x: 754, y: 17, rx: 27, ry: 24 },\r\n    { x: 766, y: 17, rx: 20, ry: 20 },\r\n    { x: 780, y: 17, rx: 25, ry: 20 },\r\n    { x: 800, y: 10, rx: 30, ry: 20 },\r\n    { x: 820, y: 10, rx: 40, ry: 40 },\r\n    { x: 860, y: 10, rx: 80, ry: 60 },\r\n    { x: 890, y: -5, rx: 24, ry: 24 },\r\n    { x: 910, y: -10, rx: 40, ry: 40 },\r\n    { x: 950, y: -18, rx: 69, ry: 50 },\r\n    { x: 990, y: -18, rx: 40, ry: 30 },\r\n    { x: 1010, y: 0, rx: 40, ry: 30 },\r\n    { x: 1030, y: 10, rx: 24, ry: 24 },\r\n    { x: 1050, y: 8, rx: 24, ry: 24 },\r\n    { x: 1065, y: 10, rx: 24, ry: 24 },\r\n    { x: 1090, y: 15, rx: 50, ry: 24 },\r\n    { x: 1115, y: 20, rx: 24, ry: 24 },\r\n    { x: 1135, y: 25, rx: 40, ry: 24 },\r\n    { x: 1155, y: 25, rx: 40, ry: 24 },\r\n    { x: 1180, y: 20, rx: 38, ry: 25 },\r\n    { x: 1200, y: 100, rx: 70, ry: 40 },\r\n];\r\nlet clouds = [];\r\n//new height to add to the height of the wave to indicate see level rise\r\nlet newHeight = 0;\r\n\r\nexport function setupLandscape(p) {\r\n    for (let i = 0; i < 3; i++) {\r\n        // initialize the clouds\r\n        clouds[i] = new Cloud(p, num_clouds - i);\r\n    }\r\n}\r\n\r\nexport function drawLandscape(p, currentDate, seaLevelRise, temperatureData) {\r\n    // this loops everything inside body\r\n    //we wil add a new height to the starting height to make our landscape rise and fall\r\n    // with the date and sea seaLevelRise data\r\n    if (seaLevelRise != null){\r\n      var currentYear = currentDate.getFullYear();\r\n      var index = currentYear - 1880;\r\n\r\n      if (index < 0) {\r\n          newHeight = 0;\r\n      }\r\n      if (currentYear > 2013) {\r\n          newHeight = seaLevelRise[2013 - 1880][1] * 3 + (currentYear - 2014) / 3;\r\n      } else {\r\n\r\n          newHeight = seaLevelRise[index][1] * 3;\r\n      }\r\n      newHeight *= 2;\r\n\r\n      drawClouds(p, currentYear);\r\n      drawWaves(p, currentDate, temperatureData);\r\n      p.noStroke();\r\n    }\r\n\r\n}\r\n\r\nfunction drawClouds(p, currentYear) {\r\n    // create the clouds to call their methods\r\n    for (var i = 0; i < num_clouds; i++) {\r\n        clouds[i].move();\r\n        clouds[i].display(currentYear);\r\n    }\r\n    p.rect(0, p.windowHeight / 2 - 18, p.windowWidth, p.windowHeight / 2 + 18);\r\n}\r\n\r\nfunction drawWaves(p, currentDate, temperatureData) {\r\n    if (temperatureData) {\r\n        // create the waves\r\n        var startColor = { r: 194, g: 247, b: 254 };\r\n        var endColor = { r: 116, g: 199, b: 145 };\r\n        var color = calcWaveColor(\r\n            p,\r\n            currentDate,\r\n            startColor,\r\n            endColor,\r\n            temperatureData\r\n        );\r\n        createWave(p, 10 - newHeight, color, 2); // 0\r\n\r\n        startColor = { r: 84, g: 182, b: 282 };\r\n        endColor = { r: 109, g: 163, b: 103 };\r\n        color = calcWaveColor(\r\n            p,\r\n            currentDate,\r\n            startColor,\r\n            endColor,\r\n            temperatureData\r\n        );\r\n        createWave(p, 65 - newHeight, color, 2); // 65\r\n\r\n        startColor = { r: 112, g: 219, b: 245 };\r\n        endColor = { r: 77, g: 202, b: 123 };\r\n        color = calcWaveColor(\r\n            p,\r\n            currentDate,\r\n            startColor,\r\n            endColor,\r\n            temperatureData\r\n        );\r\n        createWave(p, 80 - newHeight, color, 2); // 80\r\n    }\r\n}\r\n\r\nexport function drawSeaboard(p) {\r\n    // create the landscape\r\n    createWave(p, 0, { r: 250, g: 219, b: 97 }, 1);\r\n}\r\n\r\n/**\r\n * Create wave\r\n *\r\n * @param {*} offsetY Vertical offset of wave\r\n * @param {*} rgb Wave color\r\n * @param {*} dim Dimension (1D or 2D)\r\n */\r\nfunction createWave(p, offsetY, rgb, dim) {\r\n    p.noFill();\r\n    p.stroke(rgb.r, rgb.g, rgb.b); // draw wave\r\n    p.strokeWeight(p.windowHeight / 1.5); // controls how tall the wave is\r\n    p.beginShape(); // create shape for area under waves\r\n    p.curveVertex(0, p.windowHeight / 2);\r\n    for (let i = 0; i < p.width; i += 50) {\r\n        let y;\r\n        if (dim === 1) {\r\n            y = p.map(p.noise(i), 0, 1, 200, 300);\r\n            p.curveVertex(i, p.windowHeight * 1.55 - y);\r\n        } else {\r\n            y = p.noise(p.frameCount * noiseSpeed + i) * noiseHeight; // + noiseY + offsetY;\r\n            p.curveVertex(i, y + p.windowHeight / 1.22 + offsetY);\r\n        }\r\n        // console.log(y);\r\n    }\r\n    p.curveVertex(p.width, p.windowHeight / 2);\r\n    p.endShape(p.LINES); // end shape for area under waves\r\n}\r\n\r\nclass Cloud {\r\n    // class for cloud objects\r\n    constructor(p, key) {\r\n        this.x = p.width - 1200 * key; // initial x position\r\n        this.y = p.height / 2; // initial y position\r\n\r\n        this.display = function (currentYear) {\r\n            var color = 255 - (currentYear - 1950) * 2;\r\n            //console.log(color);\r\n            p.fill(color);\r\n            p.beginShape(); // create shape for area under ellipses\r\n            for (let i = 0; i < cloud_ellipses.length; i++) {\r\n                p.ellipse(\r\n                    // create ellipses that form clouds\r\n                    this.x + cloud_ellipses[i].x,\r\n                    this.y + cloud_ellipses[i].y,\r\n                    cloud_ellipses[i].rx,\r\n                    cloud_ellipses[i].ry\r\n                );\r\n                p.curveVertex(\r\n                    // create vertices to paint area under cloud white\r\n                    this.x + cloud_ellipses[i].x,\r\n                    this.y + cloud_ellipses[i].y\r\n                );\r\n            }\r\n            p.curveVertex(p.windowWidth, p.windowHeight);\r\n            p.endShape(p.CLOSE); // end shape for area under ellipses\r\n        };\r\n\r\n        this.move = function () {\r\n            this.x += 0.2; // cloud movement speed\r\n\r\n            if (this.x >= p.width) {\r\n                this.x = p.width - 1200 * num_clouds; // reset cloud to this position\r\n            }\r\n\r\n            this.y = p.height / 2 - 15 - newHeight; // update Yposition\r\n        };\r\n    }\r\n}\r\n\r\nexport function calcWaveColor(p, currentDate, startColor, endColor, temperatureData) {\r\n    var currentYear = currentDate.getFullYear();\r\n\r\n    var index = ((currentYear - 1880) * temperatureData.length) / 140 - 100;\r\n\r\n    var i = Math.round(index);\r\n    var average = 0;\r\n    for (var count = 0; count < 100; count++) {\r\n        average = average + parseFloat(temperatureData[i + count].station);\r\n    }\r\n    //console.log(i);\r\n    //smallest is 0 largest is 115\r\n    average = average + 3;\r\n\r\n    var rGap = (startColor.r - endColor.r) / 115;\r\n    var gGap = (startColor.g - endColor.g) / 115;\r\n    var bGap = (startColor.b - endColor.b) / 115;\r\n\r\n    // code body moved outside (above) statement block\r\n    var rIndex = startColor.r - ((rGap * average) | 0);\r\n    var gIndex = startColor.g - ((gGap * average) | 0);\r\n    var bIndex = startColor.b - ((bGap * average) | 0);\r\n\r\n    return { r: rIndex, g: gIndex, b: bIndex };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}