{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kuent\\\\Documents\\\\FinishDipshit\\\\Creative\\\\Ocean-Weather-Visualization\\\\src\\\\OWSonification.js\";\nimport React from \"react\";\nimport * as Tone from \"tone\";\nimport bubbles from \"./sounds/bubbles.wav\";\nimport \"./Child2.css\";\n/*\r\n * SONIFICATION DESIGN:\r\n * - Receives data from parent component\r\n * - Four layers of audio:\r\n *   - Playback:\r\n *      - Ocean\r\n *      - Bubble sounds\r\n *   - Fat Oscillator:\r\n *      - Sun\r\n *      - Bass note\r\n *   - AM Oscillator:\r\n *      - Microplastics\r\n *      - Interval quality\r\n *   - FM Oscillator:\r\n *      - Empty for now; another tool\r\n */\n\nclass Child2 extends React.Component {\n  constructor(props) {\n    super(props); //Setting state\n\n    this.state = {\n      //Sounds load states\n      isLoaded: false,\n      //Effects levels\n      distortionLevel: 0,\n      reverbLevel: 0,\n      //Frequencies\n      freqIndex: 0,\n      bassFreqs: [65.41, 69.30, 73.42, 77.78, 82.41, 87.31, 92.50, 98.00, 103.83, 110.00, 116.54, 123.47],\n      //C2-B2\n      trebleFreqs: [523.25, 554.37, 587.33, 622.25, 659.25, 698.46, 739.99, 783.99, 830.61, 880.00, 932.33, 987.77],\n      //C5-B5\n      consonantIntervals: [0, 4, 7, 9],\n      //unison, maj third, perf fifth, maj sixth\n      dissonantIntervals: [1, 2, 3, 5, 6, 8, 10, 11],\n      //min second, maj second, min third, perf fourth, tritone, min sixth, min seventh, maj seventh\n      consonanceProbability: 100,\n      //All audio on/off\n      audioState: false,\n      //Audio layer solo states\n      playbackState: false,\n      fatOscState: false,\n      amOscState: false,\n      //Updating\n      updateCount: 0,\n      dataUpdateCount: 0\n    }; //Binding functions\n\n    this.initialize = this.initialize.bind(this);\n    this.startAudio = this.startAudio.bind(this);\n    this.getNewData = this.getNewData.bind(this); //Effects\n\n    this.dist = new Tone.Distortion(0).toDestination();\n    this.rev = new Tone.Reverb(1).toDestination(); //Sound sources\n\n    this.buffer = new Tone.ToneAudioBuffer(); //this.buffer.debug = true;\n\n    this.buffer.load(bubbles);\n    this.player = new Tone.Player(this.buffer, () => {\n      // console.log(\"Player ready!\");\n      this.setState({\n        isLoaded: true\n      });\n      this.player.loop = true;\n      this.initialize();\n    }).chain(this.dist, this.rev, Tone.Destination);\n    this.fatOsc = new Tone.FatOscillator(\"C3\", \"sawtooth\", 40).chain(this.dist, this.rev, Tone.Destination);\n    this.am = new Tone.AMOscillator(\"E3\", \"sine\", \"square\").chain(this.dist, this.rev, Tone.Destination);\n    this.fm = new Tone.FMOscillator(\"G3\", \"sine\", \"square\").chain(this.dist, this.rev, Tone.Destination);\n  }\n\n  initialize() {\n    //set state and start Tone\n    this.getNewData();\n    Tone.start();\n    Tone.Transport.start(); //set volume\n\n    this.player.volume.value = -100;\n    this.fatOsc.volume.value = -100;\n    this.am.volume.value = -100; //set frequency\n\n    this.fatOsc.frequency.rampTo(this.state.bassFreqs[this.state.freqIndex]);\n    this.am.frequency.rampTo(this.state.trebleFreqs[this.state.freqIndex + 7]);\n  }\n\n  startAudio() {\n    this.getNewData();\n    this.rev.decay = 12;\n    Tone.Transport.scheduleRepeat(time => {\n      this.getNewData();\n      console.log(\"Starting repeating event...\"); //Use microplastics data to determine probability of consonance or dissonance, then randomly select from the consonant or dissonant interval arrays\n      //this.state.consonanceProbability goes from 0 to 100\n\n      console.log(\"Consonance probability:\");\n      console.log(this.state.consonanceProbability);\n      var rand = Math.random() * 100; //get random number between 0 and 100\n\n      var intervalIndex = 0;\n\n      if (rand < this.state.consonanceProbability) {\n        console.log(\"Consonant interval!\");\n        intervalIndex = Math.floor(Math.random() * 4);\n        this.am.frequency.rampTo(this.state.trebleFreqs[this.state.freqIndex + this.state.consonantIntervals[intervalIndex]]);\n      } else {\n        console.log(\"Dissonant interval!\");\n        intervalIndex = Math.floor(Math.random() * 8);\n        this.am.frequency.rampTo(this.state.trebleFreqs[this.state.freqIndex + this.state.dissonantIntervals[intervalIndex]]);\n      }\n    }, \"4hz\", Tone.now());\n    this.fatOsc.frequency.rampTo(this.state.bassFreqs[this.state.freqIndex]);\n    this.am.frequency.rampTo(this.state.trebleFreqs[this.state.freqIndex + 7]);\n\n    if (this.state.audioState === false) {\n      this.player.start(Tone.now());\n      this.fatOsc.start(Tone.now());\n      this.am.start(Tone.now());\n      this.player.volume.rampTo(0);\n      this.fatOsc.volume.rampTo(-16);\n      this.am.volume.rampTo(-16);\n      this.setState({\n        audioState: true\n      });\n    } else if (this.state.audioState === true) {\n      this.player.volume.rampTo(-100);\n      this.fatOsc.volume.rampTo(-100);\n      this.am.volume.rampTo(-100);\n      this.player.stop(Tone.now());\n      this.fatOsc.stop(Tone.now());\n      this.am.stop(Tone.now());\n      this.setState({\n        audioState: false\n      });\n    }\n  }\n\n  getNewData() {\n    //get current date\n    var currDate = this.props.currentDate.getFullYear(); //calculate index for temperature data\n\n    var index = (currDate - 1880) * this.props.temperatureData.length / 140 - 100;\n    index = Math.round(index); //map from -1 - 1 to 0 - 10 using (value - x1) * (y2 - x2) / (y1 - x1) + x2\n\n    var frequency = (this.props.temperatureData[index].station + 1) * (10 - 0) / (1 + 1);\n    index = Math.floor(frequency) % 11; // console.log(\"Index:\");\n    // console.log(index);\n\n    this.setState({\n      freqIndex: index\n    }); //calculate index for microplastics data\n\n    index = currDate - 1950; //map from 90 to 620 to 0 to 100 using same formula as above\n\n    var cp = (this.props.microGrowth2050[index][1] - 90) * (100 - 0) / (620 + 90);\n    this.setState({\n      consonanceProbability: cp\n    });\n  }\n\n  render() {\n    const {\n      isLoaded\n    } = this.state; // console.log(this.state);\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Child2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      disabled: !isLoaded,\n      onClick: this.startAudio,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 17\n      }\n    }, \"audio on/off\"));\n  }\n\n  componentDidMount() {// console.log(\"Child2 Mounted\");\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {// console.log(\"Child2 Updated\");\n  }\n\n}\n\nexport default Child2;","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/src/OWSonification.js"],"names":["React","Tone","bubbles","Child2","Component","constructor","props","state","isLoaded","distortionLevel","reverbLevel","freqIndex","bassFreqs","trebleFreqs","consonantIntervals","dissonantIntervals","consonanceProbability","audioState","playbackState","fatOscState","amOscState","updateCount","dataUpdateCount","initialize","bind","startAudio","getNewData","dist","Distortion","toDestination","rev","Reverb","buffer","ToneAudioBuffer","load","player","Player","setState","loop","chain","Destination","fatOsc","FatOscillator","am","AMOscillator","fm","FMOscillator","start","Transport","volume","value","frequency","rampTo","decay","scheduleRepeat","time","console","log","rand","Math","random","intervalIndex","floor","now","stop","currDate","currentDate","getFullYear","index","temperatureData","length","round","station","cp","microGrowth2050","render","componentDidMount","componentDidUpdate","prevProps","prevState","snapshot"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,IAAZ,MAAsB,MAAtB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAO,cAAP;AAEA;;;;;;;;;;;;;;;;;AAgBA,MAAMC,MAAN,SAAqBH,KAAK,CAACI,SAA3B,CAAqC;AACjCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN,EADe,CAGf;;AACA,SAAKC,KAAL,GAAa;AACT;AACAC,MAAAA,QAAQ,EAAE,KAFD;AAGT;AACAC,MAAAA,eAAe,EAAE,CAJR;AAKTC,MAAAA,WAAW,EAAE,CALJ;AAMT;AACAC,MAAAA,SAAS,EAAE,CAPF;AAQTC,MAAAA,SAAS,EAAE,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,KAApC,EAA2C,KAA3C,EAAkD,KAAlD,EAAyD,MAAzD,EAAiE,MAAjE,EAAyE,MAAzE,EAAiF,MAAjF,CARF;AAQ4F;AACrGC,MAAAA,WAAW,EAAE,CAAC,MAAD,EAAS,MAAT,EAAiB,MAAjB,EAAyB,MAAzB,EAAiC,MAAjC,EAAyC,MAAzC,EAAiD,MAAjD,EAAyD,MAAzD,EAAiE,MAAjE,EAAyE,MAAzE,EAAiF,MAAjF,EAAyF,MAAzF,CATJ;AASsG;AAC/GC,MAAAA,kBAAkB,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAVX;AAUyB;AAClCC,MAAAA,kBAAkB,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,EAAnB,EAAuB,EAAvB,CAXX;AAWuC;AAChDC,MAAAA,qBAAqB,EAAE,GAZd;AAaT;AACAC,MAAAA,UAAU,EAAE,KAdH;AAeT;AACAC,MAAAA,aAAa,EAAE,KAhBN;AAiBTC,MAAAA,WAAW,EAAE,KAjBJ;AAkBTC,MAAAA,UAAU,EAAE,KAlBH;AAmBT;AACAC,MAAAA,WAAW,EAAE,CApBJ;AAqBTC,MAAAA,eAAe,EAAE;AArBR,KAAb,CAJe,CA4Bf;;AACA,SAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBD,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKE,UAAL,GAAkB,KAAKA,UAAL,CAAgBF,IAAhB,CAAqB,IAArB,CAAlB,CA/Be,CAiCf;;AACA,SAAKG,IAAL,GAAY,IAAI1B,IAAI,CAAC2B,UAAT,CAAoB,CAApB,EAAuBC,aAAvB,EAAZ;AAEA,SAAKC,GAAL,GAAW,IAAI7B,IAAI,CAAC8B,MAAT,CAAgB,CAAhB,EAAmBF,aAAnB,EAAX,CApCe,CAsCf;;AACA,SAAKG,MAAL,GAAc,IAAI/B,IAAI,CAACgC,eAAT,EAAd,CAvCe,CAwCf;;AACA,SAAKD,MAAL,CAAYE,IAAZ,CAAiBhC,OAAjB;AAEA,SAAKiC,MAAL,GAAc,IAAIlC,IAAI,CAACmC,MAAT,CAAgB,KAAKJ,MAArB,EAA6B,MAAM;AAC7C;AACA,WAAKK,QAAL,CAAc;AAAE7B,QAAAA,QAAQ,EAAE;AAAZ,OAAd;AACA,WAAK2B,MAAL,CAAYG,IAAZ,GAAmB,IAAnB;AACA,WAAKf,UAAL;AACH,KALa,EAKXgB,KALW,CAKL,KAAKZ,IALA,EAKM,KAAKG,GALX,EAKgB7B,IAAI,CAACuC,WALrB,CAAd;AAOA,SAAKC,MAAL,GAAc,IAAIxC,IAAI,CAACyC,aAAT,CAAuB,IAAvB,EAA6B,UAA7B,EAAyC,EAAzC,EAA6CH,KAA7C,CAAmD,KAAKZ,IAAxD,EAA8D,KAAKG,GAAnE,EAAwE7B,IAAI,CAACuC,WAA7E,CAAd;AAEA,SAAKG,EAAL,GAAU,IAAI1C,IAAI,CAAC2C,YAAT,CAAsB,IAAtB,EAA4B,MAA5B,EAAoC,QAApC,EAA8CL,KAA9C,CAAoD,KAAKZ,IAAzD,EAA+D,KAAKG,GAApE,EAAyE7B,IAAI,CAACuC,WAA9E,CAAV;AAEA,SAAKK,EAAL,GAAU,IAAI5C,IAAI,CAAC6C,YAAT,CAAsB,IAAtB,EAA4B,MAA5B,EAAoC,QAApC,EAA8CP,KAA9C,CAAoD,KAAKZ,IAAzD,EAA+D,KAAKG,GAApE,EAAyE7B,IAAI,CAACuC,WAA9E,CAAV;AACH;;AAEDjB,EAAAA,UAAU,GAAG;AACT;AACA,SAAKG,UAAL;AACAzB,IAAAA,IAAI,CAAC8C,KAAL;AACA9C,IAAAA,IAAI,CAAC+C,SAAL,CAAeD,KAAf,GAJS,CAMT;;AACA,SAAKZ,MAAL,CAAYc,MAAZ,CAAmBC,KAAnB,GAA2B,CAAC,GAA5B;AACA,SAAKT,MAAL,CAAYQ,MAAZ,CAAmBC,KAAnB,GAA2B,CAAC,GAA5B;AACA,SAAKP,EAAL,CAAQM,MAAR,CAAeC,KAAf,GAAuB,CAAC,GAAxB,CATS,CAWT;;AACA,SAAKT,MAAL,CAAYU,SAAZ,CAAsBC,MAAtB,CAA6B,KAAK7C,KAAL,CAAWK,SAAX,CAAqB,KAAKL,KAAL,CAAWI,SAAhC,CAA7B;AACA,SAAKgC,EAAL,CAAQQ,SAAR,CAAkBC,MAAlB,CAAyB,KAAK7C,KAAL,CAAWM,WAAX,CAAuB,KAAKN,KAAL,CAAWI,SAAX,GAAuB,CAA9C,CAAzB;AACH;;AAEDc,EAAAA,UAAU,GAAG;AACT,SAAKC,UAAL;AACA,SAAKI,GAAL,CAASuB,KAAT,GAAiB,EAAjB;AAEApD,IAAAA,IAAI,CAAC+C,SAAL,CAAeM,cAAf,CAA+BC,IAAD,IAAU;AACpC,WAAK7B,UAAL;AACA8B,MAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ,EAFoC,CAGpC;AAEA;;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKlD,KAAL,CAAWS,qBAAvB;AACA,UAAI0C,IAAI,GAAGC,IAAI,CAACC,MAAL,KAAgB,GAA3B,CARoC,CAQJ;;AAEhC,UAAIC,aAAa,GAAG,CAApB;;AAEA,UAAIH,IAAI,GAAG,KAAKnD,KAAL,CAAWS,qBAAtB,EAA6C;AACzCwC,QAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACAI,QAAAA,aAAa,GAAGF,IAAI,CAACG,KAAL,CAAWH,IAAI,CAACC,MAAL,KAAgB,CAA3B,CAAhB;AACA,aAAKjB,EAAL,CAAQQ,SAAR,CAAkBC,MAAlB,CAAyB,KAAK7C,KAAL,CAAWM,WAAX,CAAuB,KAAKN,KAAL,CAAWI,SAAX,GAAuB,KAAKJ,KAAL,CAAWO,kBAAX,CAA8B+C,aAA9B,CAA9C,CAAzB;AACH,OAJD,MAKK;AACDL,QAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACAI,QAAAA,aAAa,GAAGF,IAAI,CAACG,KAAL,CAAWH,IAAI,CAACC,MAAL,KAAgB,CAA3B,CAAhB;AACA,aAAKjB,EAAL,CAAQQ,SAAR,CAAkBC,MAAlB,CAAyB,KAAK7C,KAAL,CAAWM,WAAX,CAAuB,KAAKN,KAAL,CAAWI,SAAX,GAAuB,KAAKJ,KAAL,CAAWQ,kBAAX,CAA8B8C,aAA9B,CAA9C,CAAzB;AACH;AAEJ,KAvBD,EAuBG,KAvBH,EAuBU5D,IAAI,CAAC8D,GAAL,EAvBV;AAyBA,SAAKtB,MAAL,CAAYU,SAAZ,CAAsBC,MAAtB,CAA6B,KAAK7C,KAAL,CAAWK,SAAX,CAAqB,KAAKL,KAAL,CAAWI,SAAhC,CAA7B;AACA,SAAKgC,EAAL,CAAQQ,SAAR,CAAkBC,MAAlB,CAAyB,KAAK7C,KAAL,CAAWM,WAAX,CAAuB,KAAKN,KAAL,CAAWI,SAAX,GAAuB,CAA9C,CAAzB;;AAEA,QAAI,KAAKJ,KAAL,CAAWU,UAAX,KAA0B,KAA9B,EAAqC;AACjC,WAAKkB,MAAL,CAAYY,KAAZ,CAAkB9C,IAAI,CAAC8D,GAAL,EAAlB;AACA,WAAKtB,MAAL,CAAYM,KAAZ,CAAkB9C,IAAI,CAAC8D,GAAL,EAAlB;AACA,WAAKpB,EAAL,CAAQI,KAAR,CAAc9C,IAAI,CAAC8D,GAAL,EAAd;AAEA,WAAK5B,MAAL,CAAYc,MAAZ,CAAmBG,MAAnB,CAA0B,CAA1B;AACA,WAAKX,MAAL,CAAYQ,MAAZ,CAAmBG,MAAnB,CAA0B,CAAC,EAA3B;AACA,WAAKT,EAAL,CAAQM,MAAR,CAAeG,MAAf,CAAsB,CAAC,EAAvB;AACA,WAAKf,QAAL,CAAc;AAAEpB,QAAAA,UAAU,EAAE;AAAd,OAAd;AACH,KATD,MAUK,IAAI,KAAKV,KAAL,CAAWU,UAAX,KAA0B,IAA9B,EAAoC;AACrC,WAAKkB,MAAL,CAAYc,MAAZ,CAAmBG,MAAnB,CAA0B,CAAC,GAA3B;AACA,WAAKX,MAAL,CAAYQ,MAAZ,CAAmBG,MAAnB,CAA0B,CAAC,GAA3B;AACA,WAAKT,EAAL,CAAQM,MAAR,CAAeG,MAAf,CAAsB,CAAC,GAAvB;AAEA,WAAKjB,MAAL,CAAY6B,IAAZ,CAAiB/D,IAAI,CAAC8D,GAAL,EAAjB;AACA,WAAKtB,MAAL,CAAYuB,IAAZ,CAAiB/D,IAAI,CAAC8D,GAAL,EAAjB;AACA,WAAKpB,EAAL,CAAQqB,IAAR,CAAa/D,IAAI,CAAC8D,GAAL,EAAb;AAEA,WAAK1B,QAAL,CAAc;AAAEpB,QAAAA,UAAU,EAAE;AAAd,OAAd;AACH;AACJ;;AAEDS,EAAAA,UAAU,GAAG;AACT;AACA,QAAIuC,QAAQ,GAAG,KAAK3D,KAAL,CAAW4D,WAAX,CAAuBC,WAAvB,EAAf,CAFS,CAIT;;AACA,QAAIC,KAAK,GAAI,CAACH,QAAQ,GAAG,IAAZ,IAAoB,KAAK3D,KAAL,CAAW+D,eAAX,CAA2BC,MAAhD,GAA0D,GAA1D,GAAgE,GAA5E;AACAF,IAAAA,KAAK,GAAGT,IAAI,CAACY,KAAL,CAAWH,KAAX,CAAR,CANS,CAQT;;AACA,QAAIjB,SAAS,GAAG,CAAC,KAAK7C,KAAL,CAAW+D,eAAX,CAA2BD,KAA3B,EAAkCI,OAAlC,GAA4C,CAA7C,KAAmD,KAAK,CAAxD,KAA8D,IAAI,CAAlE,CAAhB;AACAJ,IAAAA,KAAK,GAAGT,IAAI,CAACG,KAAL,CAAWX,SAAX,IAAwB,EAAhC,CAVS,CAWT;AACA;;AACA,SAAKd,QAAL,CAAc;AAAE1B,MAAAA,SAAS,EAAEyD;AAAb,KAAd,EAbS,CAeT;;AACAA,IAAAA,KAAK,GAAIH,QAAQ,GAAG,IAApB,CAhBS,CAkBT;;AACA,QAAIQ,EAAE,GAAG,CAAC,KAAKnE,KAAL,CAAWoE,eAAX,CAA2BN,KAA3B,EAAkC,CAAlC,IAAuC,EAAxC,KAA+C,MAAM,CAArD,KAA2D,MAAM,EAAjE,CAAT;AACA,SAAK/B,QAAL,CAAc;AAAErB,MAAAA,qBAAqB,EAAEyD;AAAzB,KAAd;AACH;;AAEDE,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEnE,MAAAA;AAAF,QAAe,KAAKD,KAA1B,CADK,CAEL;;AAEA,wBACI;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAQ,MAAA,QAAQ,EAAE,CAACC,QAAnB;AAA6B,MAAA,OAAO,EAAE,KAAKiB,UAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,CADJ;AAQH;;AAEDmD,EAAAA,iBAAiB,GAAG,CAChB;AACH;;AAEDC,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAuBC,QAAvB,EAAiC,CAC/C;AACH;;AA5KgC;;AA+KrC,eAAe7E,MAAf","sourcesContent":["import React from \"react\";\r\nimport * as Tone from \"tone\";\r\nimport bubbles from \"./sounds/bubbles.wav\";\r\nimport \"./Child2.css\";\r\n\r\n/*\r\n * SONIFICATION DESIGN:\r\n * - Receives data from parent component\r\n * - Four layers of audio:\r\n *   - Playback:\r\n *      - Ocean\r\n *      - Bubble sounds\r\n *   - Fat Oscillator:\r\n *      - Sun\r\n *      - Bass note\r\n *   - AM Oscillator:\r\n *      - Microplastics\r\n *      - Interval quality\r\n *   - FM Oscillator:\r\n *      - Empty for now; another tool\r\n */\r\nclass Child2 extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        //Setting state\r\n        this.state = { \r\n            //Sounds load states\r\n            isLoaded: false,\r\n            //Effects levels\r\n            distortionLevel: 0,\r\n            reverbLevel: 0,\r\n            //Frequencies\r\n            freqIndex: 0,\r\n            bassFreqs: [65.41, 69.30, 73.42, 77.78, 82.41, 87.31, 92.50, 98.00, 103.83, 110.00, 116.54, 123.47], //C2-B2\r\n            trebleFreqs: [523.25, 554.37, 587.33, 622.25, 659.25, 698.46, 739.99, 783.99, 830.61, 880.00, 932.33, 987.77], //C5-B5\r\n            consonantIntervals: [0, 4, 7, 9], //unison, maj third, perf fifth, maj sixth\r\n            dissonantIntervals: [1, 2, 3, 5, 6, 8, 10, 11], //min second, maj second, min third, perf fourth, tritone, min sixth, min seventh, maj seventh\r\n            consonanceProbability: 100,\r\n            //All audio on/off\r\n            audioState: false,\r\n            //Audio layer solo states\r\n            playbackState: false,\r\n            fatOscState: false,\r\n            amOscState: false,\r\n            //Updating\r\n            updateCount: 0,\r\n            dataUpdateCount: 0\r\n        };\r\n\r\n        //Binding functions\r\n        this.initialize = this.initialize.bind(this);\r\n        this.startAudio = this.startAudio.bind(this);\r\n        this.getNewData = this.getNewData.bind(this);\r\n\r\n        //Effects\r\n        this.dist = new Tone.Distortion(0).toDestination();\r\n\r\n        this.rev = new Tone.Reverb(1).toDestination();\r\n\r\n        //Sound sources\r\n        this.buffer = new Tone.ToneAudioBuffer();\r\n        //this.buffer.debug = true;\r\n        this.buffer.load(bubbles);\r\n\r\n        this.player = new Tone.Player(this.buffer, () => {\r\n            // console.log(\"Player ready!\");\r\n            this.setState({ isLoaded: true });\r\n            this.player.loop = true;\r\n            this.initialize();\r\n        }).chain(this.dist, this.rev, Tone.Destination);\r\n\r\n        this.fatOsc = new Tone.FatOscillator(\"C3\", \"sawtooth\", 40).chain(this.dist, this.rev, Tone.Destination);\r\n\r\n        this.am = new Tone.AMOscillator(\"E3\", \"sine\", \"square\").chain(this.dist, this.rev, Tone.Destination);\r\n    \r\n        this.fm = new Tone.FMOscillator(\"G3\", \"sine\", \"square\").chain(this.dist, this.rev, Tone.Destination);\r\n    }\r\n\r\n    initialize() {\r\n        //set state and start Tone\r\n        this.getNewData();\r\n        Tone.start();\r\n        Tone.Transport.start();\r\n\r\n        //set volume\r\n        this.player.volume.value = -100;\r\n        this.fatOsc.volume.value = -100;\r\n        this.am.volume.value = -100;\r\n\r\n        //set frequency\r\n        this.fatOsc.frequency.rampTo(this.state.bassFreqs[this.state.freqIndex]);\r\n        this.am.frequency.rampTo(this.state.trebleFreqs[this.state.freqIndex + 7]);\r\n    }\r\n\r\n    startAudio() {\r\n        this.getNewData();\r\n        this.rev.decay = 12;\r\n\r\n        Tone.Transport.scheduleRepeat((time) => {\r\n            this.getNewData();\r\n            console.log(\"Starting repeating event...\");\r\n            //Use microplastics data to determine probability of consonance or dissonance, then randomly select from the consonant or dissonant interval arrays\r\n            \r\n            //this.state.consonanceProbability goes from 0 to 100\r\n            console.log(\"Consonance probability:\");\r\n            console.log(this.state.consonanceProbability);\r\n            var rand = Math.random() * 100; //get random number between 0 and 100\r\n\r\n            var intervalIndex = 0;\r\n\r\n            if (rand < this.state.consonanceProbability) {\r\n                console.log(\"Consonant interval!\");\r\n                intervalIndex = Math.floor(Math.random() * 4);\r\n                this.am.frequency.rampTo(this.state.trebleFreqs[this.state.freqIndex + this.state.consonantIntervals[intervalIndex]]);\r\n            }\r\n            else {\r\n                console.log(\"Dissonant interval!\");\r\n                intervalIndex = Math.floor(Math.random() * 8);\r\n                this.am.frequency.rampTo(this.state.trebleFreqs[this.state.freqIndex + this.state.dissonantIntervals[intervalIndex]]);\r\n            }\r\n\r\n        }, \"4hz\", Tone.now());\r\n\r\n        this.fatOsc.frequency.rampTo(this.state.bassFreqs[this.state.freqIndex]);\r\n        this.am.frequency.rampTo(this.state.trebleFreqs[this.state.freqIndex + 7]);\r\n\r\n        if (this.state.audioState === false) {\r\n            this.player.start(Tone.now());\r\n            this.fatOsc.start(Tone.now());\r\n            this.am.start(Tone.now());\r\n\r\n            this.player.volume.rampTo(0);\r\n            this.fatOsc.volume.rampTo(-16);\r\n            this.am.volume.rampTo(-16);\r\n            this.setState({ audioState: true });\r\n        }\r\n        else if (this.state.audioState === true) {\r\n            this.player.volume.rampTo(-100);\r\n            this.fatOsc.volume.rampTo(-100);\r\n            this.am.volume.rampTo(-100);\r\n\r\n            this.player.stop(Tone.now());\r\n            this.fatOsc.stop(Tone.now());\r\n            this.am.stop(Tone.now());\r\n\r\n            this.setState({ audioState: false });\r\n        }\r\n    }\r\n\r\n    getNewData() {\r\n        //get current date\r\n        var currDate = this.props.currentDate.getFullYear();\r\n        \r\n        //calculate index for temperature data\r\n        var index = ((currDate - 1880) * this.props.temperatureData.length) / 140 - 100;\r\n        index = Math.round(index);\r\n\r\n        //map from -1 - 1 to 0 - 10 using (value - x1) * (y2 - x2) / (y1 - x1) + x2\r\n        var frequency = (this.props.temperatureData[index].station + 1) * (10 - 0) / (1 + 1);\r\n        index = Math.floor(frequency) % 11;\r\n        // console.log(\"Index:\");\r\n        // console.log(index);\r\n        this.setState({ freqIndex: index });\r\n\r\n        //calculate index for microplastics data\r\n        index = (currDate - 1950);\r\n\r\n        //map from 90 to 620 to 0 to 100 using same formula as above\r\n        var cp = (this.props.microGrowth2050[index][1] - 90) * (100 - 0) / (620 + 90);\r\n        this.setState({ consonanceProbability: cp });        \r\n    }\r\n\r\n    render() {\r\n        const { isLoaded } = this.state;\r\n        // console.log(this.state);\r\n\r\n        return (\r\n            <div className=\"Child2\" >\r\n                <button disabled={!isLoaded} onClick={this.startAudio}>\r\n                    audio on/off\r\n                </button>\r\n\r\n            </div>\r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n        // console.log(\"Child2 Mounted\");\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        // console.log(\"Child2 Updated\");\r\n    }\r\n}\r\n\r\nexport default Child2\r\n\r\n"]},"metadata":{},"sourceType":"module"}