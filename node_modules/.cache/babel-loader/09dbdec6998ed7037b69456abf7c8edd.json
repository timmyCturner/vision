{"ast":null,"code":"import BaseRegression, { checkArrayLength, maybeToPrecision } from 'ml-regression-base';\nimport { Matrix, MatrixTransposeView, solve } from 'ml-matrix';\nexport default class PolynomialRegression extends BaseRegression {\n  constructor(x, y, degree) {\n    super();\n\n    if (x === true) {\n      this.degree = y.degree;\n      this.powers = y.powers;\n      this.coefficients = y.coefficients;\n    } else {\n      checkArrayLength(x, y);\n      regress(this, x, y, degree);\n    }\n  }\n\n  _predict(x) {\n    let y = 0;\n\n    for (let k = 0; k < this.powers.length; k++) {\n      y += this.coefficients[k] * Math.pow(x, this.powers[k]);\n    }\n\n    return y;\n  }\n\n  toJSON() {\n    return {\n      name: 'polynomialRegression',\n      degree: this.degree,\n      powers: this.powers,\n      coefficients: this.coefficients\n    };\n  }\n\n  toString(precision) {\n    return this._toFormula(precision, false);\n  }\n\n  toLaTeX(precision) {\n    return this._toFormula(precision, true);\n  }\n\n  _toFormula(precision, isLaTeX) {\n    let sup = '^';\n    let closeSup = '';\n    let times = ' * ';\n\n    if (isLaTeX) {\n      sup = '^{';\n      closeSup = '}';\n      times = '';\n    }\n\n    let fn = '';\n    let str = '';\n\n    for (let k = 0; k < this.coefficients.length; k++) {\n      str = '';\n\n      if (this.coefficients[k] !== 0) {\n        if (this.powers[k] === 0) {\n          str = maybeToPrecision(this.coefficients[k], precision);\n        } else {\n          if (this.powers[k] === 1) {\n            str = `${maybeToPrecision(this.coefficients[k], precision) + times}x`;\n          } else {\n            str = `${maybeToPrecision(this.coefficients[k], precision) + times}x${sup}${this.powers[k]}${closeSup}`;\n          }\n        }\n\n        if (this.coefficients[k] > 0 && k !== this.coefficients.length - 1) {\n          str = ` + ${str}`;\n        } else if (k !== this.coefficients.length - 1) {\n          str = ` ${str}`;\n        }\n      }\n\n      fn = str + fn;\n    }\n\n    if (fn.charAt(0) === '+') {\n      fn = fn.slice(1);\n    }\n\n    return `f(x) = ${fn}`;\n  }\n\n  static load(json) {\n    if (json.name !== 'polynomialRegression') {\n      throw new TypeError('not a polynomial regression model');\n    }\n\n    return new PolynomialRegression(true, json);\n  }\n\n}\n\nfunction regress(pr, x, y, degree) {\n  const n = x.length;\n  let powers;\n\n  if (Array.isArray(degree)) {\n    powers = degree;\n    degree = powers.length;\n  } else {\n    degree++;\n    powers = new Array(degree);\n\n    for (let k = 0; k < degree; k++) {\n      powers[k] = k;\n    }\n  }\n\n  const F = new Matrix(n, degree);\n  const Y = new Matrix([y]);\n\n  for (let k = 0; k < degree; k++) {\n    for (let i = 0; i < n; i++) {\n      if (powers[k] === 0) {\n        F.set(i, k, 1);\n      } else {\n        F.set(i, k, Math.pow(x[i], powers[k]));\n      }\n    }\n  }\n\n  const FT = new MatrixTransposeView(F);\n  const A = FT.mmul(F);\n  const B = FT.mmul(new MatrixTransposeView(Y));\n  pr.degree = degree - 1;\n  pr.powers = powers;\n  pr.coefficients = solve(A, B).to1DArray();\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/node_modules/ml-regression-polynomial/src/index.js"],"names":["BaseRegression","checkArrayLength","maybeToPrecision","Matrix","MatrixTransposeView","solve","PolynomialRegression","constructor","x","y","degree","powers","coefficients","regress","_predict","k","length","Math","pow","toJSON","name","toString","precision","_toFormula","toLaTeX","isLaTeX","sup","closeSup","times","fn","str","charAt","slice","load","json","TypeError","pr","n","Array","isArray","F","Y","i","set","FT","A","mmul","B","to1DArray"],"mappings":"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","sourcesContent":["import BaseRegression, {\n  checkArrayLength,\n  maybeToPrecision,\n} from 'ml-regression-base';\nimport { Matrix, MatrixTransposeView, solve } from 'ml-matrix';\n\nexport default class PolynomialRegression extends BaseRegression {\n  constructor(x, y, degree) {\n    super();\n    if (x === true) {\n      this.degree = y.degree;\n      this.powers = y.powers;\n      this.coefficients = y.coefficients;\n    } else {\n      checkArrayLength(x, y);\n      regress(this, x, y, degree);\n    }\n  }\n\n  _predict(x) {\n    let y = 0;\n    for (let k = 0; k < this.powers.length; k++) {\n      y += this.coefficients[k] * Math.pow(x, this.powers[k]);\n    }\n    return y;\n  }\n\n  toJSON() {\n    return {\n      name: 'polynomialRegression',\n      degree: this.degree,\n      powers: this.powers,\n      coefficients: this.coefficients,\n    };\n  }\n\n  toString(precision) {\n    return this._toFormula(precision, false);\n  }\n\n  toLaTeX(precision) {\n    return this._toFormula(precision, true);\n  }\n\n  _toFormula(precision, isLaTeX) {\n    let sup = '^';\n    let closeSup = '';\n    let times = ' * ';\n    if (isLaTeX) {\n      sup = '^{';\n      closeSup = '}';\n      times = '';\n    }\n\n    let fn = '';\n    let str = '';\n    for (let k = 0; k < this.coefficients.length; k++) {\n      str = '';\n      if (this.coefficients[k] !== 0) {\n        if (this.powers[k] === 0) {\n          str = maybeToPrecision(this.coefficients[k], precision);\n        } else {\n          if (this.powers[k] === 1) {\n            str = `${maybeToPrecision(this.coefficients[k], precision) +\n              times}x`;\n          } else {\n            str = `${maybeToPrecision(this.coefficients[k], precision) +\n              times}x${sup}${this.powers[k]}${closeSup}`;\n          }\n        }\n\n        if (this.coefficients[k] > 0 && k !== this.coefficients.length - 1) {\n          str = ` + ${str}`;\n        } else if (k !== this.coefficients.length - 1) {\n          str = ` ${str}`;\n        }\n      }\n      fn = str + fn;\n    }\n    if (fn.charAt(0) === '+') {\n      fn = fn.slice(1);\n    }\n\n    return `f(x) = ${fn}`;\n  }\n\n  static load(json) {\n    if (json.name !== 'polynomialRegression') {\n      throw new TypeError('not a polynomial regression model');\n    }\n    return new PolynomialRegression(true, json);\n  }\n}\n\nfunction regress(pr, x, y, degree) {\n  const n = x.length;\n  let powers;\n  if (Array.isArray(degree)) {\n    powers = degree;\n    degree = powers.length;\n  } else {\n    degree++;\n    powers = new Array(degree);\n    for (let k = 0; k < degree; k++) {\n      powers[k] = k;\n    }\n  }\n  const F = new Matrix(n, degree);\n  const Y = new Matrix([y]);\n  for (let k = 0; k < degree; k++) {\n    for (let i = 0; i < n; i++) {\n      if (powers[k] === 0) {\n        F.set(i, k, 1);\n      } else {\n        F.set(i, k, Math.pow(x[i], powers[k]));\n      }\n    }\n  }\n\n  const FT = new MatrixTransposeView(F);\n  const A = FT.mmul(F);\n  const B = FT.mmul(new MatrixTransposeView(Y));\n\n  pr.degree = degree - 1;\n  pr.powers = powers;\n  pr.coefficients = solve(A, B).to1DArray();\n}\n"]},"metadata":{},"sourceType":"module"}