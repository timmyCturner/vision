{"ast":null,"code":"import { hoveredMacroPlasticData } from \"./macroPlastics\"; //these are gonna be the variables for our garbage collection\n\nexport const hoveredMicroPlasticData = {\n  mouseOver: false,\n  value: null\n};\nlet drops = [];\nlet micro_Size = 5;\nlet newHeight = 0;\nlet startingHeight = window.innerHeight * 0.56;\n\nclass Drop {\n  constructor(p) {\n    this.x = p.random(0, p.width);\n    this.y = p.random(startingHeight, p.height);\n  }\n\n  show(p) {\n    p.noStroke();\n    p.fill(255);\n    this.size = p.random(5, micro_Size);\n    p.ellipse(this.x, this.y, this.size);\n\n    if (hoveredMacroPlasticData.mouseOver) {\n      p.fill(225, 225, 0, 70);\n      p.ellipse(this.x, this.y, this.size + 10);\n    }\n  }\n\n  update(p) {\n    this.speed = this.speed = p.random(2, 4);\n    this.gravity = 1.05;\n    this.y = this.y + this.speed * this.gravity;\n\n    if (this.y > p.height) {\n      this.y = p.random(startingHeight - newHeight, startingHeight - newHeight + 70);\n      this.gravity = 0;\n    }\n  }\n\n}\n\nexport function resizeMicroPlastics(p) {\n  startingHeight = p.windowHeight * 0.56;\n}\nexport function setupMicroPlasticDrops(p) {//\n  //set up plastic\n  //\n\n  /*for (let i = 0; i < 200; i++) {\r\n      drops[i] = new Drop(p);\r\n  }*/\n}\nexport function drawMicroPlasticDots(p, microGrowth2050, current_date, seaLevelRise) {\n  //we wil add a new height to the starting height to make our landscape rise and fall\n  // with the date and sea seaLevelRise data\n  let currentDate = current_date.getFullYear();\n  let index = currentDate - 1880;\n\n  if (index < 0) {\n    newHeight = 0;\n  }\n\n  if (currentDate > 2013) {\n    newHeight = seaLevelRise[2013 - 1880][1] * 3 + (currentDate - 2014) / 3;\n  } else {\n    newHeight = seaLevelRise[index][1] * 3;\n  } //calc microplastic\n  //\n\n\n  for (let i = 0; i < drops.length; i++) {\n    if (!hoveredMacroPlasticData.mouseOver) {\n      drops[i].update(p);\n    }\n\n    drops[i].show(p);\n  }\n\n  if (microGrowth2050 != null) {\n    let newSize = -1 * (microGrowth2050[currentDate - 1950][1] - 367);\n    let num;\n\n    if (currentDate > 1971) {\n      num = newSize * (590000 / 78);\n      hoveredMicroPlasticData.value = num.toFixed(2);\n    } else {\n      num = (currentDate - 1950) * 100;\n      hoveredMicroPlasticData.value = num.toFixed(2);\n    }\n\n    if (currentDate < 1965) {\n      newSize = 0;\n    }\n\n    newSize = newSize * 2; //add drops\n\n    if (newSize > drops.length) {\n      for (let j = drops.length; j < newSize; j++) {\n        drops[j] = new Drop(p);\n      }\n    } //remove drops\n\n\n    if (newSize < drops.length) {\n      let diff = drops.length - newSize;\n      drops = drops.splice(diff);\n    }\n  }\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/src/sketches/microPlastics.js"],"names":["hoveredMacroPlasticData","hoveredMicroPlasticData","mouseOver","value","drops","micro_Size","newHeight","startingHeight","window","innerHeight","Drop","constructor","p","x","random","width","y","height","show","noStroke","fill","size","ellipse","update","speed","gravity","resizeMicroPlastics","windowHeight","setupMicroPlasticDrops","drawMicroPlasticDots","microGrowth2050","current_date","seaLevelRise","currentDate","getFullYear","index","i","length","newSize","num","toFixed","j","diff","splice"],"mappings":"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","sourcesContent":["import { hoveredMacroPlasticData } from \"./macroPlastics\";\r\n\r\n//these are gonna be the variables for our garbage collection\r\nexport const hoveredMicroPlasticData = { mouseOver: false, value: null };\r\nlet drops = [];\r\nlet micro_Size = 5;\r\nlet newHeight = 0;\r\nlet startingHeight = window.innerHeight * 0.56;\r\n\r\nclass Drop {\r\n    constructor(p) {\r\n        this.x = p.random(0, p.width);\r\n        this.y = p.random(startingHeight, p.height);\r\n    }\r\n\r\n    show(p) {\r\n        p.noStroke();\r\n        p.fill(255);\r\n        this.size = p.random(5, micro_Size);\r\n\r\n        p.ellipse(this.x, this.y, this.size);\r\n\r\n        if (hoveredMacroPlasticData.mouseOver) {\r\n            p.fill(225, 225, 0, 70);\r\n            p.ellipse(this.x, this.y, this.size + 10);\r\n        }\r\n    }\r\n\r\n    update(p) {\r\n        this.speed = this.speed = p.random(2, 4);\r\n        this.gravity = 1.05;\r\n        this.y = this.y + this.speed * this.gravity;\r\n\r\n        if (this.y > p.height) {\r\n            this.y = p.random(\r\n                startingHeight - newHeight,\r\n                startingHeight - newHeight + 70\r\n            );\r\n            this.gravity = 0;\r\n        }\r\n    }\r\n}\r\n\r\nexport function resizeMicroPlastics(p) {\r\n    startingHeight = p.windowHeight * 0.56;\r\n}\r\n\r\nexport function setupMicroPlasticDrops(p) {\r\n    //\r\n    //set up plastic\r\n    //\r\n    /*for (let i = 0; i < 200; i++) {\r\n        drops[i] = new Drop(p);\r\n    }*/\r\n}\r\n\r\nexport function drawMicroPlasticDots(\r\n    p,\r\n    microGrowth2050,\r\n    current_date,\r\n    seaLevelRise\r\n) {\r\n    //we wil add a new height to the starting height to make our landscape rise and fall\r\n    // with the date and sea seaLevelRise data\r\n    let currentDate = current_date.getFullYear();\r\n    let index = currentDate - 1880;\r\n\r\n    if (index < 0) {\r\n        newHeight = 0;\r\n    }\r\n    if (currentDate > 2013) {\r\n        newHeight = seaLevelRise[2013 - 1880][1] * 3 + (currentDate - 2014) / 3;\r\n    } else {\r\n        newHeight = seaLevelRise[index][1] * 3;\r\n    }\r\n\r\n    //calc microplastic\r\n    //\r\n\r\n    for (let i = 0; i < drops.length; i++) {\r\n        if (!hoveredMacroPlasticData.mouseOver) {\r\n            drops[i].update(p);\r\n        }\r\n        drops[i].show(p);\r\n    }\r\n\r\n    if (microGrowth2050 != null) {\r\n        let newSize = -1 * (microGrowth2050[currentDate - 1950][1] - 367);\r\n        let num;\r\n\r\n\r\n\r\n        if (currentDate > 1971) {\r\n            num = newSize * (590000 / 78);\r\n            hoveredMicroPlasticData.value = num.toFixed(2);\r\n        } else {\r\n            num = (currentDate - 1950) * 100;\r\n            hoveredMicroPlasticData.value = num.toFixed(2);\r\n        }\r\n\r\n        if (currentDate < 1965) {\r\n          newSize = 0\r\n        }\r\n        newSize = newSize * 2 ;\r\n\r\n        //add drops\r\n        if (newSize > drops.length) {\r\n            for (let j = drops.length; j < newSize; j++) {\r\n                drops[j] = new Drop(p);\r\n            }\r\n        }\r\n\r\n        //remove drops\r\n        if (newSize < drops.length) {\r\n            let diff = drops.length - newSize;\r\n            drops = drops.splice(diff);\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}