{"ast":null,"code":"/**\n * This function is the white top hat (also called top hat). In mathematical morphology and digital image processing,\n * top-hat transform is an operation that extracts small elements and details from given images.\n * The white top-hat transform is defined as the difference between the input image and its opening by some structuring element.\n * Top-hat transforms are used for various image processing tasks, such as feature extraction, background equalization, image enhancement, and others. (Wikipedia)\n * http://docs.opencv.org/2.4/doc/tutorials/imgproc/opening_closing_hats/opening_closing_hats.html\n * @memberof Image\n * @instance\n * @param {object} [options]\n * @param {Array<Array<number>>} [options.kernel] - The kernel can only have ones and zeros. Default: [[1, 1, 1], [1, 1, 1], [1, 1, 1]]\n * @param {number} [options.iterations=1] - Number of iterations of the morphological transform\n * @return {Image}\n */\nexport default function topHat(options = {}) {\n  let {\n    kernel = [[1, 1, 1], [1, 1, 1], [1, 1, 1]],\n    iterations = 1\n  } = options;\n  this.checkProcessable('topHat', {\n    bitDepth: [8, 16],\n    components: 1,\n    alpha: 0\n  });\n\n  if (kernel.length % 2 === 0 || kernel[0].length % 2 === 0) {\n    throw new TypeError('topHat: The number of rows and columns of the kernel must be odd');\n  }\n\n  let newImage = this;\n\n  for (let i = 0; i < iterations; i++) {\n    let openImage = newImage.open({\n      kernel\n    });\n    newImage = openImage.subtractImage(newImage, {\n      absolute: true\n    });\n  }\n\n  return newImage;\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/node_modules/image-js/src/image/morphology/topHat.js"],"names":["topHat","options","kernel","iterations","checkProcessable","bitDepth","components","alpha","length","TypeError","newImage","i","openImage","open","subtractImage","absolute"],"mappings":"AAAA;;;;;;;;;;;;;AAaA,eAAe,SAASA,MAAT,CAAgBC,OAAO,GAAG,EAA1B,EAA8B;AAC3C,MAAI;AACFC,IAAAA,MAAM,GAAG,CACP,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADO,EAEP,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFO,EAGP,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAHO,CADP;AAMFC,IAAAA,UAAU,GAAG;AANX,MAOAF,OAPJ;AASA,OAAKG,gBAAL,CAAsB,QAAtB,EAAgC;AAC9BC,IAAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,EAAJ,CADoB;AAE9BC,IAAAA,UAAU,EAAE,CAFkB;AAG9BC,IAAAA,KAAK,EAAE;AAHuB,GAAhC;;AAKA,MAAIL,MAAM,CAACM,MAAP,GAAgB,CAAhB,KAAsB,CAAtB,IAA2BN,MAAM,CAAC,CAAD,CAAN,CAAUM,MAAV,GAAmB,CAAnB,KAAyB,CAAxD,EAA2D;AACzD,UAAM,IAAIC,SAAJ,CACJ,kEADI,CAAN;AAGD;;AAED,MAAIC,QAAQ,GAAG,IAAf;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,UAApB,EAAgCQ,CAAC,EAAjC,EAAqC;AACnC,QAAIC,SAAS,GAAGF,QAAQ,CAACG,IAAT,CAAc;AAAEX,MAAAA;AAAF,KAAd,CAAhB;AACAQ,IAAAA,QAAQ,GAAGE,SAAS,CAACE,aAAV,CAAwBJ,QAAxB,EAAkC;AAAEK,MAAAA,QAAQ,EAAE;AAAZ,KAAlC,CAAX;AACD;;AACD,SAAOL,QAAP;AACD","sourcesContent":["/**\n * This function is the white top hat (also called top hat). In mathematical morphology and digital image processing,\n * top-hat transform is an operation that extracts small elements and details from given images.\n * The white top-hat transform is defined as the difference between the input image and its opening by some structuring element.\n * Top-hat transforms are used for various image processing tasks, such as feature extraction, background equalization, image enhancement, and others. (Wikipedia)\n * http://docs.opencv.org/2.4/doc/tutorials/imgproc/opening_closing_hats/opening_closing_hats.html\n * @memberof Image\n * @instance\n * @param {object} [options]\n * @param {Array<Array<number>>} [options.kernel] - The kernel can only have ones and zeros. Default: [[1, 1, 1], [1, 1, 1], [1, 1, 1]]\n * @param {number} [options.iterations=1] - Number of iterations of the morphological transform\n * @return {Image}\n */\nexport default function topHat(options = {}) {\n  let {\n    kernel = [\n      [1, 1, 1],\n      [1, 1, 1],\n      [1, 1, 1],\n    ],\n    iterations = 1,\n  } = options;\n\n  this.checkProcessable('topHat', {\n    bitDepth: [8, 16],\n    components: 1,\n    alpha: 0,\n  });\n  if (kernel.length % 2 === 0 || kernel[0].length % 2 === 0) {\n    throw new TypeError(\n      'topHat: The number of rows and columns of the kernel must be odd',\n    );\n  }\n\n  let newImage = this;\n  for (let i = 0; i < iterations; i++) {\n    let openImage = newImage.open({ kernel });\n    newImage = openImage.subtractImage(newImage, { absolute: true });\n  }\n  return newImage;\n}\n"]},"metadata":{},"sourceType":"module"}