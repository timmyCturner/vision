{"ast":null,"code":"/**\n * In mathematical morphology and digital image processing, a morphological gradient is the difference between the dilation and the erosion of a given image. It is an image where each pixel value (typically non-negative) indicates the contrast intensity in the close neighborhood of that pixel. It is useful for edge detection and segmentation applications.\n * http://docs.opencv.org/2.4/doc/tutorials/imgproc/opening_closing_hats/opening_closing_hats.html\n * @memberof Image\n * @instance\n * @param {object} [options]\n * @param {Array<Array<number>>} [options.kernel] - The kernel can only have ones and zeros. Default: [[1, 1, 1], [1, 1, 1], [1, 1, 1]]\n * @param {number} [options.iterations=1] - Number of iterations of the morphological transform\n * @return {Image}\n */\nexport default function morphologicalGradient(options = {}) {\n  let {\n    kernel = [[1, 1, 1], [1, 1, 1], [1, 1, 1]],\n    iterations = 1\n  } = options;\n  this.checkProcessable('morphologicalGradient', {\n    bitDepth: [8, 16],\n    components: 1,\n    alpha: 0\n  });\n\n  if (kernel.columns % 2 === 0 || kernel.rows % 2 === 0) {\n    throw new TypeError('morphologicalGradient: The number of rows and columns of the kernel must be odd');\n  }\n\n  let newImage = this;\n\n  for (let i = 0; i < iterations; i++) {\n    let dilatedImage = newImage.dilate({\n      kernel\n    });\n    let erodedImage = newImage.erode({\n      kernel\n    });\n    newImage = dilatedImage.subtractImage(erodedImage, {\n      absolute: true\n    });\n  }\n\n  return newImage;\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/node_modules/image-js/src/image/morphology/morphologicalGradient.js"],"names":["morphologicalGradient","options","kernel","iterations","checkProcessable","bitDepth","components","alpha","columns","rows","TypeError","newImage","i","dilatedImage","dilate","erodedImage","erode","subtractImage","absolute"],"mappings":"AAAA;;;;;;;;;;AAUA,eAAe,SAASA,qBAAT,CAA+BC,OAAO,GAAG,EAAzC,EAA6C;AAC1D,MAAI;AACFC,IAAAA,MAAM,GAAG,CACP,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADO,EAEP,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFO,EAGP,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAHO,CADP;AAMFC,IAAAA,UAAU,GAAG;AANX,MAOAF,OAPJ;AASA,OAAKG,gBAAL,CAAsB,uBAAtB,EAA+C;AAC7CC,IAAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,EAAJ,CADmC;AAE7CC,IAAAA,UAAU,EAAE,CAFiC;AAG7CC,IAAAA,KAAK,EAAE;AAHsC,GAA/C;;AAKA,MAAIL,MAAM,CAACM,OAAP,GAAiB,CAAjB,KAAuB,CAAvB,IAA4BN,MAAM,CAACO,IAAP,GAAc,CAAd,KAAoB,CAApD,EAAuD;AACrD,UAAM,IAAIC,SAAJ,CACJ,iFADI,CAAN;AAGD;;AAED,MAAIC,QAAQ,GAAG,IAAf;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,UAApB,EAAgCS,CAAC,EAAjC,EAAqC;AACnC,QAAIC,YAAY,GAAGF,QAAQ,CAACG,MAAT,CAAgB;AAAEZ,MAAAA;AAAF,KAAhB,CAAnB;AACA,QAAIa,WAAW,GAAGJ,QAAQ,CAACK,KAAT,CAAe;AAAEd,MAAAA;AAAF,KAAf,CAAlB;AACAS,IAAAA,QAAQ,GAAGE,YAAY,CAACI,aAAb,CAA2BF,WAA3B,EAAwC;AAAEG,MAAAA,QAAQ,EAAE;AAAZ,KAAxC,CAAX;AACD;;AAED,SAAOP,QAAP;AACD","sourcesContent":["/**\n * In mathematical morphology and digital image processing, a morphological gradient is the difference between the dilation and the erosion of a given image. It is an image where each pixel value (typically non-negative) indicates the contrast intensity in the close neighborhood of that pixel. It is useful for edge detection and segmentation applications.\n * http://docs.opencv.org/2.4/doc/tutorials/imgproc/opening_closing_hats/opening_closing_hats.html\n * @memberof Image\n * @instance\n * @param {object} [options]\n * @param {Array<Array<number>>} [options.kernel] - The kernel can only have ones and zeros. Default: [[1, 1, 1], [1, 1, 1], [1, 1, 1]]\n * @param {number} [options.iterations=1] - Number of iterations of the morphological transform\n * @return {Image}\n */\nexport default function morphologicalGradient(options = {}) {\n  let {\n    kernel = [\n      [1, 1, 1],\n      [1, 1, 1],\n      [1, 1, 1],\n    ],\n    iterations = 1,\n  } = options;\n\n  this.checkProcessable('morphologicalGradient', {\n    bitDepth: [8, 16],\n    components: 1,\n    alpha: 0,\n  });\n  if (kernel.columns % 2 === 0 || kernel.rows % 2 === 0) {\n    throw new TypeError(\n      'morphologicalGradient: The number of rows and columns of the kernel must be odd',\n    );\n  }\n\n  let newImage = this;\n  for (let i = 0; i < iterations; i++) {\n    let dilatedImage = newImage.dilate({ kernel });\n    let erodedImage = newImage.erode({ kernel });\n    newImage = dilatedImage.subtractImage(erodedImage, { absolute: true });\n  }\n\n  return newImage;\n}\n"]},"metadata":{},"sourceType":"module"}