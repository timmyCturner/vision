{"ast":null,"code":"import isAnyArray from 'is-any-array';\nexport { default as maybeToPrecision } from './maybeToPrecision';\nexport { default as checkArrayLength } from './checkArrayLength';\nexport default class BaseRegression {\n  constructor() {\n    if (new.target === BaseRegression) {\n      throw new Error('BaseRegression must be subclassed');\n    }\n  }\n\n  predict(x) {\n    if (typeof x === 'number') {\n      return this._predict(x);\n    } else if (isAnyArray(x)) {\n      const y = [];\n\n      for (let i = 0; i < x.length; i++) {\n        y.push(this._predict(x[i]));\n      }\n\n      return y;\n    } else {\n      throw new TypeError('x must be a number or array');\n    }\n  }\n\n  _predict() {\n    throw new Error('_predict must be implemented');\n  }\n\n  train() {// Do nothing for this package\n  }\n\n  toString() {\n    return '';\n  }\n\n  toLaTeX() {\n    return '';\n  }\n  /**\n   * Return the correlation coefficient of determination (r) and chi-square.\n   * @param {Array<number>} x\n   * @param {Array<number>} y\n   * @return {object}\n   */\n\n\n  score(x, y) {\n    if (!isAnyArray(x) || !isAnyArray(y) || x.length !== y.length) {\n      throw new Error('x and y must be arrays of the same length');\n    }\n\n    const n = x.length;\n    const y2 = new Array(n);\n\n    for (let i = 0; i < n; i++) {\n      y2[i] = this._predict(x[i]);\n    }\n\n    let xSum = 0;\n    let ySum = 0;\n    let chi2 = 0;\n    let rmsd = 0;\n    let xSquared = 0;\n    let ySquared = 0;\n    let xY = 0;\n\n    for (let i = 0; i < n; i++) {\n      xSum += y2[i];\n      ySum += y[i];\n      xSquared += y2[i] * y2[i];\n      ySquared += y[i] * y[i];\n      xY += y2[i] * y[i];\n\n      if (y[i] !== 0) {\n        chi2 += (y[i] - y2[i]) * (y[i] - y2[i]) / y[i];\n      }\n\n      rmsd += (y[i] - y2[i]) * (y[i] - y2[i]);\n    }\n\n    const r = (n * xY - xSum * ySum) / Math.sqrt((n * xSquared - xSum * xSum) * (n * ySquared - ySum * ySum));\n    return {\n      r: r,\n      r2: r * r,\n      chi2: chi2,\n      rmsd: Math.sqrt(rmsd / n)\n    };\n  }\n\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/node_modules/ml-regression-base/src/index.js"],"names":["isAnyArray","default","maybeToPrecision","checkArrayLength","BaseRegression","constructor","new","target","Error","predict","x","_predict","y","i","length","push","TypeError","train","toString","toLaTeX","score","n","y2","Array","xSum","ySum","chi2","rmsd","xSquared","ySquared","xY","r","Math","sqrt","r2"],"mappings":"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","sourcesContent":["import isAnyArray from 'is-any-array';\n\nexport { default as maybeToPrecision } from './maybeToPrecision';\nexport { default as checkArrayLength } from './checkArrayLength';\nexport default class BaseRegression {\n  constructor() {\n    if (new.target === BaseRegression) {\n      throw new Error('BaseRegression must be subclassed');\n    }\n  }\n\n  predict(x) {\n    if (typeof x === 'number') {\n      return this._predict(x);\n    } else if (isAnyArray(x)) {\n      const y = [];\n      for (let i = 0; i < x.length; i++) {\n        y.push(this._predict(x[i]));\n      }\n      return y;\n    } else {\n      throw new TypeError('x must be a number or array');\n    }\n  }\n\n  _predict() {\n    throw new Error('_predict must be implemented');\n  }\n\n  train() {\n    // Do nothing for this package\n  }\n\n  toString() {\n    return '';\n  }\n\n  toLaTeX() {\n    return '';\n  }\n\n  /**\n   * Return the correlation coefficient of determination (r) and chi-square.\n   * @param {Array<number>} x\n   * @param {Array<number>} y\n   * @return {object}\n   */\n  score(x, y) {\n    if (!isAnyArray(x) || !isAnyArray(y) || x.length !== y.length) {\n      throw new Error('x and y must be arrays of the same length');\n    }\n\n    const n = x.length;\n    const y2 = new Array(n);\n    for (let i = 0; i < n; i++) {\n      y2[i] = this._predict(x[i]);\n    }\n\n    let xSum = 0;\n    let ySum = 0;\n    let chi2 = 0;\n    let rmsd = 0;\n    let xSquared = 0;\n    let ySquared = 0;\n    let xY = 0;\n    for (let i = 0; i < n; i++) {\n      xSum += y2[i];\n      ySum += y[i];\n      xSquared += y2[i] * y2[i];\n      ySquared += y[i] * y[i];\n      xY += y2[i] * y[i];\n      if (y[i] !== 0) {\n        chi2 += ((y[i] - y2[i]) * (y[i] - y2[i])) / y[i];\n      }\n      rmsd += (y[i] - y2[i]) * (y[i] - y2[i]);\n    }\n\n    const r =\n      (n * xY - xSum * ySum) /\n      Math.sqrt((n * xSquared - xSum * xSum) * (n * ySquared - ySum * ySum));\n\n    return {\n      r: r,\n      r2: r * r,\n      chi2: chi2,\n      rmsd: Math.sqrt(rmsd / n),\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}