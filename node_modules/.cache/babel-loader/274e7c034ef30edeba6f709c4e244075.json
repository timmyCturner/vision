{"ast":null,"code":"import Image from '../../image/Image';\n/**\n * @memberof Stack\n * @instance\n * @return {Image}\n */\n\nexport default function averageImage() {\n  this.checkProcessable('averageImage', {\n    bitDepth: [8, 16]\n  });\n  let data = new Uint32Array(this[0].data.length);\n\n  for (let i = 0; i < this.length; i++) {\n    let current = this[i];\n\n    for (let j = 0; j < this[0].data.length; j++) {\n      data[j] += current.data[j];\n    }\n  }\n\n  let image = Image.createFrom(this[0]);\n  let newData = image.data;\n\n  for (let i = 0; i < this[0].data.length; i++) {\n    newData[i] = data[i] / this.length;\n  }\n\n  return image;\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/node_modules/image-js/src/stack/utility/averageImage.js"],"names":["Image","averageImage","checkProcessable","bitDepth","data","Uint32Array","length","i","current","j","image","createFrom","newData"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,mBAAlB;AAEA;;;;;;AAKA,eAAe,SAASC,YAAT,GAAwB;AACrC,OAAKC,gBAAL,CAAsB,cAAtB,EAAsC;AACpCC,IAAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,EAAJ;AAD0B,GAAtC;AAIA,MAAIC,IAAI,GAAG,IAAIC,WAAJ,CAAgB,KAAK,CAAL,EAAQD,IAAR,CAAaE,MAA7B,CAAX;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKD,MAAzB,EAAiCC,CAAC,EAAlC,EAAsC;AACpC,QAAIC,OAAO,GAAG,KAAKD,CAAL,CAAd;;AACA,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK,CAAL,EAAQL,IAAR,CAAaE,MAAjC,EAAyCG,CAAC,EAA1C,EAA8C;AAC5CL,MAAAA,IAAI,CAACK,CAAD,CAAJ,IAAWD,OAAO,CAACJ,IAAR,CAAaK,CAAb,CAAX;AACD;AACF;;AAED,MAAIC,KAAK,GAAGV,KAAK,CAACW,UAAN,CAAiB,KAAK,CAAL,CAAjB,CAAZ;AACA,MAAIC,OAAO,GAAGF,KAAK,CAACN,IAApB;;AAEA,OAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK,CAAL,EAAQH,IAAR,CAAaE,MAAjC,EAAyCC,CAAC,EAA1C,EAA8C;AAC5CK,IAAAA,OAAO,CAACL,CAAD,CAAP,GAAaH,IAAI,CAACG,CAAD,CAAJ,GAAU,KAAKD,MAA5B;AACD;;AAED,SAAOI,KAAP;AACD","sourcesContent":["import Image from '../../image/Image';\n\n/**\n * @memberof Stack\n * @instance\n * @return {Image}\n */\nexport default function averageImage() {\n  this.checkProcessable('averageImage', {\n    bitDepth: [8, 16],\n  });\n\n  let data = new Uint32Array(this[0].data.length);\n  for (let i = 0; i < this.length; i++) {\n    let current = this[i];\n    for (let j = 0; j < this[0].data.length; j++) {\n      data[j] += current.data[j];\n    }\n  }\n\n  let image = Image.createFrom(this[0]);\n  let newData = image.data;\n\n  for (let i = 0; i < this[0].data.length; i++) {\n    newData[i] = data[i] / this.length;\n  }\n\n  return image;\n}\n"]},"metadata":{},"sourceType":"module"}