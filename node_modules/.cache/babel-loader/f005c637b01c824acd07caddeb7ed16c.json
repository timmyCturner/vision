{"ast":null,"code":"export default function wave(p) {\n  let canvas;\n  let height = 10;\n  let width = 20;\n  let xspacing = 16; // Distance between each horizontal location\n\n  let w; // Width of entire wave\n\n  let theta = 0.0; // Start angle at 0\n\n  let amplitude = 75.0; // Height of wave\n\n  let period = 500.0; // How many pixels before the wave repeats\n\n  let dx; // Value for incrementing x\n\n  let yvalues; // Using an array to store height values for the wave\n\n  p.setup = () => {\n    canvas = p.createCanvas(710, 400);\n    w = width + 16;\n    dx = TWO_PI / period * xspacing;\n    yvalues = new Array(p.floor(w / xspacing));\n  };\n\n  p.draw = () => {\n    p.background(0);\n    p.calcWave();\n    p.renderWave();\n  };\n\n  p.calcWave = () => {\n    // Increment theta (try different values for\n    // 'angular velocity' here)\n    theta += 0.02; // For every x value, calculate a y value with sine function\n\n    let x = theta;\n\n    for (let i = 0; i < yvalues.length; i++) {\n      yvalues[i] = p.sin(x) * amplitude;\n      x += dx;\n    }\n  };\n\n  p.renderWave = () => {\n    p.noStroke();\n    p.fill(255); // A simple way to draw the wave with an ellipse at each location\n\n    for (let x = 0; x < yvalues.length; x++) {\n      p.ellipse(x * xspacing, height / 2 + yvalues[x], 16, 16);\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/samiea.github.io/react-deploy/src/sketches/wave.js"],"names":["wave","p","canvas","height","width","xspacing","w","theta","amplitude","period","dx","yvalues","setup","createCanvas","TWO_PI","Array","floor","draw","background","calcWave","renderWave","x","i","length","sin","noStroke","fill","ellipse"],"mappings":"AAAA,eAAe,SAASA,IAAT,CAAcC,CAAd,EAAiB;AAE9B,MAAIC,MAAJ;AAEA,MAAIC,MAAM,GAAG,EAAb;AACA,MAAIC,KAAK,GAAG,EAAZ;AACA,MAAIC,QAAQ,GAAG,EAAf,CAN8B,CAMX;;AACnB,MAAIC,CAAJ,CAP8B,CAOvB;;AACP,MAAIC,KAAK,GAAG,GAAZ,CAR8B,CAQb;;AACjB,MAAIC,SAAS,GAAG,IAAhB,CAT8B,CASR;;AACtB,MAAIC,MAAM,GAAG,KAAb,CAV8B,CAUV;;AACpB,MAAIC,EAAJ,CAX8B,CAWtB;;AACR,MAAIC,OAAJ,CAZ8B,CAYjB;;AAEbV,EAAAA,CAAC,CAACW,KAAF,GAAU,MAAM;AACdV,IAAAA,MAAM,GAAGD,CAAC,CAACY,YAAF,CAAe,GAAf,EAAoB,GAApB,CAAT;AACAP,IAAAA,CAAC,GAAGF,KAAK,GAAG,EAAZ;AACAM,IAAAA,EAAE,GAAII,MAAM,GAAGL,MAAV,GAAoBJ,QAAzB;AACAM,IAAAA,OAAO,GAAG,IAAII,KAAJ,CAAUd,CAAC,CAACe,KAAF,CAAQV,CAAC,GAAGD,QAAZ,CAAV,CAAV;AACD,GALD;;AAMAJ,EAAAA,CAAC,CAACgB,IAAF,GAAS,MAAM;AACbhB,IAAAA,CAAC,CAACiB,UAAF,CAAa,CAAb;AACAjB,IAAAA,CAAC,CAACkB,QAAF;AACAlB,IAAAA,CAAC,CAACmB,UAAF;AACD,GAJD;;AAMAnB,EAAAA,CAAC,CAACkB,QAAF,GAAY,MAAO;AACjB;AACA;AACAZ,IAAAA,KAAK,IAAI,IAAT,CAHiB,CAKjB;;AACA,QAAIc,CAAC,GAAGd,KAAR;;AACA,SAAK,IAAIe,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,OAAO,CAACY,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACvCX,MAAAA,OAAO,CAACW,CAAD,CAAP,GAAarB,CAAC,CAACuB,GAAF,CAAMH,CAAN,IAAWb,SAAxB;AACAa,MAAAA,CAAC,IAAIX,EAAL;AACD;AACF,GAXD;;AAYAT,EAAAA,CAAC,CAACmB,UAAF,GAAe,MAAM;AACnBnB,IAAAA,CAAC,CAACwB,QAAF;AACAxB,IAAAA,CAAC,CAACyB,IAAF,CAAO,GAAP,EAFmB,CAGnB;;AACA,SAAK,IAAIL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,OAAO,CAACY,MAA5B,EAAoCF,CAAC,EAArC,EAAyC;AACvCpB,MAAAA,CAAC,CAAC0B,OAAF,CAAUN,CAAC,GAAGhB,QAAd,EAAwBF,MAAM,GAAG,CAAT,GAAaQ,OAAO,CAACU,CAAD,CAA5C,EAAiD,EAAjD,EAAqD,EAArD;AACD;AACF,GAPD;AAQD","sourcesContent":["export default function wave(p) {\r\n\r\n  let canvas;\r\n\r\n  let height = 10\r\n  let width = 20\r\n  let xspacing = 16; // Distance between each horizontal location\r\n  let w; // Width of entire wave\r\n  let theta = 0.0; // Start angle at 0\r\n  let amplitude = 75.0; // Height of wave\r\n  let period = 500.0; // How many pixels before the wave repeats\r\n  let dx; // Value for incrementing x\r\n  let yvalues; // Using an array to store height values for the wave\r\n\r\n  p.setup = () => {\r\n    canvas = p.createCanvas(710, 400);\r\n    w = width + 16;\r\n    dx = (TWO_PI / period) * xspacing;\r\n    yvalues = new Array(p.floor(w / xspacing));\r\n  }\r\n  p.draw = () => {\r\n    p.background(0);\r\n    p.calcWave();\r\n    p.renderWave();\r\n  }\r\n\r\n  p.calcWave= () =>  {\r\n    // Increment theta (try different values for\r\n    // 'angular velocity' here)\r\n    theta += 0.02;\r\n\r\n    // For every x value, calculate a y value with sine function\r\n    let x = theta;\r\n    for (let i = 0; i < yvalues.length; i++) {\r\n      yvalues[i] = p.sin(x) * amplitude;\r\n      x += dx;\r\n    }\r\n  }\r\n  p.renderWave = () => {\r\n    p.noStroke();\r\n    p.fill(255);\r\n    // A simple way to draw the wave with an ellipse at each location\r\n    for (let x = 0; x < yvalues.length; x++) {\r\n      p.ellipse(x * xspacing, height / 2 + yvalues[x], 16, 16);\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}