{"ast":null,"code":"//these are gonna be the variables for our garbage collection\nvar macro_plastic = [];\nexport const hoveredMacroPlasticData = {\n  mouseOver: false,\n  value: null\n};\nlet hoveredMacroPlastic = null;\nlet newHeight = 0;\n\nclass GarbagePile {\n  constructor(p, moreHeight) {\n    var bubbleHeight = p.height / 1.85;\n    this.xVelocity = p.random(-0.5, 0.5); //cloud movement velocity\n\n    this.x = p.random(50, p.width);\n    this.y = bubbleHeight - moreHeight;\n    this.width = p.random(100, 300);\n    this.height = p.random(50, 100);\n    this.garbageBubbles = []; // make the garbage hard to see through\n\n    this.opacity = p.random(400, 500);\n    this.size = this.width - this.height; // various reds and greens and browns\n\n    this.rcolor = p.random(129, 160);\n    this.gcolor = p.random(80, 105);\n    this.bcolor = p.random(70, 110);\n\n    for (let x = 0; x < 25; x++) {\n      this.garbageBubbles[x] = new GarbageBubble(p, this.width, this.height);\n    }\n\n    this.display = function () {\n      p.noStroke();\n      let color = p.color(this.rcolor, this.gcolor, this.bcolor);\n      this.garbageColor = color;\n      this.garbageColor.setAlpha(this.opacity);\n      p.fill(this.garbageColor);\n\n      if (hoveredMacroPlasticData.mouseOver) {\n        p.fill(225, 225, 0, 70);\n      }\n\n      for (let x = 0; x < this.garbageBubbles.length; x++) {\n        this.garbageBubbles[x].display(this.x, this.y);\n      }\n    };\n\n    this.move = function () {\n      for (let x = 0; x < this.garbageBubbles.length; x++) {\n        if (Math.abs(this.garbageBubbles[x].yOffset) > this.height / 2 - 10) {\n          this.garbageBubbles[x].yVelocity *= -1;\n        }\n\n        if (this.garbageBubbles[x].rx < 70 || this.garbageBubbles[x].rx > 150) {\n          this.garbageBubbles[x].rxVelocity *= -1;\n        }\n\n        if (this.garbageBubbles[x].ry < 70 || this.garbageBubbles[x].ry > 150) {\n          this.garbageBubbles[x].ryVelocity *= -1;\n        }\n\n        this.garbageBubbles[x].xOffset += this.garbageBubbles[x].xVelocity;\n        this.garbageBubbles[x].yOffset += this.garbageBubbles[x].yVelocity;\n        this.garbageBubbles[x].rx += this.garbageBubbles[x].rxVelocity;\n        this.garbageBubbles[x].ry += this.garbageBubbles[x].ryVelocity;\n        this.garbageBubbles[x].move();\n      }\n\n      if (this.x > p.width) {\n        this.x = 50;\n      } else if (this.x < 0) {\n        this.x = p.width - 50;\n      }\n\n      this.x += this.xVelocity;\n    };\n  }\n\n}\n\nexport function resizeMacroPlastics(p) {\n  macro_plastic.forEach(garbagePile => {\n    garbagePile.y = p.windowHeight / 1.85;\n  });\n}\n\nclass GarbageBubble {\n  constructor(p, xlimit, ylimit) {\n    this.opacity = p.random(150, 200);\n    this.xVelocity = p.random(0.03, 0.07);\n    this.yVelocity = p.random(0.03, 0.07);\n    this.xOffset = p.random(xlimit / 4 * -1, xlimit / 4);\n    this.yOffset = p.random(ylimit / 8 * -1, ylimit / 8);\n    this.rx = p.random(25, 40);\n    this.ry = p.random(25, 40);\n    this.size = this.rx;\n    this.rxVelocity = p.random(-0.01, 0.01);\n    this.ryVelocity = p.random(0.0, 0.01);\n\n    this.display = function (x, y) {\n      this.x = x + this.xOffset;\n      this.y = y + this.yOffset - newHeight;\n      p.ellipse(x + this.xOffset, y + this.yOffset - newHeight, this.rx, this.ry);\n      p.curveVertex(x + this.xOffset, y + this.yOffset - newHeight);\n    };\n\n    this.move = function () {\n      // check if mouse is pressed and within range of bubble\n      if (p.mouseIsPressed && p.dist(p.mouseX, p.mouseY, this.x, this.y) < this.size) {\n        hoveredMacroPlasticData.mouseOver = true;\n        hoveredMacroPlastic = this;\n      }\n    };\n  }\n\n}\n\nexport function setupMacroPlastics(p) {\n  //\n  //set up plastic\n  //\n  for (var i = 0; i < 5; i++) {\n    macro_plastic[i] = new GarbagePile(p, i);\n  }\n}\nexport function drawMacroPlastics(p, macroGrowth2050, current_date, seaLevelRise) {\n  //we wil add a new height to the starting height to make our landscape rise and fall\n  // with the date and sea seaLevelRise data\n  var currentDate = current_date.getFullYear();\n  var index = currentDate - 1880;\n\n  if (index < 0) {\n    newHeight = 0;\n  }\n\n  if (currentDate > 2013) {\n    newHeight = seaLevelRise[2013 - 1880][1] * 3 + (currentDate - 2014) / 3;\n  } else {\n    newHeight = seaLevelRise[index][1] * 3;\n  } //calc amount of microplastic\n\n\n  for (var i = 0; i < macro_plastic.length; i++) {\n    if (!hoveredMacroPlasticData.mouseOver) {\n      macro_plastic[i].move(p);\n    } else if (p.dist(p.mouseX, p.mouseY, hoveredMacroPlastic.x, hoveredMacroPlastic.y) > hoveredMacroPlastic.size) {\n      hoveredMacroPlasticData.mouseOver = false;\n    }\n\n    macro_plastic[i].display(p);\n  }\n\n  if (macroGrowth2050 != null) {\n    var newSize = -1 * (macroGrowth2050[currentDate - 1950][1] - 367); //calculate the actual data from the value\n    //console.log(newSize);\n\n    if (currentDate < 1965) {\n      newSize = 0;\n    }\n\n    if (currentDate > 1963) {\n      num = newSize * (1180000 / 103);\n      hoveredMacroPlasticData.value = num.toFixed(2);\n    } else {\n      num = (currentDate - 1950) * 100;\n      hoveredMacroPlasticData.value = num.toFixed(2);\n    }\n\n    newSize = Math.round(newSize / 4) - 1;\n    newHeight = Math.round(newSize * 1.25); //add drops\n\n    if (newSize > macro_plastic.length) {\n      for (var j = macro_plastic.length; j < newSize; j++) {\n        macro_plastic[j] = new GarbagePile(p, newHeight);\n      }\n    } //remove drops\n\n\n    if (newSize < macro_plastic.length) {\n      //console.log('remove');\n      var diff = macro_plastic.length - newSize;\n      macro_plastic = macro_plastic.splice(0, diff);\n    }\n  }\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/src/sketches/macroPlastics.js"],"names":["macro_plastic","hoveredMacroPlasticData","mouseOver","value","hoveredMacroPlastic","newHeight","GarbagePile","constructor","p","moreHeight","bubbleHeight","height","xVelocity","random","x","width","y","garbageBubbles","opacity","size","rcolor","gcolor","bcolor","GarbageBubble","display","noStroke","color","garbageColor","setAlpha","fill","length","move","Math","abs","yOffset","yVelocity","rx","rxVelocity","ry","ryVelocity","xOffset","resizeMacroPlastics","forEach","garbagePile","windowHeight","xlimit","ylimit","ellipse","curveVertex","mouseIsPressed","dist","mouseX","mouseY","setupMacroPlastics","i","drawMacroPlastics","macroGrowth2050","current_date","seaLevelRise","currentDate","getFullYear","index","newSize","num","toFixed","round","j","diff","splice"],"mappings":"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","sourcesContent":["//these are gonna be the variables for our garbage collection\r\nvar macro_plastic = [];\r\n\r\nexport const hoveredMacroPlasticData = { mouseOver: false, value: null };\r\nlet hoveredMacroPlastic = null;\r\nlet newHeight = 0;\r\n\r\nclass GarbagePile {\r\n    constructor(p, moreHeight) {\r\n        var bubbleHeight = p.height / 1.85;\r\n        this.xVelocity = p.random(-0.5, 0.5); //cloud movement velocity\r\n        this.x = p.random(50, p.width);\r\n        this.y = bubbleHeight - moreHeight;\r\n        this.width = p.random(100, 300);\r\n        this.height = p.random(50, 100);\r\n        this.garbageBubbles = [];\r\n        // make the garbage hard to see through\r\n\r\n        this.opacity = p.random(400, 500);\r\n        this.size = this.width - this.height;\r\n\r\n        // various reds and greens and browns\r\n        this.rcolor = p.random(129, 160);\r\n        this.gcolor = p.random(80, 105);\r\n        this.bcolor = p.random(70, 110);\r\n\r\n        for (let x = 0; x < 25; x++) {\r\n            this.garbageBubbles[x] = new GarbageBubble(\r\n                p,\r\n                this.width,\r\n                this.height\r\n            );\r\n        }\r\n\r\n        this.display = function () {\r\n            p.noStroke();\r\n\r\n            let color = p.color(this.rcolor, this.gcolor, this.bcolor);\r\n            this.garbageColor = color;\r\n            this.garbageColor.setAlpha(this.opacity);\r\n            p.fill(this.garbageColor);\r\n\r\n            if (hoveredMacroPlasticData.mouseOver) {\r\n                p.fill(225, 225, 0, 70);\r\n            }\r\n\r\n            for (let x = 0; x < this.garbageBubbles.length; x++) {\r\n                this.garbageBubbles[x].display(this.x, this.y);\r\n            }\r\n        };\r\n\r\n        this.move = function () {\r\n            for (let x = 0; x < this.garbageBubbles.length; x++) {\r\n                if (\r\n                    Math.abs(this.garbageBubbles[x].yOffset) >\r\n                    this.height / 2 - 10\r\n                ) {\r\n                    this.garbageBubbles[x].yVelocity *= -1;\r\n                }\r\n                if (\r\n                    this.garbageBubbles[x].rx < 70 ||\r\n                    this.garbageBubbles[x].rx > 150\r\n                ) {\r\n                    this.garbageBubbles[x].rxVelocity *= -1;\r\n                }\r\n                if (\r\n                    this.garbageBubbles[x].ry < 70 ||\r\n                    this.garbageBubbles[x].ry > 150\r\n                ) {\r\n                    this.garbageBubbles[x].ryVelocity *= -1;\r\n                }\r\n\r\n                this.garbageBubbles[x].xOffset += this.garbageBubbles[\r\n                    x\r\n                ].xVelocity;\r\n                this.garbageBubbles[x].yOffset += this.garbageBubbles[\r\n                    x\r\n                ].yVelocity;\r\n\r\n                this.garbageBubbles[x].rx += this.garbageBubbles[x].rxVelocity;\r\n                this.garbageBubbles[x].ry += this.garbageBubbles[x].ryVelocity;\r\n\r\n                this.garbageBubbles[x].move();\r\n            }\r\n\r\n            if (this.x > p.width) {\r\n                this.x = 50;\r\n            } else if (this.x < 0) {\r\n                this.x = p.width - 50;\r\n            }\r\n            this.x += this.xVelocity;\r\n        };\r\n    }\r\n}\r\n\r\nexport function resizeMacroPlastics(p) {\r\n    macro_plastic.forEach((garbagePile) => {\r\n        garbagePile.y = p.windowHeight / 1.85;\r\n    });\r\n}\r\n\r\nclass GarbageBubble {\r\n    constructor(p, xlimit, ylimit) {\r\n        this.opacity = p.random(150, 200);\r\n        this.xVelocity = p.random(0.03, 0.07);\r\n        this.yVelocity = p.random(0.03, 0.07);\r\n        this.xOffset = p.random((xlimit / 4) * -1, xlimit / 4);\r\n        this.yOffset = p.random((ylimit / 8) * -1, ylimit / 8);\r\n        this.rx = p.random(25, 40);\r\n        this.ry = p.random(25, 40);\r\n        this.size = this.rx;\r\n        this.rxVelocity = p.random(-0.01, 0.01);\r\n        this.ryVelocity = p.random(0.0, 0.01);\r\n\r\n        this.display = function (x, y) {\r\n            this.x = x + this.xOffset;\r\n            this.y = y + this.yOffset - newHeight;\r\n\r\n            p.ellipse(\r\n                x + this.xOffset,\r\n                y + this.yOffset - newHeight,\r\n                this.rx,\r\n                this.ry\r\n            );\r\n            p.curveVertex(x + this.xOffset, y + this.yOffset - newHeight);\r\n        };\r\n\r\n        this.move = function () {\r\n            // check if mouse is pressed and within range of bubble\r\n\r\n            if (\r\n                p.mouseIsPressed &&\r\n                p.dist(p.mouseX, p.mouseY, this.x, this.y) < this.size\r\n            ) {\r\n                hoveredMacroPlasticData.mouseOver = true;\r\n                hoveredMacroPlastic = this;\r\n            }\r\n        };\r\n    }\r\n}\r\n\r\nexport function setupMacroPlastics(p) {\r\n    //\r\n    //set up plastic\r\n    //\r\n    for (var i = 0; i < 5; i++) {\r\n        macro_plastic[i] = new GarbagePile(p, i);\r\n    }\r\n}\r\n\r\nexport function drawMacroPlastics(\r\n    p,\r\n    macroGrowth2050,\r\n    current_date,\r\n    seaLevelRise\r\n) {\r\n    //we wil add a new height to the starting height to make our landscape rise and fall\r\n    // with the date and sea seaLevelRise data\r\n\r\n    var currentDate = current_date.getFullYear();\r\n    var index = currentDate - 1880;\r\n\r\n    if (index < 0) {\r\n        newHeight = 0;\r\n    }\r\n    if (currentDate > 2013) {\r\n        newHeight = seaLevelRise[2013 - 1880][1] * 3 + (currentDate - 2014) / 3;\r\n    } else {\r\n        newHeight = seaLevelRise[index][1] * 3;\r\n    }\r\n\r\n    //calc amount of microplastic\r\n\r\n    for (var i = 0; i < macro_plastic.length; i++) {\r\n        if (!hoveredMacroPlasticData.mouseOver) {\r\n            macro_plastic[i].move(p);\r\n        } else if (\r\n            p.dist(\r\n                p.mouseX,\r\n                p.mouseY,\r\n                hoveredMacroPlastic.x,\r\n                hoveredMacroPlastic.y\r\n            ) > hoveredMacroPlastic.size\r\n        ) {\r\n            hoveredMacroPlasticData.mouseOver = false;\r\n        }\r\n        macro_plastic[i].display(p);\r\n    }\r\n\r\n    if (macroGrowth2050 != null) {\r\n        var newSize = -1 * (macroGrowth2050[currentDate - 1950][1] - 367);\r\n        //calculate the actual data from the value\r\n        //console.log(newSize);\r\n        if (currentDate < 1965) {\r\n          newSize = 0\r\n        }\r\n        \r\n        if (currentDate > 1963) {\r\n            num = newSize * (1180000 / 103);\r\n            hoveredMacroPlasticData.value = num.toFixed(2);\r\n        } else {\r\n            num = (currentDate - 1950) * 100;\r\n            hoveredMacroPlasticData.value = num.toFixed(2);\r\n        }\r\n\r\n        newSize = Math.round(newSize / 4) -1;\r\n        newHeight = Math.round(newSize * 1.25);\r\n\r\n        //add drops\r\n        if (newSize > macro_plastic.length) {\r\n            for (var j = macro_plastic.length; j < newSize; j++) {\r\n                macro_plastic[j] = new GarbagePile(p, newHeight);\r\n            }\r\n        }\r\n        //remove drops\r\n        if (newSize < macro_plastic.length) {\r\n            //console.log('remove');\r\n            var diff = macro_plastic.length - newSize;\r\n            macro_plastic = macro_plastic.splice(0, diff);\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}