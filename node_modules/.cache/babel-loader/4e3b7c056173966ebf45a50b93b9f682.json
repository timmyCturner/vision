{"ast":null,"code":"export default function wave(p) {\n  let canvas;\n  let xspacing = 16; // Distance between each horizontal location\n\n  let w; // Width of entire wave\n\n  let theta = 0.15; // Start angle at 0\n\n  let amplitude = 75.0; // Height of wave\n\n  let period = 500.0; // How many pixels before the wave repeats\n\n  let dx = 2; // Value for incrementing x\n\n  let yvalues; // Using an array to store height values for the wave\n\n  let back = 5; //offset for the back wave\n\n  p.setup = () => {\n    canvas = p.createCanvas(710, 400);\n    w = p.width + 16;\n    console.log(Math.PI);\n    dx = 2 * Math.PI / period * xspacing;\n    yvalues = new Array(p.floor(w / xspacing));\n  };\n\n  p.draw = () => {\n    p.background(0);\n    p.calcWave();\n    p.renderWave();\n    p.backWave();\n  };\n\n  p.calcWave = () => {\n    // Increment theta (try different values for\n    // 'angular velocity' here)\n    theta += 0.02; // For every x value, calculate a y value with sine function\n\n    let x = theta;\n\n    for (let i = 0; i < yvalues.length; i++) {\n      yvalues[i] = Math.sin(x) * amplitude;\n      x += dx;\n    }\n  };\n\n  p.renderWave = () => {\n    p.noStroke();\n    p.fill(255); // A simple way to draw the wave with an ellipse at each location\n\n    for (let x = 0; x < yvalues.length; x++) {\n      p.ellipse(x * xspacing, p.height / 2 + yvalues[x], 16, 16);\n    }\n  };\n\n  p.backWave = () => {\n    p.noStroke();\n    p.fill(255); // A simple way to draw the wave with an ellipse at each location\n\n    for (let x = 0; x < yvalues.length; x++) {\n      p.ellipse((x + back) * xspacing, p.height / 2 + yvalues[x], 16, 16);\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/samiea.github.io/react-deploy/src/sketches/wave.js"],"names":["wave","p","canvas","xspacing","w","theta","amplitude","period","dx","yvalues","back","setup","createCanvas","width","console","log","Math","PI","Array","floor","draw","background","calcWave","renderWave","backWave","x","i","length","sin","noStroke","fill","ellipse","height"],"mappings":"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","sourcesContent":["\r\nexport default function wave(p) {\r\n\r\n  let canvas;\r\n\r\n\r\n  let xspacing = 16; // Distance between each horizontal location\r\n  let w; // Width of entire wave\r\n  let theta = 0.15; // Start angle at 0\r\n  let amplitude = 75.0; // Height of wave\r\n  let period = 500.0; // How many pixels before the wave repeats\r\n  let dx=2; // Value for incrementing x\r\n  let yvalues; // Using an array to store height values for the wave\r\n  let back = 5; //offset for the back wave\r\n\r\n  p.setup = () => {\r\n    canvas = p.createCanvas(710, 400);\r\n    w = p.width + 16;\r\n    console.log(Math.PI);\r\n    dx = (2*Math.PI / period) * xspacing;\r\n    yvalues = new Array(p.floor(w / xspacing));\r\n  }\r\n  p.draw = () => {\r\n    p.background(0);\r\n    p.calcWave();\r\n    p.renderWave();\r\n    p.backWave();\r\n  }\r\n\r\n  p.calcWave= () =>  {\r\n    // Increment theta (try different values for\r\n    // 'angular velocity' here)\r\n    theta += 0.02;\r\n\r\n    // For every x value, calculate a y value with sine function\r\n    let x = theta;\r\n    for (let i = 0; i < yvalues.length; i++) {\r\n\r\n      yvalues[i] = Math.sin(x) * amplitude;\r\n      x += dx;\r\n    }\r\n  }\r\n  p.renderWave = () => {\r\n    p.noStroke();\r\n    p.fill(255);\r\n    // A simple way to draw the wave with an ellipse at each location\r\n    for (let x = 0; x < yvalues.length; x++) {\r\n      p.ellipse(x * xspacing, p.height / 2 + yvalues[x], 16, 16);\r\n    }\r\n  }\r\n  p.backWave = () => {\r\n    p.noStroke();\r\n    p.fill(255);\r\n    // A simple way to draw the wave with an ellipse at each location\r\n    for (let x = 0; x < yvalues.length; x++) {\r\n      p.ellipse((x+back) * xspacing, p.height / 2 + yvalues[x], 16, 16);\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}