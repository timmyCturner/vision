{"ast":null,"code":"export default function wave(p) {\n  let canvas;\n  let xspacing = 16; // Distance between each horizontal location\n\n  let w; // Width of entire wave\n\n  let theta = 0.15; // Start angle at 0\n\n  let amplitude = 75.0; // Height of wave\n\n  let period = 500.0; // How many pixels before the wave repeats\n\n  let dx = 2; // Value for incrementing x\n\n  let yvalues; // Using an array to store height values for the wave\n\n  let backvalues;\n  let back = 2; // back offset\n\n  p.setup = () => {\n    canvas = p.createCanvas(710, 400);\n    w = p.width + 16;\n    console.log(Math.PI);\n    dx = 2 * Math.PI / period * xspacing;\n    yvalues = new Array(p.floor(w / xspacing));\n    backvalues = new Array(p.floor(w / xspacing));\n  };\n\n  p.draw = () => {\n    p.background(0);\n    p.calcWave();\n    p.renderWave();\n    p.backWave();\n  };\n\n  p.calcWave = () => {\n    // Increment theta (try different values for\n    // 'angular velocity' here)\n    theta += 0.02; // For every x value, calculate a y value with sine function\n\n    let x = theta;\n\n    for (let i = 0; i < yvalues.length; i++) {\n      yvalues[i] = Math.sin(x) * amplitude;\n      backvalues[i] = Math.sin(x + back) * amplitude;\n      x += dx;\n    }\n  };\n\n  p.renderWave = () => {\n    p.noStroke();\n    p.fill('blue'); // A simple way to draw the wave with an ellipse at each location\n\n    for (let x = 0; x < yvalues.length; x++) {\n      p.ellipse(x * xspacing, 3 * p.height / 4 + yvalues[x], 16, 16);\n    }\n  };\n\n  p.backWave = () => {\n    p.noStroke();\n    p.fill(255); // A simple way to draw the wave with an ellipse at each location\n\n    for (let x = 0; x < backvalues.length; x++) {\n      waveHeight = 3 * p.height / 4 + backvalues[x];\n      p.ellipse(x * xspacing, waveHeight + backvalues[x], 16, 16);\n      p.ellipse(x * xspacing, waveHeight / 2 + backvalues[x], 32, p.height / 4);\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/samiea.github.io/react-deploy/src/sketches/wave.js"],"names":["wave","p","canvas","xspacing","w","theta","amplitude","period","dx","yvalues","backvalues","back","setup","createCanvas","width","console","log","Math","PI","Array","floor","draw","background","calcWave","renderWave","backWave","x","i","length","sin","noStroke","fill","ellipse","height","waveHeight"],"mappings":"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","sourcesContent":["\r\nexport default function wave(p) {\r\n\r\n  let canvas;\r\n\r\n\r\n  let xspacing = 16; // Distance between each horizontal location\r\n  let w; // Width of entire wave\r\n  let theta = 0.15; // Start angle at 0\r\n  let amplitude = 75.0; // Height of wave\r\n  let period = 500.0; // How many pixels before the wave repeats\r\n  let dx=2; // Value for incrementing x\r\n  let yvalues; // Using an array to store height values for the wave\r\n  let backvalues;\r\n  let back = 2 // back offset\r\n\r\n  p.setup = () => {\r\n    canvas = p.createCanvas(710, 400);\r\n    w = p.width + 16;\r\n    console.log(Math.PI);\r\n    dx = (2*Math.PI / period) * xspacing;\r\n    yvalues = new Array(p.floor(w / xspacing));\r\n    backvalues = new Array(p.floor(w / xspacing));\r\n  }\r\n  p.draw = () => {\r\n    p.background(0);\r\n    p.calcWave();\r\n    p.renderWave();\r\n    p.backWave();\r\n  }\r\n\r\n  p.calcWave= () =>  {\r\n    // Increment theta (try different values for\r\n    // 'angular velocity' here)\r\n    theta += 0.02;\r\n\r\n    // For every x value, calculate a y value with sine function\r\n    let x = theta;\r\n    for (let i = 0; i < yvalues.length; i++) {\r\n\r\n      yvalues[i] = Math.sin(x) * amplitude;\r\n      backvalues[i] = Math.sin(x+back) * amplitude;\r\n      x += dx;\r\n    }\r\n  }\r\n  p.renderWave = () => {\r\n    p.noStroke();\r\n    p.fill('blue');\r\n    // A simple way to draw the wave with an ellipse at each location\r\n    for (let x = 0; x < yvalues.length; x++) {\r\n      p.ellipse(x * xspacing, 3*p.height / 4 + yvalues[x], 16, 16);\r\n\r\n    }\r\n  }\r\n  p.backWave = () => {\r\n    p.noStroke();\r\n    p.fill(255);\r\n    // A simple way to draw the wave with an ellipse at each location\r\n    for (let x = 0; x < backvalues.length; x++) {\r\n      waveHeight = 3*p.height / 4 + backvalues[x]\r\n      p.ellipse((x) * xspacing, waveHeight+ backvalues[x], 16, 16);\r\n      p.ellipse(x * xspacing, waveHeight/2+ backvalues[x], 32,p.height /4);\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}