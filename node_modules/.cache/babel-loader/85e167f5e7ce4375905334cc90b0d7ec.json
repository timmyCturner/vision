{"ast":null,"code":"//these are gonna be the variables for our garbage collection\nvar macro_plastic = [];\nlet newHeight = 0;\n\nclass GarbagePile {\n  constructor(p) {\n    var bubbleHeight = p.height / 1.85;\n    this.xVelocity = p.random(-0.5, 0.5); //cloud movement velocity\n\n    this.x = p.random(50, p.width);\n    this.y = bubbleHeight;\n    this.width = p.random(100, 300);\n    this.height = p.random(50, 100);\n    this.garbageBubbles = [];\n    this.opacity = p.random(400, 500);\n    this.rcolor = p.random(129, 160);\n    this.gcolor = p.random(80, 105);\n    this.bcolor = p.random(70, 110);\n\n    for (let x = 0; x < 25; x++) {\n      this.garbageBubbles[x] = new GarbageBubble(p, this.width, this.height);\n    }\n\n    this.display = function () {\n      // console.log(\"Displaying smog cloud\");\n      p.noStroke();\n      let color = p.color(this.rcolor, this.gcolor, this.bcolor);\n      this.garbageColor = color;\n      this.garbageColor.setAlpha(this.opacity);\n      p.fill(this.garbageColor); //p.ellipse(this.x, this.y, this.width, this.height);\n\n      for (let x = 0; x < this.garbageBubbles.length; x++) {\n        p.ellipse(this.x + this.garbageBubbles[x].xOffset, this.y + this.garbageBubbles[x].yOffset - newHeight, this.garbageBubbles[x].rx, this.garbageBubbles[x].ry);\n        p.curveVertex(this.x + this.garbageBubbles[x].xOffset, this.y + this.garbageBubbles[x].yOffset - newHeight);\n      }\n    };\n\n    this.move = function () {\n      for (let x = 0; x < this.garbageBubbles.length; x++) {\n        if (Math.abs(this.garbageBubbles[x].xOffset) > this.width / 2 - 10) {\n          this.Bubbles[x].xVelocity *= -1;\n        }\n\n        if (Math.abs(this.garbageBubbles[x].yOffset) > this.height / 2 - 10) {\n          this.garbageBubbles[x].yVelocity *= -1;\n        }\n\n        if (this.garbageBubbles[x].rx < 70 || this.garbageBubbles[x].rx > 150) {\n          this.garbageBubbles[x].rxVelocity *= -1;\n        }\n\n        if (this.garbageBubbles[x].ry < 70 || this.garbageBubbles[x].ry > 150) {\n          this.garbageBubbles[x].ryVelocity *= -1;\n        }\n\n        this.garbageBubbles[x].xOffset += this.garbageBubbles[x].xVelocity;\n        this.garbageBubbles[x].yOffset += this.garbageBubbles[x].yVelocity;\n        this.garbageBubbles[x].rx += this.garbageBubbles[x].rxVelocity;\n        this.garbageBubbles[x].ry += this.garbageBubbles[x].ryVelocity;\n      }\n\n      if (this.x > p.width) {\n        this.x = 50;\n      } else if (this.x < 0) {\n        this.x = p.width - 50;\n      }\n\n      this.x += this.xVelocity;\n    };\n  }\n\n}\n\nclass GarbageBubble {\n  constructor(p, xlimit, ylimit) {\n    this.opacity = p.random(150, 200);\n    this.xVelocity = p.random(0.03, 0.07);\n    this.yVelocity = p.random(0.03, 0.07);\n    this.xOffset = p.random(xlimit / 4 * -1, xlimit / 4);\n    this.yOffset = p.random(ylimit / 8 * -1, ylimit / 8);\n    this.rx = p.random(25, 40);\n    this.ry = p.random(25, 40);\n    this.rxVelocity = p.random(-0.01, 0.01);\n    this.ryVelocity = p.random(0.01, 0.02); //let color = p.color(rcolor,gcolor,bcolor);\n    //this.garbageColor = color\n    //this.garbageColor.setAlpha(this.opacity);\n    //p.fill(this.garbageColor);\n  }\n\n}\n/*export function setupSmogClouds(p) {\r\n    for (let i = 0; i < 4; i++) {\r\n        smogClouds[i] = new SmogCloud(p);\r\n    }\r\n}\r\nexport function drawSmogClouds(p) {\r\n    for (var i = 0; i < smogClouds.length; i++) {\r\n        smogClouds[i].move();\r\n        smogClouds[i].display();\r\n    }\r\n}*/\n\n/*class Plastic {\r\n    constructor(p, index) {\r\n        this.START_HEIGHT = p.height * 0.56;\r\n        var ending_height = this.START_HEIGHT - index / 15;\r\n        // var width = this.START_HEIGHT + index / 10;\r\n        this.x = p.random(/*width*/\n\n/* 0, p.width);\r\nthis.y = p.random(this.START_HEIGHT, ending_height);\r\nthis.color = p.random(0, 255);\r\nthis.size = p.random(12, 20);\r\n}\r\nshow(p) {\r\np.noStroke();\r\np.fill(this.color);\r\np.ellipse(this.x, this.y, this.size, this.size);\r\nbasicGarbage(this.x, this.y, this.size, this.size);\r\n}\r\n}\r\n*/\n\n\nexport function setupMacroPlastics(p) {\n  //\n  //set up plastic\n  //\n  for (var i = 0; i < 5; i++) {\n    macro_plastic[i] = new GarbagePile(p, i);\n  }\n}\nexport function drawMacroPlastics(p, macroGrowth2050, current_date) {\n  //calc microplastic\n  //\n  var currentDate = current_date.getFullYear();\n  newHeight = currentDate - 1980;\n\n  if (newHeight < 0) {\n    newHeight = 0;\n  } // console.log(currentDate);\n  //p.background(230, 230, 250);\n  //console.log(microGrowth2050);\n  // console.log(current_date);\n\n\n  for (var i = 0; i < macro_plastic.length; i++) {\n    macro_plastic[i].display(p);\n    macro_plastic[i].move(p);\n  }\n\n  if (macroGrowth2050 != null) {\n    var newSize = -1 * (macroGrowth2050[currentDate - 1950][1] - 367);\n    newSize = newSize / 5 | +5; // console.log(newSize);\n    //add drops\n\n    if (newSize > macro_plastic.length) {\n      for (var j = macro_plastic.length; j < newSize; j++) {\n        macro_plastic[j] = new GarbagePile(p);\n      }\n    } //remove drops\n\n\n    if (newSize < macro_plastic.length) {\n      //console.log('remove');\n      var diff = macro_plastic.length - newSize;\n      macro_plastic = macro_plastic.splice(0, diff);\n    }\n  }\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/src/sketches/macroPlastics.js"],"names":["macro_plastic","newHeight","GarbagePile","constructor","p","bubbleHeight","height","xVelocity","random","x","width","y","garbageBubbles","opacity","rcolor","gcolor","bcolor","GarbageBubble","display","noStroke","color","garbageColor","setAlpha","fill","length","ellipse","xOffset","yOffset","rx","ry","curveVertex","move","Math","abs","Bubbles","yVelocity","rxVelocity","ryVelocity","xlimit","ylimit","setupMacroPlastics","i","drawMacroPlastics","macroGrowth2050","current_date","currentDate","getFullYear","newSize","j","diff","splice"],"mappings":"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","sourcesContent":["//these are gonna be the variables for our garbage collection\r\nvar macro_plastic = [];\r\nlet newHeight = 0;\r\n\r\n\r\nclass GarbagePile {\r\n    constructor(p) {\r\n        var bubbleHeight = p.height / 1.85\r\n        this.xVelocity = p.random(-0.5, 0.5); //cloud movement velocity\r\n        this.x = p.random(50, p.width);\r\n        this.y = bubbleHeight;\r\n        this.width = p.random(100, 300);\r\n        this.height = p.random(50, 100);\r\n        this.garbageBubbles = [];\r\n        this.opacity = p.random(400, 500);\r\n        this.rcolor = p.random(129,160);\r\n        this.gcolor = p.random(80,105);\r\n        this.bcolor = p.random(70,110);\r\n\r\n        for (let x = 0; x < 25; x++) {\r\n            this.garbageBubbles[x] = new GarbageBubble(p, this.width, this.height);\r\n        }\r\n\r\n        this.display = function () {\r\n            // console.log(\"Displaying smog cloud\");\r\n            p.noStroke();\r\n\r\n            let color = p.color(this.rcolor,this.gcolor,this.bcolor);\r\n            this.garbageColor = color\r\n            this.garbageColor.setAlpha(this.opacity);\r\n            p.fill(this.garbageColor)\r\n            //p.ellipse(this.x, this.y, this.width, this.height);\r\n            for (let x = 0; x < this.garbageBubbles.length; x++) {\r\n\r\n                p.ellipse(\r\n                    this.x + this.garbageBubbles[x].xOffset ,\r\n                    this.y + this.garbageBubbles[x].yOffset - newHeight,\r\n                    this.garbageBubbles[x].rx,\r\n                    this.garbageBubbles[x].ry\r\n                );\r\n                p.curveVertex(\r\n                    this.x + this.garbageBubbles[x].xOffset,\r\n                    this.y + this.garbageBubbles[x].yOffset - newHeight\r\n                );\r\n            }\r\n        };\r\n\r\n        this.move = function () {\r\n            for (let x = 0; x < this.garbageBubbles.length; x++) {\r\n                if (Math.abs(this.garbageBubbles[x].xOffset) > this.width / 2 - 10) {\r\n                    this.Bubbles[x].xVelocity *= -1;\r\n                }\r\n                if (Math.abs(this.garbageBubbles[x].yOffset) > this.height / 2 - 10) {\r\n                    this.garbageBubbles[x].yVelocity *= -1;\r\n                }\r\n                if (this.garbageBubbles[x].rx < 70 || this.garbageBubbles[x].rx > 150) {\r\n                    this.garbageBubbles[x].rxVelocity *= -1;\r\n                }\r\n                if (this.garbageBubbles[x].ry < 70 || this.garbageBubbles[x].ry > 150) {\r\n                    this.garbageBubbles[x].ryVelocity *= -1;\r\n                }\r\n\r\n                this.garbageBubbles[x].xOffset += this.garbageBubbles[x].xVelocity;\r\n                this.garbageBubbles[x].yOffset += this.garbageBubbles[x].yVelocity;\r\n\r\n                this.garbageBubbles[x].rx += this.garbageBubbles[x].rxVelocity;\r\n                this.garbageBubbles[x].ry += this.garbageBubbles[x].ryVelocity;\r\n            }\r\n\r\n            if (this.x > p.width) {\r\n                this.x = 50;\r\n            } else if (this.x < 0) {\r\n                this.x = p.width - 50;\r\n            }\r\n            this.x += this.xVelocity;\r\n        };\r\n    }\r\n}\r\n\r\nclass GarbageBubble {\r\n    constructor(p, xlimit, ylimit) {\r\n        this.opacity = p.random(150, 200);\r\n        this.xVelocity = p.random(0.03, 0.07);\r\n        this.yVelocity = p.random(0.03, 0.07);\r\n        this.xOffset = p.random((xlimit / 4) * -1, xlimit / 4);\r\n        this.yOffset = p.random((ylimit / 8) * -1, ylimit / 8);\r\n        this.rx = p.random(25, 40);\r\n        this.ry = p.random(25, 40);\r\n\r\n        this.rxVelocity = p.random(-0.01, 0.01);\r\n        this.ryVelocity = p.random(0.01, 0.02);\r\n\r\n\r\n        //let color = p.color(rcolor,gcolor,bcolor);\r\n        //this.garbageColor = color\r\n        //this.garbageColor.setAlpha(this.opacity);\r\n        //p.fill(this.garbageColor);\r\n    }\r\n}\r\n\r\n/*export function setupSmogClouds(p) {\r\n    for (let i = 0; i < 4; i++) {\r\n        smogClouds[i] = new SmogCloud(p);\r\n    }\r\n}\r\nexport function drawSmogClouds(p) {\r\n    for (var i = 0; i < smogClouds.length; i++) {\r\n        smogClouds[i].move();\r\n        smogClouds[i].display();\r\n    }\r\n}*/\r\n\r\n/*class Plastic {\r\n    constructor(p, index) {\r\n        this.START_HEIGHT = p.height * 0.56;\r\n        var ending_height = this.START_HEIGHT - index / 15;\r\n        // var width = this.START_HEIGHT + index / 10;\r\n        this.x = p.random(/*width*//* 0, p.width);\r\n        this.y = p.random(this.START_HEIGHT, ending_height);\r\n        this.color = p.random(0, 255);\r\n        this.size = p.random(12, 20);\r\n    }\r\n    show(p) {\r\n        p.noStroke();\r\n        p.fill(this.color);\r\n        p.ellipse(this.x, this.y, this.size, this.size);\r\n        basicGarbage(this.x, this.y, this.size, this.size);\r\n    }\r\n}\r\n*/\r\nexport function setupMacroPlastics(p) {\r\n    //\r\n    //set up plastic\r\n    //\r\n    for (var i = 0; i < 5; i++) {\r\n        macro_plastic[i] = new GarbagePile(p, i);\r\n    }\r\n}\r\n\r\nexport function drawMacroPlastics(p, macroGrowth2050, current_date) {\r\n    //calc microplastic\r\n    //\r\n    var currentDate = current_date.getFullYear();\r\n\r\n    newHeight = currentDate - 1980;\r\n    if (newHeight<0){\r\n      newHeight = 0\r\n    }\r\n    // console.log(currentDate);\r\n    //p.background(230, 230, 250);\r\n    //console.log(microGrowth2050);\r\n    // console.log(current_date);\r\n\r\n    for (var i = 0; i < macro_plastic.length; i++) {\r\n        macro_plastic[i].display(p);\r\n        macro_plastic[i].move(p);\r\n    }\r\n\r\n    if (macroGrowth2050 != null) {\r\n        var newSize = -1 * (macroGrowth2050[currentDate - 1950][1] - 367);\r\n\r\n        newSize = (newSize/5)| + 5;\r\n\r\n        // console.log(newSize);\r\n        //add drops\r\n        if (newSize > macro_plastic.length) {\r\n            for (var j = macro_plastic.length; j < newSize; j++) {\r\n                macro_plastic[j] = new GarbagePile(p);\r\n            }\r\n        }\r\n        //remove drops\r\n        if (newSize < macro_plastic.length) {\r\n            //console.log('remove');\r\n            var diff = macro_plastic.length - newSize;\r\n            macro_plastic = macro_plastic.splice(0, diff);\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}