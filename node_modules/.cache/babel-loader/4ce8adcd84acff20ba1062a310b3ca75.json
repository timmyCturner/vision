{"ast":null,"code":"'use strict';\n\nconst Ifd = require('./ifd');\n\nconst dateTimeRegex = /^(\\d{4}):(\\d{2}):(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})$/;\n\nclass TiffIfd extends Ifd {\n  constructor() {\n    super('standard');\n  } // Custom fields\n\n\n  get size() {\n    return this.width * this.height;\n  }\n\n  get width() {\n    return this.imageWidth;\n  }\n\n  get height() {\n    return this.imageLength;\n  }\n\n  get components() {\n    return this.samplesPerPixel;\n  }\n\n  get date() {\n    var date = new Date();\n    var result = dateTimeRegex.exec(this.dateTime);\n    date.setFullYear(result[1], result[2] - 1, result[3]);\n    date.setHours(result[4], result[5], result[6]);\n    return date;\n  } // IFD fields\n\n\n  get newSubfileType() {\n    return this.get(254);\n  }\n\n  get imageWidth() {\n    return this.get(256);\n  }\n\n  get imageLength() {\n    return this.get(257);\n  }\n\n  get bitsPerSample() {\n    return this.get(258);\n  }\n\n  get compression() {\n    return this.get(259) || 1;\n  }\n\n  get type() {\n    return this.get(262);\n  }\n\n  get fillOrder() {\n    return this.get(266) || 1;\n  }\n\n  get documentName() {\n    return this.get(269);\n  }\n\n  get imageDescription() {\n    return this.get(270);\n  }\n\n  get stripOffsets() {\n    return alwaysArray(this.get(273));\n  }\n\n  get orientation() {\n    return this.get(274);\n  }\n\n  get samplesPerPixel() {\n    return this.get(277);\n  }\n\n  get rowsPerStrip() {\n    return this.get(278);\n  }\n\n  get stripByteCounts() {\n    return alwaysArray(this.get(279));\n  }\n\n  get minSampleValue() {\n    return this.get(280) || 0;\n  }\n\n  get maxSampleValue() {\n    return this.get(281) || Math.pow(2, this.bitsPerSample) - 1;\n  }\n\n  get xResolution() {\n    return this.get(282);\n  }\n\n  get yResolution() {\n    return this.get(283);\n  }\n\n  get planarConfiguration() {\n    return this.get(284) || 1;\n  }\n\n  get resolutionUnit() {\n    return this.get(296) || 2;\n  }\n\n  get dateTime() {\n    return this.get(306);\n  }\n\n  get predictor() {\n    return this.get(317) || 1;\n  }\n\n  get sampleFormat() {\n    return this.get(339) || 1;\n  }\n\n  get sMinSampleValue() {\n    return this.get(340) || this.minSampleValue;\n  }\n\n  get sMaxSampleValue() {\n    return this.get(341) || this.maxSampleValue;\n  }\n\n}\n\nfunction alwaysArray(value) {\n  if (typeof value === 'number') return [value];\n  return value;\n}\n\nmodule.exports = TiffIfd;","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/node_modules/fast-jpeg/node_modules/tiff/src/tiffIfd.js"],"names":["Ifd","require","dateTimeRegex","TiffIfd","constructor","size","width","height","imageWidth","imageLength","components","samplesPerPixel","date","Date","result","exec","dateTime","setFullYear","setHours","newSubfileType","get","bitsPerSample","compression","type","fillOrder","documentName","imageDescription","stripOffsets","alwaysArray","orientation","rowsPerStrip","stripByteCounts","minSampleValue","maxSampleValue","Math","pow","xResolution","yResolution","planarConfiguration","resolutionUnit","predictor","sampleFormat","sMinSampleValue","sMaxSampleValue","value","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst Ifd = require('./ifd');\n\nconst dateTimeRegex = /^(\\d{4}):(\\d{2}):(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})$/;\n\nclass TiffIfd extends Ifd {\n    constructor() {\n        super('standard');\n    }\n\n    // Custom fields\n    get size() {\n        return this.width * this.height;\n    }\n    get width() {\n        return this.imageWidth;\n    }\n    get height() {\n        return this.imageLength;\n    }\n    get components() {\n        return this.samplesPerPixel;\n    }\n    get date() {\n        var date = new Date();\n        var result = dateTimeRegex.exec(this.dateTime);\n        date.setFullYear(result[1], result[2] - 1, result[3]);\n        date.setHours(result[4], result[5], result[6]);\n        return date;\n    }\n\n    // IFD fields\n    get newSubfileType() {\n        return this.get(254);\n    }\n    get imageWidth() {\n        return this.get(256);\n    }\n    get imageLength() {\n        return this.get(257);\n    }\n    get bitsPerSample() {\n        return this.get(258);\n    }\n    get compression() {\n        return this.get(259) || 1;\n    }\n    get type() {\n        return this.get(262);\n    }\n    get fillOrder() {\n        return this.get(266) || 1;\n    }\n    get documentName() {\n        return this.get(269);\n    }\n    get imageDescription() {\n        return this.get(270);\n    }\n    get stripOffsets() {\n        return alwaysArray(this.get(273));\n    }\n    get orientation() {\n        return this.get(274);\n    }\n    get samplesPerPixel() {\n        return this.get(277);\n    }\n    get rowsPerStrip() {\n        return this.get(278);\n    }\n    get stripByteCounts() {\n        return alwaysArray(this.get(279));\n    }\n    get minSampleValue() {\n        return this.get(280) || 0;\n    }\n    get maxSampleValue() {\n        return this.get(281) || Math.pow(2, this.bitsPerSample) - 1;\n    }\n    get xResolution() {\n        return this.get(282);\n    }\n    get yResolution() {\n        return this.get(283);\n    }\n    get planarConfiguration() {\n        return this.get(284) || 1;\n    }\n    get resolutionUnit() {\n        return this.get(296) || 2;\n    }\n    get dateTime() {\n        return this.get(306);\n    }\n    get predictor() {\n        return this.get(317) || 1;\n    }\n    get sampleFormat() {\n        return this.get(339) || 1;\n    }\n    get sMinSampleValue() {\n        return this.get(340) || this.minSampleValue;\n    }\n    get sMaxSampleValue() {\n        return this.get(341) || this.maxSampleValue;\n    }\n}\n\nfunction alwaysArray(value) {\n    if (typeof value === 'number') return [value];\n    return value;\n}\n\nmodule.exports = TiffIfd;\n"]},"metadata":{},"sourceType":"script"}