{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kuent\\\\Documents\\\\FinishDipshit\\\\Creative\\\\Ocean-Weather-Visualization\\\\src\\\\OWSonification.js\";\nimport React from \"react\";\nimport * as Tone from \"tone\";\nimport bubbles from \"./sounds/bubbles.wav\";\nimport \"./styles/OWSonification.css\";\n\nclass OWSonification extends React.Component {\n  constructor(props) {\n    super(); //Setting state\n\n    this.state = {\n      //Sounds load states\n      isLoaded: false,\n      //Effects levels\n      distortionLevel: 0,\n      reverbLevel: 0,\n      //Frequencies\n      trebleFreqs: [523.25, 554.37, 587.33, 622.25, 659.25, 698.46, 739.99, 783.99, 830.61, 880.00, 932.33, 987.77],\n      //C5-B5\n      consonantIntervals: [0, 4, 7, 9],\n      //unison, maj third, perf fifth, maj sixth\n      dissonantIntervals: [1, 2, 3, 5, 6, 8, 10, 11],\n      //min second, maj second, min third, perf fourth, tritone, min sixth, min seventh, maj seventh\n      consonanceProbability: 100,\n      //Synth parameters\n      fatSpread: 0,\n      fatDetune: 0,\n      amHarm: 0,\n      //All audio on/off\n      audioState: false,\n      //Audio layer solo states\n      playbackState: false,\n      fatOscState: false,\n      amOscState: false,\n      //Updating\n      updateCount: 0,\n      dataUpdateCount: 0,\n      chromeFlag: 0\n    }; //Binding functions\n\n    this.initialize = this.initialize.bind(this);\n    this.startAudio = this.startAudio.bind(this);\n    this.getNewData = this.getNewData.bind(this);\n    this.recordAudio = this.recordAudio.bind(this);\n  }\n\n  initialize() {\n    //set state and start Tone\n    this.getNewData();\n    Tone.start();\n    Tone.Transport.start(); //set volume\n\n    this.player.volume.value = -100;\n    this.fatOsc.volume.value = -100;\n    this.am.volume.value = -100; //set effects\n\n    this.dist.wet.rampTo(0);\n    this.dist.distortion = 0;\n    this.rev.decay = 12; //set frequency\n\n    this.fatOsc.frequency.rampTo(65.41);\n    this.am.frequency.rampTo(this.state.trebleFreqs[0]);\n    this.am.partialCount = 1;\n  }\n\n  getNewData() {\n    //get current date\n    var currDate = this.props.currentDate.getFullYear(); //index: TEMPERATURE\n\n    if (this.props.temperatureData) {\n      var index = (currDate - 1880) * this.props.temperatureData.length / 140 - 100;\n      index = Math.round(index); //map from -1 - 1 to 0 - 400 using (value - x1) * (y2 - x2) / (y1 - x1) + x2\n\n      var spread = (this.props.temperatureData[index].station + 1) * (400 - 0) / (1 + 1);\n      this.setState({\n        fatSpread: spread\n      });\n    }\n\n    if (this.props.microGrowth2050 && this.props.macroGrowth2050) {\n      //index: MICROPLASTICS\n      index = currDate - 1950; //map from 350 to 250 to 100 to 0 using same formula as above\n\n      var cp = (this.props.microGrowth2050[index][1] - 350) * (0 - 100) / (250 - 350) + 100;\n      this.setState({\n        consonanceProbability: cp\n      }); //index: MACROPLASTICS\n\n      index = currDate - 1950; //map from 400 to 200 to 0 to 30 using same formula as above\n\n      var aH = Math.floor((this.props.macroGrowth2050[index][1] - 400) * (30 - 0) / (200 - 400) + 0);\n      this.setState({\n        amHarm: aH\n      });\n    }\n\n    if (this.props.carbonData) {\n      //index: CARBON\n      // var yearGap = 390;\n      // var monthGap = yearGap / 12;\n      // var year_index = currDate - 2010;\n      // var month_index = this.props.currentDate.getMonth() - 1;\n      // var current_index = yearGap * year_index + month_index * monthGap;\n      // current_index = current_index | 0;\n      //map from 387 to 413 to 0.0 to 1.0 using same formula as above\n      var distLevel = (this.props.carbonData[currDate - 1880].trend - 387) / (413 - 387);\n      this.setState({\n        distortionLevel: distLevel\n      });\n    }\n\n    if (this.props.seaLevelRise) {\n      //index: SEA LEVEL\n      index = currDate - 1880; //map from 0 to 9 to 0 to 1100 using same formula as above\n\n      var detune = 0;\n\n      if (index < 0) {\n        detune = 0;\n      }\n\n      if (currDate > 2013) {\n        detune = this.props.seaLevelRise[2013 - 1880][1] * 1100 / 9;\n      } else {\n        detune = this.props.seaLevelRise[index][1] * 1100 / 9;\n      }\n\n      this.setState({\n        fatDetune: detune\n      });\n    }\n  }\n\n  startAudio() {\n    this.getNewData();\n    this.rev.decay = 12;\n    Tone.Transport.scheduleRepeat(time => {\n      //Refresh data\n      this.getNewData(); //Microplastics: Consonance probability\n\n      var rand = Math.random() * 100; //get random number between 0 and 100\n\n      var intervalIndex = 0;\n\n      if (rand < this.state.consonanceProbability) {\n        intervalIndex = Math.floor(Math.random() * 4);\n        console.log(\"Consonant!\");\n        this.am.frequency.rampTo(this.state.trebleFreqs[this.state.consonantIntervals[intervalIndex]]);\n      } else {\n        intervalIndex = Math.floor(Math.random() * 8);\n        console.log(\"Dissonant!\");\n        this.am.frequency.rampTo(this.state.trebleFreqs[this.state.dissonantIntervals[intervalIndex]]);\n      } //Macroplastics: AM harmonicity\n\n\n      this.am.partialCount = this.state.amHarm; //Temperature: Fat osc spread\n\n      this.fatOsc.spread = this.state.fatSpread; //Sea level rise: Fat osc detune\n\n      this.fatOsc.detune.setValueAtTime(this.state.fatDetune, Tone.now()); //Carbon: Distortion level\n\n      this.dist.distortion = this.state.distortionLevel;\n      this.dist.wet.rampTo(this.state.distortionLevel);\n      this.rev.wet.rampTo(1 - this.state.distortionLevel);\n    }, \"1.5hz\", Tone.now());\n\n    if (this.state.audioState === false) {\n      this.player.start(Tone.now());\n      this.fatOsc.start(Tone.now());\n      this.am.start(Tone.now());\n      this.player.volume.rampTo(-16);\n      this.fatOsc.volume.rampTo(-32);\n      this.am.volume.rampTo(-40);\n      this.setState({\n        audioState: true\n      });\n    } else if (this.state.audioState === true) {\n      this.player.volume.rampTo(-100);\n      this.fatOsc.volume.rampTo(-100);\n      this.am.volume.rampTo(-100);\n      this.player.stop(Tone.now());\n      this.fatOsc.stop(Tone.now());\n      this.am.stop(Tone.now());\n      this.setState({\n        audioState: false\n      });\n    }\n  }\n\n  recordAudio() {\n    this.rec.start();\n    setTimeout(async () => {\n      const recording = await this.rec.stop();\n      const url = URL.createObjectURL(recording);\n      const anchor = document.createElement(\"a\");\n      anchor.download = \"recording.webm\";\n      anchor.href = url;\n      anchor.click();\n    }, 20000);\n  }\n\n  render() {\n    const {\n      isLoaded\n    } = this.state; // console.log(this.state);\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"OWSonification\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      id: \"guide-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 13\n      }\n    }, \"show/hide guide\"), /*#__PURE__*/React.createElement(\"button\", {\n      id: \"play-audio-button\",\n      disabled: !isLoaded,\n      onClick: this.startAudio,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 13\n      }\n    }, \"audio on/off\"), /*#__PURE__*/React.createElement(\"button\", {\n      id: \"record-audio-button\",\n      disabled: this.state.chromeFlag === 0,\n      onClick: this.recordAudio,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 13\n      }\n    }, \"record audio\"));\n  }\n\n  componentDidMount() {\n    if (window !== null && Reflect.has(window, \"MediaRecorder\")) {\n      console.log(\"Recorder available!\");\n      this.rec = new Tone.Recorder();\n      Tone.Destination.connect(this.rec);\n      this.setState({\n        chromeFlag: 1\n      });\n    } //Effects\n\n\n    this.dist = new Tone.Distortion(0).toDestination();\n    this.rev = new Tone.Reverb(1).toDestination(); //Sound sources\n\n    this.buffer = new Tone.ToneAudioBuffer(); //this.buffer.debug = true;\n\n    this.buffer.load(bubbles);\n    this.player = new Tone.Player(this.buffer, () => {\n      // console.log(\"Player ready!\");\n      this.setState({\n        isLoaded: true\n      });\n      this.player.loop = true;\n      this.initialize();\n    }).chain(this.dist, this.rev, Tone.Destination);\n    this.fatOsc = new Tone.FatOscillator(\"C3\", \"sawtooth\", 40).chain(this.dist, this.rev, Tone.Destination);\n    this.am = new Tone.AMOscillator(\"E3\", \"square\", \"sine\").chain(this.dist, this.rev, Tone.Destination);\n    this.fm = new Tone.FMOscillator(\"G3\", \"sine\", \"square\").chain(this.dist, this.rev, Tone.Destination);\n    console.log(\"Mounted!\");\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {// console.log(\"OWSonification Updated\");\n  }\n\n}\n\nexport default OWSonification;","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/src/OWSonification.js"],"names":["React","Tone","bubbles","OWSonification","Component","constructor","props","state","isLoaded","distortionLevel","reverbLevel","trebleFreqs","consonantIntervals","dissonantIntervals","consonanceProbability","fatSpread","fatDetune","amHarm","audioState","playbackState","fatOscState","amOscState","updateCount","dataUpdateCount","chromeFlag","initialize","bind","startAudio","getNewData","recordAudio","start","Transport","player","volume","value","fatOsc","am","dist","wet","rampTo","distortion","rev","decay","frequency","partialCount","currDate","currentDate","getFullYear","temperatureData","index","length","Math","round","spread","station","setState","microGrowth2050","macroGrowth2050","cp","aH","floor","carbonData","distLevel","trend","seaLevelRise","detune","scheduleRepeat","time","rand","random","intervalIndex","console","log","setValueAtTime","now","stop","rec","setTimeout","recording","url","URL","createObjectURL","anchor","document","createElement","download","href","click","render","componentDidMount","window","Reflect","has","Recorder","Destination","connect","Distortion","toDestination","Reverb","buffer","ToneAudioBuffer","load","Player","loop","chain","FatOscillator","AMOscillator","fm","FMOscillator","componentDidUpdate","prevProps","prevState","snapshot"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport * as Tone from \"tone\";\r\nimport bubbles from \"./sounds/bubbles.wav\";\r\nimport \"./styles/OWSonification.css\";\r\nclass OWSonification extends React.Component {\r\n    constructor(props) {\r\n        super();\r\n\r\n        //Setting state\r\n        this.state = { \r\n            //Sounds load states\r\n            isLoaded: false,\r\n\r\n            //Effects levels\r\n            distortionLevel: 0,\r\n            reverbLevel: 0,\r\n\r\n            //Frequencies\r\n            trebleFreqs: [523.25, 554.37, 587.33, 622.25, 659.25, 698.46, 739.99, 783.99, 830.61, 880.00, 932.33, 987.77], //C5-B5\r\n            consonantIntervals: [0, 4, 7, 9], //unison, maj third, perf fifth, maj sixth\r\n            dissonantIntervals: [1, 2, 3, 5, 6, 8, 10, 11], //min second, maj second, min third, perf fourth, tritone, min sixth, min seventh, maj seventh\r\n            consonanceProbability: 100,\r\n\r\n            //Synth parameters\r\n            fatSpread: 0,\r\n            fatDetune: 0,\r\n            amHarm: 0,\r\n\r\n            //All audio on/off\r\n            audioState: false,\r\n\r\n            //Audio layer solo states\r\n            playbackState: false,\r\n            fatOscState: false,\r\n            amOscState: false,\r\n\r\n            //Updating\r\n            updateCount: 0,\r\n            dataUpdateCount: 0,\r\n\r\n            chromeFlag: 0\r\n        };\r\n\r\n        //Binding functions\r\n        this.initialize = this.initialize.bind(this);\r\n        this.startAudio = this.startAudio.bind(this);\r\n        this.getNewData = this.getNewData.bind(this);\r\n        this.recordAudio = this.recordAudio.bind(this);\r\n    }\r\n\r\n    initialize() {\r\n        //set state and start Tone\r\n        this.getNewData();\r\n        Tone.start();\r\n        Tone.Transport.start();\r\n\r\n        //set volume\r\n        this.player.volume.value = -100;\r\n        this.fatOsc.volume.value = -100;\r\n        this.am.volume.value = -100;\r\n\r\n        //set effects\r\n        this.dist.wet.rampTo(0);\r\n        this.dist.distortion = 0;\r\n        this.rev.decay = 12;\r\n\r\n        //set frequency\r\n        this.fatOsc.frequency.rampTo(65.41);\r\n        this.am.frequency.rampTo(this.state.trebleFreqs[0]);\r\n        this.am.partialCount = 1;\r\n\r\n    }\r\n\r\n    getNewData() {\r\n        //get current date\r\n        var currDate = this.props.currentDate.getFullYear();\r\n\r\n        //index: TEMPERATURE\r\n        if (this.props.temperatureData) {\r\n            var index = ((currDate - 1880) * this.props.temperatureData.length) / 140 - 100;\r\n            index = Math.round(index);\r\n\r\n            //map from -1 - 1 to 0 - 400 using (value - x1) * (y2 - x2) / (y1 - x1) + x2\r\n            var spread = (this.props.temperatureData[index].station + 1) * (400 - 0) / (1 + 1);\r\n            this.setState({ fatSpread: spread });\r\n        }\r\n\r\n        if (this.props.microGrowth2050 && this.props.macroGrowth2050) {\r\n            //index: MICROPLASTICS\r\n            index = currDate - 1950;\r\n\r\n            //map from 350 to 250 to 100 to 0 using same formula as above\r\n            var cp = (this.props.microGrowth2050[index][1] - 350) * (0 - 100) / (250 - 350) + 100;\r\n            this.setState({ consonanceProbability: cp });        \r\n\r\n            //index: MACROPLASTICS\r\n            index = currDate - 1950;\r\n\r\n            //map from 400 to 200 to 0 to 30 using same formula as above\r\n            var aH = Math.floor((this.props.macroGrowth2050[index][1] - 400) * (30 - 0) / (200 - 400) + 0);\r\n            this.setState({ amHarm: aH });\r\n        }\r\n\r\n        if (this.props.carbonData) {\r\n            //index: CARBON\r\n            // var yearGap = 390;\r\n            // var monthGap = yearGap / 12;\r\n            // var year_index = currDate - 2010;\r\n            // var month_index = this.props.currentDate.getMonth() - 1;\r\n\r\n            // var current_index = yearGap * year_index + month_index * monthGap;\r\n            // current_index = current_index | 0;\r\n\r\n            //map from 387 to 413 to 0.0 to 1.0 using same formula as above\r\n            var distLevel = (this.props.carbonData[currDate - 1880].trend - 387) / (413 - 387);\r\n            this.setState({ distortionLevel: distLevel });\r\n        }\r\n\r\n        if (this.props.seaLevelRise) {\r\n            //index: SEA LEVEL\r\n            index = currDate - 1880;\r\n\r\n            //map from 0 to 9 to 0 to 1100 using same formula as above\r\n            var detune = 0;\r\n\r\n            if (index < 0) {\r\n                detune = 0;\r\n            }\r\n\r\n            if (currDate > 2013) {\r\n                detune = this.props.seaLevelRise[(2013 - 1880)][1] * 1100 / 9;\r\n            }\r\n            else {\r\n                detune = this.props.seaLevelRise[index][1] * 1100 / 9;\r\n            }\r\n            this.setState({ fatDetune: detune });\r\n        }\r\n    }\r\n\r\n    startAudio() {\r\n        this.getNewData();\r\n        this.rev.decay = 12;\r\n\r\n        Tone.Transport.scheduleRepeat((time) => {\r\n            //Refresh data\r\n            this.getNewData();\r\n\r\n            //Microplastics: Consonance probability\r\n            var rand = Math.random() * 100; //get random number between 0 and 100\r\n\r\n            var intervalIndex = 0;\r\n\r\n            if (rand < this.state.consonanceProbability) {\r\n                intervalIndex = Math.floor(Math.random() * 4);\r\n                console.log(\"Consonant!\");\r\n                this.am.frequency.rampTo(this.state.trebleFreqs[this.state.consonantIntervals[intervalIndex]]);\r\n            }\r\n            else {\r\n                intervalIndex = Math.floor(Math.random() * 8);\r\n                console.log(\"Dissonant!\");\r\n                this.am.frequency.rampTo(this.state.trebleFreqs[this.state.dissonantIntervals[intervalIndex]]);\r\n            }\r\n\r\n            //Macroplastics: AM harmonicity\r\n            this.am.partialCount = this.state.amHarm;\r\n\r\n            //Temperature: Fat osc spread\r\n            this.fatOsc.spread = this.state.fatSpread;\r\n\r\n            //Sea level rise: Fat osc detune\r\n            this.fatOsc.detune.setValueAtTime(this.state.fatDetune, Tone.now());\r\n\r\n            //Carbon: Distortion level\r\n            this.dist.distortion = this.state.distortionLevel;\r\n            this.dist.wet.rampTo(this.state.distortionLevel);\r\n            this.rev.wet.rampTo(1 - this.state.distortionLevel);\r\n        }, \"1.5hz\", Tone.now());\r\n\r\n        if (this.state.audioState === false) {\r\n            this.player.start(Tone.now());\r\n            this.fatOsc.start(Tone.now());\r\n            this.am.start(Tone.now());\r\n\r\n            this.player.volume.rampTo(-16);\r\n            this.fatOsc.volume.rampTo(-32);\r\n            this.am.volume.rampTo(-40);\r\n            this.setState({ audioState: true });\r\n        }\r\n        else if (this.state.audioState === true) {\r\n            this.player.volume.rampTo(-100);\r\n            this.fatOsc.volume.rampTo(-100);\r\n            this.am.volume.rampTo(-100);\r\n\r\n            this.player.stop(Tone.now());\r\n            this.fatOsc.stop(Tone.now());\r\n            this.am.stop(Tone.now());\r\n\r\n            this.setState({ audioState: false });\r\n        }\r\n    }\r\n\r\n    recordAudio() {\r\n        this.rec.start();\r\n\r\n        setTimeout(async () => {\r\n            const recording = await this.rec.stop();\r\n            const url = URL.createObjectURL(recording);\r\n            const anchor = document.createElement(\"a\");\r\n            anchor.download = \"recording.webm\";\r\n            anchor.href = url;\r\n            anchor.click();\r\n        }, 20000);\r\n    }\r\n\r\n    render() {\r\n        const { isLoaded } = this.state;\r\n        // console.log(this.state);\r\n\r\n        return (\r\n            <div className=\"OWSonification\" >\r\n            <button id=\"guide-button\">\r\n            show/hide guide\r\n            </button>\r\n            <button id=\"play-audio-button\" disabled={!isLoaded} onClick={this.startAudio}>\r\n            audio on/off\r\n            </button>\r\n            <button id=\"record-audio-button\" disabled={this.state.chromeFlag === 0} onClick={this.recordAudio}>\r\n            record audio\r\n            </button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        if (window !== null && Reflect.has(window, \"MediaRecorder\")) {\r\n            console.log(\"Recorder available!\");\r\n            this.rec = new Tone.Recorder();\r\n            Tone.Destination.connect(this.rec);\r\n            this.setState({ chromeFlag: 1 });\r\n        }\r\n\r\n        //Effects\r\n        this.dist = new Tone.Distortion(0).toDestination();\r\n\r\n        this.rev = new Tone.Reverb(1).toDestination();\r\n\r\n        //Sound sources\r\n        this.buffer = new Tone.ToneAudioBuffer();\r\n        //this.buffer.debug = true;\r\n        this.buffer.load(bubbles);\r\n\r\n        this.player = new Tone.Player(this.buffer, () => {\r\n            // console.log(\"Player ready!\");\r\n            this.setState({ isLoaded: true });\r\n            this.player.loop = true;\r\n            this.initialize();\r\n        }).chain(this.dist, this.rev, Tone.Destination);\r\n\r\n        this.fatOsc = new Tone.FatOscillator(\"C3\", \"sawtooth\", 40).chain(this.dist, this.rev, Tone.Destination);\r\n\r\n        this.am = new Tone.AMOscillator(\"E3\", \"square\", \"sine\").chain(this.dist, this.rev, Tone.Destination);\r\n\r\n        this.fm = new Tone.FMOscillator(\"G3\", \"sine\", \"square\").chain(this.dist, this.rev, Tone.Destination);\r\n\r\n        console.log(\"Mounted!\");\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        // console.log(\"OWSonification Updated\");\r\n    }\r\n}\r\n\r\nexport default OWSonification\r\n\r\n"]},"metadata":{},"sourceType":"module"}