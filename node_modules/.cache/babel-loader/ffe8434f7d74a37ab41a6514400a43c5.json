{"ast":null,"code":"export default function plastic(p) {\n  let canvas;\n  let xspacing = 16; // Distance between each horizontal location\n\n  let w; // Width of entire wave\n\n  let theta = 0.30; // Start angle at 0\n\n  let amplitude = 50.0; // Height of wave\n\n  let period = 100.0; // How many pixels before the wave repeats\n\n  let dx = 2; // Value for incrementing x\n\n  let yvalues; // Using an array to store height values for the wave\n\n  let backvalues;\n  let back = 2; // back offset\n\n  p.setup = () => {\n    canvas = p.createCanvas(600, 300);\n    w = p.width + 16;\n    dx = 2 * Math.PI / period * xspacing;\n    yvalues = new Array(p.floor(w / xspacing));\n    backvalues = new Array(p.floor(w / xspacing));\n  };\n\n  p.draw = () => {\n    p.background('blue');\n    p.calcWave();\n    p.renderWave();\n    p.backWave();\n  };\n\n  p.calcWave = () => {\n    // Increment theta (try different values for\n    // 'angular velocity' here)\n    theta += 0.02; // For every x value, calculate a y value with sine function\n\n    let x = theta;\n\n    for (let i = 0; i < yvalues.length; i++) {\n      yvalues[i] = Math.sin(x) * amplitude;\n      backvalues[i] = Math.sin(x + back) * amplitude;\n      x += dx;\n    }\n  };\n\n  p.renderWave = () => {\n    p.noStroke();\n    p.fill(37, 207, 122); // A simple way to draw the wave with an ellipse at each location\n\n    for (let x = 0; x < yvalues.length; x++) {\n      var waveHeight = 4 * p.height / 8 + yvalues[x];\n      p.ellipse(x * xspacing, p.height, 64, waveHeight);\n    }\n  };\n\n  p.backWave = () => {\n    p.noStroke();\n    p.fill(19, 149, 244); // A simple way to draw the wave with an ellipse at each location\n\n    for (let x = 0; x < backvalues.length; x++) {\n      var waveHeight = 4 * p.height / 8 + backvalues[x];\n      p.ellipse(x * xspacing, p.height, 64, waveHeight);\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/src/sketches/plastic.js"],"names":["plastic","p","canvas","xspacing","w","theta","amplitude","period","dx","yvalues","backvalues","back","setup","createCanvas","width","Math","PI","Array","floor","draw","background","calcWave","renderWave","backWave","x","i","length","sin","noStroke","fill","waveHeight","height","ellipse"],"mappings":"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","sourcesContent":["\r\nexport default function plastic(p) {\r\n\r\n  let canvas;\r\n\r\n\r\n  let xspacing = 16; // Distance between each horizontal location\r\n  let w; // Width of entire wave\r\n  let theta = 0.30; // Start angle at 0\r\n  let amplitude = 50.0; // Height of wave\r\n  let period = 100.0; // How many pixels before the wave repeats\r\n  let dx=2; // Value for incrementing x\r\n  let yvalues; // Using an array to store height values for the wave\r\n  let backvalues;\r\n  let back = 2 // back offset\r\n\r\n  p.setup = () => {\r\n    canvas = p.createCanvas(600, 300);\r\n    w = p.width + 16;\r\n    dx = (2*Math.PI / period) * xspacing;\r\n    yvalues = new Array(p.floor(w / xspacing));\r\n    backvalues = new Array(p.floor(w / xspacing));\r\n  }\r\n  p.draw = () => {\r\n    p.background('blue');\r\n    p.calcWave();\r\n    p.renderWave();\r\n    p.backWave();\r\n  }\r\n\r\n  p.calcWave= () =>  {\r\n    // Increment theta (try different values for\r\n    // 'angular velocity' here)\r\n    theta += 0.02;\r\n\r\n    // For every x value, calculate a y value with sine function\r\n    let x = theta;\r\n    for (let i = 0; i < yvalues.length; i++) {\r\n\r\n      yvalues[i] = Math.sin(x) * amplitude;\r\n      backvalues[i] = Math.sin(x+back) * amplitude;\r\n      x += dx;\r\n    }\r\n  }\r\n  p.renderWave = () => {\r\n    p.noStroke();\r\n    p.fill(37, 207, 122);\r\n    // A simple way to draw the wave with an ellipse at each location\r\n    for (let x = 0; x < yvalues.length; x++) {\r\n      var waveHeight = 4*p.height / 8 + yvalues[x]\r\n      p.ellipse((x) * xspacing, p.height, 64,waveHeight);\r\n\r\n    }\r\n  }\r\n  p.backWave = () => {\r\n    p.noStroke();\r\n    p.fill(19, 149, 244);\r\n    // A simple way to draw the wave with an ellipse at each location\r\n    for (let x = 0; x < backvalues.length; x++) {\r\n      var waveHeight = 4*p.height / 8 + backvalues[x]\r\n      p.ellipse((x) * xspacing, p.height, 64,waveHeight);\r\n\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}