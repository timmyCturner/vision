{"ast":null,"code":"/**\n * Blurs the image by averaging the neighboring pixels.\n * @memberof Image\n * @instance\n * @param {object} [options]\n * @param {number} [options.radius=1] - Number of pixels around the current pixel to average\n * @return {Image}\n */\nexport default function blurFilter(options = {}) {\n  const {\n    radius = 1\n  } = options;\n\n  if (radius < 1) {\n    throw new Error('radius must be greater than 1');\n  }\n\n  const n = 2 * radius + 1;\n  const kernel = new Array(n);\n\n  for (let i = 0; i < n; i++) {\n    kernel[i] = new Array(n);\n\n    for (let j = 0; j < n; j++) {\n      kernel[i][j] = 1 / (n * n);\n    }\n  }\n\n  return this.convolution(kernel);\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/node_modules/image-js/src/image/filter/blurFilter.js"],"names":["blurFilter","options","radius","Error","n","kernel","Array","i","j","convolution"],"mappings":"AAAA;;;;;;;;AAQA,eAAe,SAASA,UAAT,CAAoBC,OAAO,GAAG,EAA9B,EAAkC;AAC/C,QAAM;AAAEC,IAAAA,MAAM,GAAG;AAAX,MAAiBD,OAAvB;;AAEA,MAAIC,MAAM,GAAG,CAAb,EAAgB;AACd,UAAM,IAAIC,KAAJ,CAAU,+BAAV,CAAN;AACD;;AAED,QAAMC,CAAC,GAAG,IAAIF,MAAJ,GAAa,CAAvB;AACA,QAAMG,MAAM,GAAG,IAAIC,KAAJ,CAAUF,CAAV,CAAf;;AACA,OAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,CAApB,EAAuBG,CAAC,EAAxB,EAA4B;AAC1BF,IAAAA,MAAM,CAACE,CAAD,CAAN,GAAY,IAAID,KAAJ,CAAUF,CAAV,CAAZ;;AACA,SAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,CAApB,EAAuBI,CAAC,EAAxB,EAA4B;AAC1BH,MAAAA,MAAM,CAACE,CAAD,CAAN,CAAUC,CAAV,IAAe,KAAKJ,CAAC,GAAGA,CAAT,CAAf;AACD;AACF;;AAED,SAAO,KAAKK,WAAL,CAAiBJ,MAAjB,CAAP;AACD","sourcesContent":["/**\n * Blurs the image by averaging the neighboring pixels.\n * @memberof Image\n * @instance\n * @param {object} [options]\n * @param {number} [options.radius=1] - Number of pixels around the current pixel to average\n * @return {Image}\n */\nexport default function blurFilter(options = {}) {\n  const { radius = 1 } = options;\n\n  if (radius < 1) {\n    throw new Error('radius must be greater than 1');\n  }\n\n  const n = 2 * radius + 1;\n  const kernel = new Array(n);\n  for (let i = 0; i < n; i++) {\n    kernel[i] = new Array(n);\n    for (let j = 0; j < n; j++) {\n      kernel[i][j] = 1 / (n * n);\n    }\n  }\n\n  return this.convolution(kernel);\n}\n"]},"metadata":{},"sourceType":"module"}