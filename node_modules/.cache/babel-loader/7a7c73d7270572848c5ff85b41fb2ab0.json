{"ast":null,"code":"import { Matrix, solve } from 'ml-matrix';\nimport Kernel from 'ml-kernel';\nimport BaseRegression from 'ml-regression-base';\nconst defaultOptions = {\n  lambda: 0.1,\n  kernelType: 'gaussian',\n  kernelOptions: {},\n  computeCoefficient: false\n}; // Implements the Kernel ridge regression algorithm.\n// http://www.ics.uci.edu/~welling/classnotes/papers_class/Kernel-Ridge.pdf\n\nexport default class KernelRidgeRegression extends BaseRegression {\n  constructor(inputs, outputs, options) {\n    super();\n\n    if (inputs === true) {\n      // reloading model\n      this.alpha = outputs.alpha;\n      this.inputs = outputs.inputs;\n      this.kernelType = outputs.kernelType;\n      this.kernelOptions = outputs.kernelOptions;\n      this.kernel = new Kernel(outputs.kernelType, outputs.kernelOptions);\n    } else {\n      inputs = Matrix.checkMatrix(inputs);\n      options = Object.assign({}, defaultOptions, options);\n      const kernelFunction = new Kernel(options.kernelType, options.kernelOptions);\n      const K = kernelFunction.compute(inputs);\n      const n = inputs.rows;\n      K.add(Matrix.eye(n, n).mul(options.lambda));\n      this.alpha = solve(K, outputs);\n      this.inputs = inputs;\n      this.kernelType = options.kernelType;\n      this.kernelOptions = options.kernelOptions;\n      this.kernel = kernelFunction;\n    }\n  }\n\n  _predict(newInputs) {\n    return this.kernel.compute([newInputs], this.inputs).mmul(this.alpha).getRow(0);\n  }\n\n  toJSON() {\n    return {\n      name: 'kernelRidgeRegression',\n      alpha: this.alpha,\n      inputs: this.inputs,\n      kernelType: this.kernelType,\n      kernelOptions: this.kernelOptions\n    };\n  }\n\n  static load(json) {\n    if (json.name !== 'kernelRidgeRegression') {\n      throw new TypeError('not a KRR model');\n    }\n\n    return new KernelRidgeRegression(true, json);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/node_modules/ml-regression/src/regression/kernel-ridge-regression.js"],"names":["Matrix","solve","Kernel","BaseRegression","defaultOptions","lambda","kernelType","kernelOptions","computeCoefficient","KernelRidgeRegression","constructor","inputs","outputs","options","alpha","kernel","checkMatrix","Object","assign","kernelFunction","K","compute","n","rows","add","eye","mul","_predict","newInputs","mmul","getRow","toJSON","name","load","json","TypeError"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,KAAjB,QAA8B,WAA9B;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,cAAP,MAA2B,oBAA3B;AAEA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,MAAM,EAAE,GADa;AAErBC,EAAAA,UAAU,EAAE,UAFS;AAGrBC,EAAAA,aAAa,EAAE,EAHM;AAIrBC,EAAAA,kBAAkB,EAAE;AAJC,CAAvB,C,CAOA;AACA;;AACA,eAAe,MAAMC,qBAAN,SAAoCN,cAApC,CAAmD;AAChEO,EAAAA,WAAW,CAACC,MAAD,EAASC,OAAT,EAAkBC,OAAlB,EAA2B;AACpC;;AACA,QAAIF,MAAM,KAAK,IAAf,EAAqB;AACnB;AACA,WAAKG,KAAL,GAAaF,OAAO,CAACE,KAArB;AACA,WAAKH,MAAL,GAAcC,OAAO,CAACD,MAAtB;AACA,WAAKL,UAAL,GAAkBM,OAAO,CAACN,UAA1B;AACA,WAAKC,aAAL,GAAqBK,OAAO,CAACL,aAA7B;AACA,WAAKQ,MAAL,GAAc,IAAIb,MAAJ,CAAWU,OAAO,CAACN,UAAnB,EAA+BM,OAAO,CAACL,aAAvC,CAAd;AACD,KAPD,MAOO;AACLI,MAAAA,MAAM,GAAGX,MAAM,CAACgB,WAAP,CAAmBL,MAAnB,CAAT;AACAE,MAAAA,OAAO,GAAGI,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBd,cAAlB,EAAkCS,OAAlC,CAAV;AAEA,YAAMM,cAAc,GAAG,IAAIjB,MAAJ,CACrBW,OAAO,CAACP,UADa,EAErBO,OAAO,CAACN,aAFa,CAAvB;AAIA,YAAMa,CAAC,GAAGD,cAAc,CAACE,OAAf,CAAuBV,MAAvB,CAAV;AACA,YAAMW,CAAC,GAAGX,MAAM,CAACY,IAAjB;AACAH,MAAAA,CAAC,CAACI,GAAF,CAAMxB,MAAM,CAACyB,GAAP,CAAWH,CAAX,EAAcA,CAAd,EAAiBI,GAAjB,CAAqBb,OAAO,CAACR,MAA7B,CAAN;AAEA,WAAKS,KAAL,GAAab,KAAK,CAACmB,CAAD,EAAIR,OAAJ,CAAlB;AACA,WAAKD,MAAL,GAAcA,MAAd;AACA,WAAKL,UAAL,GAAkBO,OAAO,CAACP,UAA1B;AACA,WAAKC,aAAL,GAAqBM,OAAO,CAACN,aAA7B;AACA,WAAKQ,MAAL,GAAcI,cAAd;AACD;AACF;;AAEDQ,EAAAA,QAAQ,CAACC,SAAD,EAAY;AAClB,WAAO,KAAKb,MAAL,CACJM,OADI,CACI,CAACO,SAAD,CADJ,EACiB,KAAKjB,MADtB,EAEJkB,IAFI,CAEC,KAAKf,KAFN,EAGJgB,MAHI,CAGG,CAHH,CAAP;AAID;;AAEDC,EAAAA,MAAM,GAAG;AACP,WAAO;AACLC,MAAAA,IAAI,EAAE,uBADD;AAELlB,MAAAA,KAAK,EAAE,KAAKA,KAFP;AAGLH,MAAAA,MAAM,EAAE,KAAKA,MAHR;AAILL,MAAAA,UAAU,EAAE,KAAKA,UAJZ;AAKLC,MAAAA,aAAa,EAAE,KAAKA;AALf,KAAP;AAOD;;AAED,SAAO0B,IAAP,CAAYC,IAAZ,EAAkB;AAChB,QAAIA,IAAI,CAACF,IAAL,KAAc,uBAAlB,EAA2C;AACzC,YAAM,IAAIG,SAAJ,CAAc,iBAAd,CAAN;AACD;;AACD,WAAO,IAAI1B,qBAAJ,CAA0B,IAA1B,EAAgCyB,IAAhC,CAAP;AACD;;AApD+D","sourcesContent":["import { Matrix, solve } from 'ml-matrix';\nimport Kernel from 'ml-kernel';\nimport BaseRegression from 'ml-regression-base';\n\nconst defaultOptions = {\n  lambda: 0.1,\n  kernelType: 'gaussian',\n  kernelOptions: {},\n  computeCoefficient: false\n};\n\n// Implements the Kernel ridge regression algorithm.\n// http://www.ics.uci.edu/~welling/classnotes/papers_class/Kernel-Ridge.pdf\nexport default class KernelRidgeRegression extends BaseRegression {\n  constructor(inputs, outputs, options) {\n    super();\n    if (inputs === true) {\n      // reloading model\n      this.alpha = outputs.alpha;\n      this.inputs = outputs.inputs;\n      this.kernelType = outputs.kernelType;\n      this.kernelOptions = outputs.kernelOptions;\n      this.kernel = new Kernel(outputs.kernelType, outputs.kernelOptions);\n    } else {\n      inputs = Matrix.checkMatrix(inputs);\n      options = Object.assign({}, defaultOptions, options);\n\n      const kernelFunction = new Kernel(\n        options.kernelType,\n        options.kernelOptions\n      );\n      const K = kernelFunction.compute(inputs);\n      const n = inputs.rows;\n      K.add(Matrix.eye(n, n).mul(options.lambda));\n\n      this.alpha = solve(K, outputs);\n      this.inputs = inputs;\n      this.kernelType = options.kernelType;\n      this.kernelOptions = options.kernelOptions;\n      this.kernel = kernelFunction;\n    }\n  }\n\n  _predict(newInputs) {\n    return this.kernel\n      .compute([newInputs], this.inputs)\n      .mmul(this.alpha)\n      .getRow(0);\n  }\n\n  toJSON() {\n    return {\n      name: 'kernelRidgeRegression',\n      alpha: this.alpha,\n      inputs: this.inputs,\n      kernelType: this.kernelType,\n      kernelOptions: this.kernelOptions\n    };\n  }\n\n  static load(json) {\n    if (json.name !== 'kernelRidgeRegression') {\n      throw new TypeError('not a KRR model');\n    }\n    return new KernelRidgeRegression(true, json);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}