{"ast":null,"code":"//these are gonna be the variables for our garbage collection\nvar macro_plastic = [];\nexport let hoveredMacroPlasticData = {\n  mouseOver: false,\n  value: null\n};\nlet hoveredMacroPlastic = null;\nlet newHeight = 0;\n\nclass GarbagePile {\n  constructor(p, moreHeight) {\n    var bubbleHeight = p.height / 1.85;\n    this.xVelocity = p.random(-0.5, 0.5); //cloud movement velocity\n\n    this.x = p.random(50, p.width);\n    this.y = bubbleHeight - moreHeight;\n    this.width = p.random(100, 300);\n    this.height = p.random(50, 100);\n    this.garbageBubbles = []; //make the garbage hard to see through\n\n    this.opacity = p.random(400, 500);\n    this.size = this.width - this.height; //various reds and greens and browns\n\n    this.rcolor = p.random(129, 160);\n    this.gcolor = p.random(80, 105);\n    this.bcolor = p.random(70, 110);\n\n    for (let x = 0; x < 25; x++) {\n      this.garbageBubbles[x] = new GarbageBubble(p, this.width, this.height);\n    }\n\n    this.display = function () {\n      // console.log(\"Displaying smog cloud\");\n      p.noStroke();\n      let color = p.color(this.rcolor, this.gcolor, this.bcolor);\n      this.garbageColor = color;\n      this.garbageColor.setAlpha(this.opacity);\n      p.fill(this.garbageColor);\n\n      if (hoveredMacroPlasticData.mouseOver) {\n        p.fill(225, 225, 0, 70);\n      } //p.ellipse(this.x, this.y, this.width, this.height);\n\n\n      for (let x = 0; x < this.garbageBubbles.length; x++) {\n        this.garbageBubbles[x].display(this.x, this.y);\n      }\n    };\n\n    this.move = function () {\n      for (let x = 0; x < this.garbageBubbles.length; x++) {\n        /*if (Math.abs(this.garbageBubbles[x].xOffset) > this.width / 2 - 10) {\r\n            this.Bubbles[x].xVelocity *= -1;\r\n        }*/\n        if (Math.abs(this.garbageBubbles[x].yOffset) > this.height / 2 - 10) {\n          this.garbageBubbles[x].yVelocity *= -1;\n        }\n\n        if (this.garbageBubbles[x].rx < 70 || this.garbageBubbles[x].rx > 150) {\n          this.garbageBubbles[x].rxVelocity *= -1;\n        }\n\n        if (this.garbageBubbles[x].ry < 70 || this.garbageBubbles[x].ry > 150) {\n          this.garbageBubbles[x].ryVelocity *= -1;\n        }\n\n        this.garbageBubbles[x].xOffset += this.garbageBubbles[x].xVelocity;\n        this.garbageBubbles[x].yOffset += this.garbageBubbles[x].yVelocity;\n        this.garbageBubbles[x].rx += this.garbageBubbles[x].rxVelocity;\n        this.garbageBubbles[x].ry += this.garbageBubbles[x].ryVelocity;\n        this.garbageBubbles[x].move();\n      }\n\n      if (this.x > p.width) {\n        this.x = 50;\n      } else if (this.x < 0) {\n        this.x = p.width - 50;\n      }\n\n      this.x += this.xVelocity;\n    };\n  }\n\n}\n\nclass GarbageBubble {\n  constructor(p, xlimit, ylimit) {\n    this.opacity = p.random(150, 200);\n    this.xVelocity = p.random(0.03, 0.07);\n    this.yVelocity = p.random(0.03, 0.07);\n    this.xOffset = p.random(xlimit / 4 * -1, xlimit / 4);\n    this.yOffset = p.random(ylimit / 8 * -1, ylimit / 8);\n    this.rx = p.random(25, 40);\n    this.ry = p.random(25, 40);\n    this.size = this.rx;\n    this.rxVelocity = p.random(-0.01, 0.01);\n    this.ryVelocity = p.random(0.00, 0.01);\n\n    this.display = function (x, y) {\n      this.x = x + this.xOffset;\n      this.y = y + this.yOffset - newHeight;\n      p.ellipse(x + this.xOffset, y + this.yOffset - newHeight, this.rx, this.ry);\n      p.curveVertex(x + this.xOffset, y + this.yOffset - newHeight);\n    };\n\n    this.move = function () {\n      // check if mouse is pressed and within range of bubble\n      if (p.mouseIsPressed && p.dist(p.mouseX, p.mouseY, this.x, this.y) < this.size) {\n        hoveredMacroPlasticData.mouseOver = true;\n        hoveredMacroPlastic = this;\n      }\n    };\n  }\n\n}\n\nexport function setupMacroPlastics(p) {\n  //\n  //set up plastic\n  //\n  for (var i = 0; i < 5; i++) {\n    macro_plastic[i] = new GarbagePile(p, i);\n  }\n}\nexport function drawMacroPlastics(p, macroGrowth2050, current_date, seaLevelRise) {\n  //we wil add a new height to the starting height to make our landscape rise and fall\n  // with the date and sea seaLevelRise data\n  var currentDate = current_date.getFullYear();\n  var index = currentDate - 1880;\n\n  if (index < 0) {\n    newHeight = 0;\n  }\n\n  if (currentDate > 2013) {\n    newHeight = seaLevelRise[2013 - 1880][1] * 3 + (currentDate - 2014) / 3;\n  } else {\n    newHeight = seaLevelRise[index][1] * 3;\n  } //calc amount of microplastic\n\n\n  for (var i = 0; i < macro_plastic.length; i++) {\n    if (!hoveredMacroPlasticData.mouseOver) {\n      macro_plastic[i].move(p);\n    } else if (p.dist(p.mouseX, p.mouseY, hoveredMacroPlastic.x, hoveredMacroPlastic.y) > hoveredMacroPlastic.size) {\n      hoveredMacroPlasticData.mouseOver = false;\n    }\n\n    macro_plastic[i].display(p);\n  }\n\n  if (macroGrowth2050 != null) {\n    var newSize = -1 * (macroGrowth2050[currentDate - 1950][1] - 367); //calculate the actual data from the value\n\n    console.log(newSize);\n\n    if (currentDate > 1963) {\n      var num = newSize * (1180000 / 103);\n      hoveredMacroPlasticData.value = num.toFixed(2);\n    } else {\n      var num = (currentDate - 1950) * 100;\n      hoveredMacroPlasticData.value = num.toFixed(2);\n    }\n\n    newSize = Math.round(newSize / 4) + 5;\n    newHeight = Math.round(newSize * 1.25); //add drops\n\n    if (newSize > macro_plastic.length) {\n      for (var j = macro_plastic.length; j < newSize; j++) {\n        macro_plastic[j] = new GarbagePile(p, newHeight);\n      }\n    } //remove drops\n\n\n    if (newSize < macro_plastic.length) {\n      //console.log('remove');\n      var diff = macro_plastic.length - newSize;\n      macro_plastic = macro_plastic.splice(0, diff);\n    }\n  }\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/src/sketches/macroPlastics.js"],"names":["macro_plastic","hoveredMacroPlasticData","mouseOver","value","hoveredMacroPlastic","newHeight","GarbagePile","constructor","p","moreHeight","bubbleHeight","height","xVelocity","random","x","width","y","garbageBubbles","opacity","size","rcolor","gcolor","bcolor","GarbageBubble","display","noStroke","color","garbageColor","setAlpha","fill","length","move","Math","abs","yOffset","yVelocity","rx","rxVelocity","ry","ryVelocity","xOffset","xlimit","ylimit","ellipse","curveVertex","mouseIsPressed","dist","mouseX","mouseY","setupMacroPlastics","i","drawMacroPlastics","macroGrowth2050","current_date","seaLevelRise","currentDate","getFullYear","index","newSize","console","log","num","toFixed","round","j","diff","splice"],"mappings":"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","sourcesContent":["//these are gonna be the variables for our garbage collection\r\nvar macro_plastic = [];\r\n\r\nexport let hoveredMacroPlasticData = { mouseOver: false, value: null };\r\nlet hoveredMacroPlastic = null;\r\nlet newHeight = 0;\r\n\r\nclass GarbagePile {\r\n    constructor(p,moreHeight) {\r\n        var bubbleHeight = p.height / 1.85\r\n        this.xVelocity = p.random(-0.5, 0.5); //cloud movement velocity\r\n        this.x = p.random(50, p.width);\r\n        this.y = bubbleHeight - moreHeight;\r\n        this.width = p.random(100, 300);\r\n        this.height = p.random(50, 100);\r\n        this.garbageBubbles = [];\r\n        //make the garbage hard to see through\r\n        this.opacity = p.random(400, 500);\r\n\r\n        this.size = this.width - this.height;\r\n        //various reds and greens and browns\r\n        this.rcolor = p.random(129,160);\r\n        this.gcolor = p.random(80,105);\r\n        this.bcolor = p.random(70,110);\r\n\r\n        for (let x = 0; x < 25; x++) {\r\n            this.garbageBubbles[x] = new GarbageBubble(p, this.width, this.height);\r\n        }\r\n\r\n        this.display = function () {\r\n            // console.log(\"Displaying smog cloud\");\r\n            p.noStroke();\r\n\r\n            let color = p.color(this.rcolor,this.gcolor,this.bcolor);\r\n            this.garbageColor = color\r\n            this.garbageColor.setAlpha(this.opacity);\r\n            p.fill(this.garbageColor)\r\n\r\n            if (hoveredMacroPlasticData.mouseOver) {\r\n                p.fill(225, 225, 0, 70)\r\n            }\r\n            //p.ellipse(this.x, this.y, this.width, this.height);\r\n            for (let x = 0; x < this.garbageBubbles.length; x++) {\r\n\r\n                this.garbageBubbles[x].display(this.x,this.y)\r\n            }\r\n        };\r\n\r\n        this.move = function () {\r\n\r\n            for (let x = 0; x < this.garbageBubbles.length; x++) {\r\n                /*if (Math.abs(this.garbageBubbles[x].xOffset) > this.width / 2 - 10) {\r\n                    this.Bubbles[x].xVelocity *= -1;\r\n                }*/\r\n                if (Math.abs(this.garbageBubbles[x].yOffset) > this.height / 2 - 10) {\r\n                    this.garbageBubbles[x].yVelocity *= -1;\r\n                }\r\n                if (this.garbageBubbles[x].rx < 70 || this.garbageBubbles[x].rx > 150) {\r\n                    this.garbageBubbles[x].rxVelocity *= -1;\r\n                }\r\n                if (this.garbageBubbles[x].ry < 70 || this.garbageBubbles[x].ry > 150) {\r\n                    this.garbageBubbles[x].ryVelocity *= -1;\r\n                }\r\n\r\n                this.garbageBubbles[x].xOffset += this.garbageBubbles[x].xVelocity;\r\n                this.garbageBubbles[x].yOffset += this.garbageBubbles[x].yVelocity;\r\n\r\n                this.garbageBubbles[x].rx += this.garbageBubbles[x].rxVelocity;\r\n                this.garbageBubbles[x].ry += this.garbageBubbles[x].ryVelocity;\r\n\r\n                this.garbageBubbles[x].move()\r\n            }\r\n\r\n\r\n            if (this.x > p.width) {\r\n                this.x = 50;\r\n            } else if (this.x < 0) {\r\n                this.x = p.width - 50;\r\n            }\r\n            this.x += this.xVelocity;\r\n        };\r\n    }\r\n}\r\n\r\nclass GarbageBubble {\r\n\r\n    constructor(p, xlimit, ylimit) {\r\n        this.opacity = p.random(150, 200);\r\n        this.xVelocity = p.random(0.03, 0.07);\r\n        this.yVelocity = p.random(0.03, 0.07);\r\n        this.xOffset = p.random((xlimit / 4) * -1, xlimit / 4);\r\n        this.yOffset = p.random((ylimit / 8) * -1, ylimit / 8);\r\n        this.rx = p.random(25, 40);\r\n        this.ry = p.random(25, 40);\r\n        this.size = this.rx\r\n        this.rxVelocity = p.random(-0.01, 0.01);\r\n        this.ryVelocity = p.random(0.00, 0.01);\r\n\r\n        this.display = function(x,y){\r\n          this.x = x + this.xOffset\r\n          this.y = y + this.yOffset - newHeight\r\n\r\n          p.ellipse(\r\n              x + this.xOffset ,\r\n              y + this.yOffset - newHeight,\r\n              this.rx,\r\n              this.ry\r\n          );\r\n          p.curveVertex(\r\n              x + this.xOffset,\r\n              y + this.yOffset - newHeight\r\n          );\r\n\r\n        }\r\n\r\n        this.move = function(){// check if mouse is pressed and within range of bubble\r\n\r\n          if (p.mouseIsPressed && p.dist(p.mouseX, p.mouseY, this.x, this.y) < this.size) {\r\n              hoveredMacroPlasticData.mouseOver = true;\r\n              hoveredMacroPlastic = this;\r\n\r\n          }\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nexport function setupMacroPlastics(p) {\r\n    //\r\n    //set up plastic\r\n    //\r\n    for (var i = 0; i < 5; i++) {\r\n        macro_plastic[i] = new GarbagePile(p, i);\r\n    }\r\n}\r\n\r\nexport function drawMacroPlastics(p, macroGrowth2050, current_date, seaLevelRise) {\r\n\r\n    //we wil add a new height to the starting height to make our landscape rise and fall\r\n    // with the date and sea seaLevelRise data\r\n\r\n    var currentDate = current_date.getFullYear();\r\n    var index = currentDate - 1880;\r\n\r\n    if (index<0){\r\n      newHeight = 0\r\n    }\r\n    if (currentDate>2013)\r\n    {\r\n      newHeight = seaLevelRise[(2013-1880)][1]*3+((currentDate-2014))/3\r\n    }\r\n    else{\r\n      newHeight = seaLevelRise[index][1]*3\r\n    }\r\n\r\n    //calc amount of microplastic\r\n\r\n    for (var i = 0; i < macro_plastic.length; i++) {\r\n\r\n        if (!hoveredMacroPlasticData.mouseOver) {\r\n\r\n          macro_plastic[i].move(p);\r\n        }\r\n        else if (p.dist(p.mouseX, p.mouseY, hoveredMacroPlastic.x, hoveredMacroPlastic.y) > hoveredMacroPlastic.size) {\r\n            hoveredMacroPlasticData.mouseOver = false;\r\n        }\r\n        macro_plastic[i].display(p);\r\n\r\n\r\n    }\r\n\r\n    if (macroGrowth2050 != null) {\r\n        var newSize = -1 * (macroGrowth2050[currentDate - 1950][1] - 367);\r\n        //calculate the actual data from the value\r\n        console.log(newSize);\r\n        if (currentDate>1963){\r\n          var num = newSize*(1180000/103)\r\n          hoveredMacroPlasticData.value = num.toFixed(2)\r\n        }\r\n        else {\r\n          var num = (currentDate - 1950)*100\r\n          hoveredMacroPlasticData.value = num.toFixed(2)\r\n        }\r\n\r\n\r\n        newSize = Math.round(newSize/4) + 5;\r\n        newHeight = Math.round(newSize*1.25)\r\n\r\n        //add drops\r\n        if (newSize > macro_plastic.length) {\r\n            for (var j = macro_plastic.length; j < newSize; j++) {\r\n                macro_plastic[j] = new GarbagePile(p,newHeight);\r\n            }\r\n        }\r\n        //remove drops\r\n        if (newSize < macro_plastic.length) {\r\n            //console.log('remove');\r\n            var diff = macro_plastic.length - newSize;\r\n            macro_plastic = macro_plastic.splice(0, diff);\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}