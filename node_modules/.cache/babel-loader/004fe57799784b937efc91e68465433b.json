{"ast":null,"code":"/**\n * @memberof Stack\n * @instance\n * @param {object} [options]\n * @return {Array<Array<number>>}\n */\nexport default function histograms(options) {\n  this.checkProcessable('min', {\n    bitDepth: [8, 16]\n  });\n  let histograms = this[0].getHistograms(options);\n  let histogramLength = histograms[0].length;\n\n  for (let i = 1; i < this.length; i++) {\n    let secondHistograms = this[i].getHistograms(options);\n\n    for (let c = 0; c < histograms.length; c++) {\n      for (let j = 0; j < histogramLength; j++) {\n        histograms[c][j] += secondHistograms[c][j];\n      }\n    }\n  }\n\n  return histograms;\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/node_modules/image-js/src/stack/compute/histograms.js"],"names":["histograms","options","checkProcessable","bitDepth","getHistograms","histogramLength","length","i","secondHistograms","c","j"],"mappings":"AAAA;;;;;;AAMA,eAAe,SAASA,UAAT,CAAoBC,OAApB,EAA6B;AAC1C,OAAKC,gBAAL,CAAsB,KAAtB,EAA6B;AAC3BC,IAAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,EAAJ;AADiB,GAA7B;AAIA,MAAIH,UAAU,GAAG,KAAK,CAAL,EAAQI,aAAR,CAAsBH,OAAtB,CAAjB;AACA,MAAII,eAAe,GAAGL,UAAU,CAAC,CAAD,CAAV,CAAcM,MAApC;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKD,MAAzB,EAAiCC,CAAC,EAAlC,EAAsC;AACpC,QAAIC,gBAAgB,GAAG,KAAKD,CAAL,EAAQH,aAAR,CAAsBH,OAAtB,CAAvB;;AACA,SAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,UAAU,CAACM,MAA/B,EAAuCG,CAAC,EAAxC,EAA4C;AAC1C,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,eAApB,EAAqCK,CAAC,EAAtC,EAA0C;AACxCV,QAAAA,UAAU,CAACS,CAAD,CAAV,CAAcC,CAAd,KAAoBF,gBAAgB,CAACC,CAAD,CAAhB,CAAoBC,CAApB,CAApB;AACD;AACF;AACF;;AACD,SAAOV,UAAP;AACD","sourcesContent":["/**\n * @memberof Stack\n * @instance\n * @param {object} [options]\n * @return {Array<Array<number>>}\n */\nexport default function histograms(options) {\n  this.checkProcessable('min', {\n    bitDepth: [8, 16],\n  });\n\n  let histograms = this[0].getHistograms(options);\n  let histogramLength = histograms[0].length;\n  for (let i = 1; i < this.length; i++) {\n    let secondHistograms = this[i].getHistograms(options);\n    for (let c = 0; c < histograms.length; c++) {\n      for (let j = 0; j < histogramLength; j++) {\n        histograms[c][j] += secondHistograms[c][j];\n      }\n    }\n  }\n  return histograms;\n}\n"]},"metadata":{},"sourceType":"module"}