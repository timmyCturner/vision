{"ast":null,"code":"export default function plastic(p) {\n  let canvas;\n\n  p.setup = () => {\n    canvas = p.createCanvas(600, 300);\n    w = p.width + 16;\n    dx = 2 * Math.PI / period * xspacing;\n    yvalues = new Array(p.floor(w / xspacing));\n    backvalues = new Array(p.floor(w / xspacing));\n    garbageValues = new Array(p.floor(200));\n  };\n\n  p.draw = () => {\n    p.background('blue');\n    p.backWave();\n  }; //\n  //\n  //\n  //hear lies al information on how to create a garbage\n  //\n  //\n  //\n\n  /*p.calcPlastic= () => {\r\n      //console.log(temp_array)\r\n    if (temp_array != null){\r\n      for (let i = 0; i < (temp_array.length/8); i++) {\r\n        //console.log(typeof parseFloat(temp_array[i*8].land));\r\n        var average = parseFloat(temp_array[i*8].station)// + parseFloat(temp_array[i*8].land))/2);\r\n        //console.log(typeof average);\r\n        yvalues[i] = average+1;\r\n        //console.log(average);\r\n      }\r\n      //console.log(typeof temp_array[200]);\r\n    }\r\n  }*/\n  //\n  //\n  //\n  //hear lies al information on how to create a wave\n  //\n  //\n  //\n\n\n  function makeWaves() {\n    //these are all variables for our calc wave\n    let xspacing = 16; // Distance between each horizontal location\n\n    let w; // Width of entire wave\n\n    let theta = 0.15; // Start angle at 0\n\n    let amplitude = 25.0; // Height of wave\n\n    let period = 200.0; // How many pixels before the wave repeats\n\n    let dx = 2; // Value for incrementing x\n\n    let yvalues; // Using an array to store height values for the wave\n\n    let backvalues;\n    let back = 2; // back offset\n\n    p.calcWave = () => {\n      // Increment theta (try different values for\n      // 'angular velocity' here)\n      theta += 0.02; // For every x value, calculate a y value with sine function\n\n      let x = theta;\n\n      for (let i = 0; i < yvalues.length; i++) {\n        yvalues[i] = Math.sin(x) * amplitude;\n        backvalues[i] = Math.sin(x + back) * amplitude;\n        x += dx;\n      }\n    };\n\n    p.renderWave = () => {\n      p.noStroke();\n      p.fill(37, 207, 122); // A simple way to draw the wave with an ellipse at each location\n\n      for (let x = 0; x < yvalues.length; x++) {\n        var waveHeight = 4 * p.height / 8 + yvalues[x];\n        p.ellipse(x * xspacing, p.height, 64, waveHeight);\n      }\n    };\n\n    p.backWave = () => {\n      p.noStroke();\n      p.fill(19, 149, 244); // A simple way to draw the wave with an ellipse at each location\n\n      for (let x = 0; x < backvalues.length; x++) {\n        var waveHeight = 4 * p.height / 8 + backvalues[x];\n        p.ellipse(x * xspacing, p.height, 64, waveHeight);\n      }\n    };\n  }\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/src/sketches/plastic.js"],"names":["plastic","p","canvas","setup","createCanvas","w","width","dx","Math","PI","period","xspacing","yvalues","Array","floor","backvalues","garbageValues","draw","background","backWave","makeWaves","theta","amplitude","back","calcWave","x","i","length","sin","renderWave","noStroke","fill","waveHeight","height","ellipse"],"mappings":"AACA,eAAe,SAASA,OAAT,CAAiBC,CAAjB,EAAoB;AAEjC,MAAIC,MAAJ;;AAIAD,EAAAA,CAAC,CAACE,KAAF,GAAU,MAAM;AACdD,IAAAA,MAAM,GAAGD,CAAC,CAACG,YAAF,CAAe,GAAf,EAAoB,GAApB,CAAT;AACAC,IAAAA,CAAC,GAAGJ,CAAC,CAACK,KAAF,GAAU,EAAd;AACAC,IAAAA,EAAE,GAAI,IAAEC,IAAI,CAACC,EAAP,GAAYC,MAAb,GAAuBC,QAA5B;AACAC,IAAAA,OAAO,GAAG,IAAIC,KAAJ,CAAUZ,CAAC,CAACa,KAAF,CAAQT,CAAC,GAAGM,QAAZ,CAAV,CAAV;AACAI,IAAAA,UAAU,GAAG,IAAIF,KAAJ,CAAUZ,CAAC,CAACa,KAAF,CAAQT,CAAC,GAAGM,QAAZ,CAAV,CAAb;AACAK,IAAAA,aAAa,GAAG,IAAIH,KAAJ,CAAUZ,CAAC,CAACa,KAAF,CAAQ,GAAR,CAAV,CAAhB;AACD,GAPD;;AAQAb,EAAAA,CAAC,CAACgB,IAAF,GAAS,MAAM;AACbhB,IAAAA,CAAC,CAACiB,UAAF,CAAa,MAAb;AAEAjB,IAAAA,CAAC,CAACkB,QAAF;AACD,GAJD,CAdiC,CAmBjC;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;;;;;;;;;;;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,WAASC,SAAT,GAAoB;AAClB;AACA,QAAIT,QAAQ,GAAG,EAAf,CAFkB,CAEC;;AACnB,QAAIN,CAAJ,CAHkB,CAGX;;AACP,QAAIgB,KAAK,GAAG,IAAZ,CAJkB,CAIA;;AAClB,QAAIC,SAAS,GAAG,IAAhB,CALkB,CAKI;;AACtB,QAAIZ,MAAM,GAAG,KAAb,CANkB,CAME;;AACpB,QAAIH,EAAE,GAAC,CAAP,CAPkB,CAOR;;AACV,QAAIK,OAAJ,CARkB,CAQL;;AACb,QAAIG,UAAJ;AACA,QAAIQ,IAAI,GAAG,CAAX,CAVkB,CAUL;;AAEbtB,IAAAA,CAAC,CAACuB,QAAF,GAAY,MAAO;AACjB;AACA;AACAH,MAAAA,KAAK,IAAI,IAAT,CAHiB,CAKjB;;AACA,UAAII,CAAC,GAAGJ,KAAR;;AACA,WAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGd,OAAO,CAACe,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AAEvCd,QAAAA,OAAO,CAACc,CAAD,CAAP,GAAalB,IAAI,CAACoB,GAAL,CAASH,CAAT,IAAcH,SAA3B;AACAP,QAAAA,UAAU,CAACW,CAAD,CAAV,GAAgBlB,IAAI,CAACoB,GAAL,CAASH,CAAC,GAACF,IAAX,IAAmBD,SAAnC;AACAG,QAAAA,CAAC,IAAIlB,EAAL;AACD;AACF,KAbD;;AAcAN,IAAAA,CAAC,CAAC4B,UAAF,GAAe,MAAM;AACnB5B,MAAAA,CAAC,CAAC6B,QAAF;AACA7B,MAAAA,CAAC,CAAC8B,IAAF,CAAO,EAAP,EAAW,GAAX,EAAgB,GAAhB,EAFmB,CAGnB;;AACA,WAAK,IAAIN,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,OAAO,CAACe,MAA5B,EAAoCF,CAAC,EAArC,EAAyC;AACvC,YAAIO,UAAU,GAAG,IAAE/B,CAAC,CAACgC,MAAJ,GAAa,CAAb,GAAiBrB,OAAO,CAACa,CAAD,CAAzC;AACAxB,QAAAA,CAAC,CAACiC,OAAF,CAAWT,CAAD,GAAMd,QAAhB,EAA0BV,CAAC,CAACgC,MAA5B,EAAoC,EAApC,EAAuCD,UAAvC;AAED;AACF,KATD;;AAUA/B,IAAAA,CAAC,CAACkB,QAAF,GAAa,MAAM;AACjBlB,MAAAA,CAAC,CAAC6B,QAAF;AACA7B,MAAAA,CAAC,CAAC8B,IAAF,CAAO,EAAP,EAAW,GAAX,EAAgB,GAAhB,EAFiB,CAGjB;;AACA,WAAK,IAAIN,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,UAAU,CAACY,MAA/B,EAAuCF,CAAC,EAAxC,EAA4C;AAC1C,YAAIO,UAAU,GAAG,IAAE/B,CAAC,CAACgC,MAAJ,GAAa,CAAb,GAAiBlB,UAAU,CAACU,CAAD,CAA5C;AACAxB,QAAAA,CAAC,CAACiC,OAAF,CAAWT,CAAD,GAAMd,QAAhB,EAA0BV,CAAC,CAACgC,MAA5B,EAAoC,EAApC,EAAuCD,UAAvC;AAED;AACF,KATD;AAUD;AAEF","sourcesContent":["\r\nexport default function plastic(p) {\r\n\r\n  let canvas;\r\n\r\n\r\n\r\n  p.setup = () => {\r\n    canvas = p.createCanvas(600, 300);\r\n    w = p.width + 16;\r\n    dx = (2*Math.PI / period) * xspacing;\r\n    yvalues = new Array(p.floor(w / xspacing));\r\n    backvalues = new Array(p.floor(w / xspacing));\r\n    garbageValues = new Array(p.floor(200));\r\n  }\r\n  p.draw = () => {\r\n    p.background('blue');\r\n\r\n    p.backWave();\r\n  }\r\n  //\r\n  //\r\n  //\r\n  //hear lies al information on how to create a garbage\r\n  //\r\n  //\r\n  //\r\n  /*p.calcPlastic= () => {\r\n\r\n    //console.log(temp_array)\r\n    if (temp_array != null){\r\n      for (let i = 0; i < (temp_array.length/8); i++) {\r\n        //console.log(typeof parseFloat(temp_array[i*8].land));\r\n        var average = parseFloat(temp_array[i*8].station)// + parseFloat(temp_array[i*8].land))/2);\r\n        //console.log(typeof average);\r\n        yvalues[i] = average+1;\r\n        //console.log(average);\r\n      }\r\n      //console.log(typeof temp_array[200]);\r\n    }\r\n  }*/\r\n  //\r\n  //\r\n  //\r\n  //hear lies al information on how to create a wave\r\n  //\r\n  //\r\n  //\r\n  function makeWaves(){\r\n    //these are all variables for our calc wave\r\n    let xspacing = 16; // Distance between each horizontal location\r\n    let w; // Width of entire wave\r\n    let theta = 0.15; // Start angle at 0\r\n    let amplitude = 25.0; // Height of wave\r\n    let period = 200.0; // How many pixels before the wave repeats\r\n    let dx=2; // Value for incrementing x\r\n    let yvalues; // Using an array to store height values for the wave\r\n    let backvalues;\r\n    let back = 2 // back offset\r\n\r\n    p.calcWave= () =>  {\r\n      // Increment theta (try different values for\r\n      // 'angular velocity' here)\r\n      theta += 0.02;\r\n\r\n      // For every x value, calculate a y value with sine function\r\n      let x = theta;\r\n      for (let i = 0; i < yvalues.length; i++) {\r\n\r\n        yvalues[i] = Math.sin(x) * amplitude;\r\n        backvalues[i] = Math.sin(x+back) * amplitude;\r\n        x += dx;\r\n      }\r\n    }\r\n    p.renderWave = () => {\r\n      p.noStroke();\r\n      p.fill(37, 207, 122);\r\n      // A simple way to draw the wave with an ellipse at each location\r\n      for (let x = 0; x < yvalues.length; x++) {\r\n        var waveHeight = 4*p.height / 8 + yvalues[x]\r\n        p.ellipse((x) * xspacing, p.height, 64,waveHeight);\r\n\r\n      }\r\n    }\r\n    p.backWave = () => {\r\n      p.noStroke();\r\n      p.fill(19, 149, 244);\r\n      // A simple way to draw the wave with an ellipse at each location\r\n      for (let x = 0; x < backvalues.length; x++) {\r\n        var waveHeight = 4*p.height / 8 + backvalues[x]\r\n        p.ellipse((x) * xspacing, p.height, 64,waveHeight);\r\n\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}