{"ast":null,"code":"import Image from '../image/Image';\nimport { BINARY } from '../image/core/kindNames';\nimport zerosMatrix from './zerosMatrix';\nconst cross = [[0, 0, 1, 0, 0], [0, 0, 1, 0, 0], [1, 1, 1, 1, 1], [0, 0, 1, 0, 0], [0, 0, 1, 0, 0]];\nconst smallCross = [[0, 1, 0], [1, 1, 1], [0, 1, 0]];\n/**\n * Class representing a shape\n * @class Shape\n * @param {object} [options]\n * @param {string} [options.kind='cross'] - Predefined matrix shape, 'cross' or 'smallCross'\n * @param {string} [options.shape] - Value may be 'square', 'rectangle', 'circle', 'ellipse' or 'triangle'\n *                                  The size of the shape will be determined by the size, width and height.\n *                                  A Shape is by default filled.\n * @param {number} [options.size]\n * @param {number} [options.width=options.size] - width of the shape. Must be odd.\n * @param {number} [options.height=options.size] - width of the shape. Must be odd.\n * @param {boolean} [options.filled=true] - If false only the border ot the shape is taken into account.\n */\n\nexport default class Shape {\n  constructor(options = {}) {\n    let {\n      kind = 'cross',\n      shape,\n      size,\n      width,\n      height,\n      filled = true\n    } = options;\n\n    if (size) {\n      width = size;\n      height = size;\n    }\n\n    if (shape) {\n      switch (shape.toLowerCase()) {\n        case 'square':\n        case 'rectangle':\n          this.matrix = rectangle(width, height, {\n            filled\n          });\n          break;\n\n        case 'circle':\n        case 'ellipse':\n          this.matrix = ellipse(width, height, {\n            filled\n          });\n          break;\n\n        case 'triangle':\n          this.matrix = triangle(width, height, {\n            filled\n          });\n          break;\n\n        default:\n          throw new Error(`Shape: unexpected shape: ${shape}`);\n      }\n    } else if (kind) {\n      switch (kind.toLowerCase()) {\n        case 'cross':\n          this.matrix = cross;\n          break;\n\n        case 'smallcross':\n          this.matrix = smallCross;\n          break;\n\n        default:\n          throw new Error(`Shape: unexpected kind: ${kind}`);\n      }\n    } else {\n      throw new Error('Shape: expected a kind or a shape option');\n    }\n\n    this.height = this.matrix.length;\n    this.width = this.matrix[0].length;\n    this.halfHeight = this.height / 2 >> 0;\n    this.halfWidth = this.width / 2 >> 0;\n  }\n  /**\n   * Returns an array of [x,y] points\n   * @return {Array<Array<number>>} - Array of [x,y] points\n   */\n\n\n  getPoints() {\n    let matrix = this.matrix;\n    let points = [];\n\n    for (let y = 0; y < matrix.length; y++) {\n      for (let x = 0; x < matrix[0].length; x++) {\n        if (matrix[y][x]) {\n          points.push([x - this.halfWidth, y - this.halfHeight]);\n        }\n      }\n    }\n\n    return points;\n  }\n  /**\n   * Returns a Mask (1 bit Image) corresponding to this shape.\n   * @return {Image}\n   */\n\n\n  getMask() {\n    let img = new Image(this.width, this.height, {\n      kind: BINARY\n    });\n\n    for (let y = 0; y < this.matrix.length; y++) {\n      for (let x = 0; x < this.matrix[0].length; x++) {\n        if (this.matrix[y][x]) {\n          img.setBitXY(x, y);\n        }\n      }\n    }\n\n    return img;\n  }\n\n}\n\nfunction rectangle(width, height, options) {\n  const matrix = zerosMatrix(height, width);\n\n  if (options.filled) {\n    for (let y = 0; y < height; y++) {\n      for (let x = 0; x < width; x++) {\n        matrix[y][x] = 1;\n      }\n    }\n  } else {\n    for (let y of [0, height - 1]) {\n      for (let x = 0; x < width; x++) {\n        matrix[y][x] = 1;\n      }\n    }\n\n    for (let y = 0; y < height; y++) {\n      for (let x of [0, width - 1]) {\n        matrix[y][x] = 1;\n      }\n    }\n  }\n\n  return matrix;\n}\n\nfunction ellipse(width, height, options) {\n  const matrix = zerosMatrix(height, width, options);\n  let yEven = 1 - height % 2;\n  let xEven = 1 - width % 2;\n  let a = Math.floor((width - 1) / 2); // horizontal ellipse axe\n\n  let b = Math.floor((height - 1) / 2); // vertical ellipse axe\n\n  let a2 = a * a;\n  let b2 = b * b;\n\n  if (options.filled) {\n    for (let y = 0; y <= b; y++) {\n      let shift = Math.floor(Math.sqrt(a2 - a2 * y * y / b2));\n\n      for (let x = a - shift; x <= a; x++) {\n        matrix[b - y][x] = 1;\n        matrix[b + y + yEven][x] = 1;\n        matrix[b - y][width - x - 1] = 1;\n        matrix[b + y + yEven][width - x - 1] = 1;\n      }\n    }\n  } else {\n    for (let y = 0; y <= b; y++) {\n      let shift = Math.floor(Math.sqrt(a2 - a2 * y * y / b2));\n      let x = a - shift;\n      matrix[b - y][x] = 1;\n      matrix[b + y + yEven][x] = 1;\n      matrix[b - y][width - x - 1] = 1;\n      matrix[b + y + yEven][width - x - 1] = 1;\n    }\n\n    for (let x = 0; x <= a; x++) {\n      let shift = Math.floor(Math.sqrt(b2 - b2 * x * x / a2));\n      let y = b - shift;\n      matrix[y][a - x] = 1;\n      matrix[y][a + x + xEven] = 1;\n      matrix[height - y - 1][a - x] = 1;\n      matrix[height - y - 1][a + x + xEven] = 1;\n    }\n  }\n\n  return matrix;\n}\n\nfunction triangle(width, height, options) {\n  if (!options.filled) {\n    throw new Error('Non filled triangle is not implemented');\n  }\n\n  const matrix = zerosMatrix(height, width, options);\n\n  for (let y = 0; y < height; y++) {\n    let shift = Math.floor((1 - y / height) * width / 2);\n\n    for (let x = shift; x < width - shift; x++) {\n      matrix[y][x] = 1;\n    }\n  }\n\n  return matrix;\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/node_modules/image-js/src/util/Shape.js"],"names":["Image","BINARY","zerosMatrix","cross","smallCross","Shape","constructor","options","kind","shape","size","width","height","filled","toLowerCase","matrix","rectangle","ellipse","triangle","Error","length","halfHeight","halfWidth","getPoints","points","y","x","push","getMask","img","setBitXY","yEven","xEven","a","Math","floor","b","a2","b2","shift","sqrt"],"mappings":"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","sourcesContent":["import Image from '../image/Image';\nimport { BINARY } from '../image/core/kindNames';\n\nimport zerosMatrix from './zerosMatrix';\n\nconst cross = [\n  [0, 0, 1, 0, 0],\n  [0, 0, 1, 0, 0],\n  [1, 1, 1, 1, 1],\n  [0, 0, 1, 0, 0],\n  [0, 0, 1, 0, 0],\n];\n\nconst smallCross = [\n  [0, 1, 0],\n  [1, 1, 1],\n  [0, 1, 0],\n];\n\n/**\n * Class representing a shape\n * @class Shape\n * @param {object} [options]\n * @param {string} [options.kind='cross'] - Predefined matrix shape, 'cross' or 'smallCross'\n * @param {string} [options.shape] - Value may be 'square', 'rectangle', 'circle', 'ellipse' or 'triangle'\n *                                  The size of the shape will be determined by the size, width and height.\n *                                  A Shape is by default filled.\n * @param {number} [options.size]\n * @param {number} [options.width=options.size] - width of the shape. Must be odd.\n * @param {number} [options.height=options.size] - width of the shape. Must be odd.\n * @param {boolean} [options.filled=true] - If false only the border ot the shape is taken into account.\n */\nexport default class Shape {\n  constructor(options = {}) {\n    let { kind = 'cross', shape, size, width, height, filled = true } = options;\n    if (size) {\n      width = size;\n      height = size;\n    }\n\n    if (shape) {\n      switch (shape.toLowerCase()) {\n        case 'square':\n        case 'rectangle':\n          this.matrix = rectangle(width, height, { filled });\n          break;\n        case 'circle':\n        case 'ellipse':\n          this.matrix = ellipse(width, height, { filled });\n          break;\n        case 'triangle':\n          this.matrix = triangle(width, height, { filled });\n          break;\n        default:\n          throw new Error(`Shape: unexpected shape: ${shape}`);\n      }\n    } else if (kind) {\n      switch (kind.toLowerCase()) {\n        case 'cross':\n          this.matrix = cross;\n          break;\n        case 'smallcross':\n          this.matrix = smallCross;\n          break;\n        default:\n          throw new Error(`Shape: unexpected kind: ${kind}`);\n      }\n    } else {\n      throw new Error('Shape: expected a kind or a shape option');\n    }\n    this.height = this.matrix.length;\n    this.width = this.matrix[0].length;\n    this.halfHeight = (this.height / 2) >> 0;\n    this.halfWidth = (this.width / 2) >> 0;\n  }\n\n  /**\n   * Returns an array of [x,y] points\n   * @return {Array<Array<number>>} - Array of [x,y] points\n   */\n  getPoints() {\n    let matrix = this.matrix;\n    let points = [];\n    for (let y = 0; y < matrix.length; y++) {\n      for (let x = 0; x < matrix[0].length; x++) {\n        if (matrix[y][x]) {\n          points.push([x - this.halfWidth, y - this.halfHeight]);\n        }\n      }\n    }\n    return points;\n  }\n\n  /**\n   * Returns a Mask (1 bit Image) corresponding to this shape.\n   * @return {Image}\n   */\n  getMask() {\n    let img = new Image(this.width, this.height, {\n      kind: BINARY,\n    });\n    for (let y = 0; y < this.matrix.length; y++) {\n      for (let x = 0; x < this.matrix[0].length; x++) {\n        if (this.matrix[y][x]) {\n          img.setBitXY(x, y);\n        }\n      }\n    }\n    return img;\n  }\n}\n\nfunction rectangle(width, height, options) {\n  const matrix = zerosMatrix(height, width);\n  if (options.filled) {\n    for (let y = 0; y < height; y++) {\n      for (let x = 0; x < width; x++) {\n        matrix[y][x] = 1;\n      }\n    }\n  } else {\n    for (let y of [0, height - 1]) {\n      for (let x = 0; x < width; x++) {\n        matrix[y][x] = 1;\n      }\n    }\n    for (let y = 0; y < height; y++) {\n      for (let x of [0, width - 1]) {\n        matrix[y][x] = 1;\n      }\n    }\n  }\n\n  return matrix;\n}\n\nfunction ellipse(width, height, options) {\n  const matrix = zerosMatrix(height, width, options);\n  let yEven = 1 - (height % 2);\n  let xEven = 1 - (width % 2);\n  let a = Math.floor((width - 1) / 2); // horizontal ellipse axe\n  let b = Math.floor((height - 1) / 2); // vertical ellipse axe\n  let a2 = a * a;\n  let b2 = b * b;\n  if (options.filled) {\n    for (let y = 0; y <= b; y++) {\n      let shift = Math.floor(Math.sqrt(a2 - (a2 * y * y) / b2));\n      for (let x = a - shift; x <= a; x++) {\n        matrix[b - y][x] = 1;\n        matrix[b + y + yEven][x] = 1;\n        matrix[b - y][width - x - 1] = 1;\n        matrix[b + y + yEven][width - x - 1] = 1;\n      }\n    }\n  } else {\n    for (let y = 0; y <= b; y++) {\n      let shift = Math.floor(Math.sqrt(a2 - (a2 * y * y) / b2));\n      let x = a - shift;\n      matrix[b - y][x] = 1;\n      matrix[b + y + yEven][x] = 1;\n      matrix[b - y][width - x - 1] = 1;\n      matrix[b + y + yEven][width - x - 1] = 1;\n    }\n\n    for (let x = 0; x <= a; x++) {\n      let shift = Math.floor(Math.sqrt(b2 - (b2 * x * x) / a2));\n      let y = b - shift;\n      matrix[y][a - x] = 1;\n      matrix[y][a + x + xEven] = 1;\n      matrix[height - y - 1][a - x] = 1;\n      matrix[height - y - 1][a + x + xEven] = 1;\n    }\n  }\n  return matrix;\n}\n\nfunction triangle(width, height, options) {\n  if (!options.filled) {\n    throw new Error('Non filled triangle is not implemented');\n  }\n  const matrix = zerosMatrix(height, width, options);\n  for (let y = 0; y < height; y++) {\n    let shift = Math.floor(((1 - y / height) * width) / 2);\n    for (let x = shift; x < width - shift; x++) {\n      matrix[y][x] = 1;\n    }\n  }\n  return matrix;\n}\n"]},"metadata":{},"sourceType":"module"}