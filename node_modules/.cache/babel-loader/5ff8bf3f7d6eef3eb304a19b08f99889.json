{"ast":null,"code":"import hasOwn from 'has-own';\nimport Image from '../Image';\nlet computedPropertyDescriptor = {\n  configurable: true,\n  enumerable: false,\n  get: undefined\n};\nexport function extendMethod(name, method, options = {}) {\n  let {\n    inPlace = false,\n    returnThis = true,\n    partialArgs = []\n  } = options;\n\n  if (inPlace) {\n    Image.prototype[name] = function (...args) {\n      // remove computed properties\n      this.computed = null;\n      let result = method.apply(this, [...partialArgs, ...args]);\n\n      if (returnThis) {\n        return this;\n      }\n\n      return result;\n    };\n  } else {\n    Image.prototype[name] = function (...args) {\n      return method.apply(this, [...partialArgs, ...args]);\n    };\n  }\n\n  return Image;\n}\nexport function extendProperty(name, method, options = {}) {\n  let {\n    partialArgs = []\n  } = options;\n\n  computedPropertyDescriptor.get = function () {\n    if (this.computed === null) {\n      this.computed = {};\n    } else if (hasOwn(name, this.computed)) {\n      return this.computed[name];\n    }\n\n    let result = method.apply(this, partialArgs);\n    this.computed[name] = result;\n    return result;\n  };\n\n  Object.defineProperty(Image.prototype, name, computedPropertyDescriptor);\n  return Image;\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/node_modules/image-js/src/image/core/extend.js"],"names":["hasOwn","Image","computedPropertyDescriptor","configurable","enumerable","get","undefined","extendMethod","name","method","options","inPlace","returnThis","partialArgs","prototype","args","computed","result","apply","extendProperty","Object","defineProperty"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,SAAnB;AAEA,OAAOC,KAAP,MAAkB,UAAlB;AAEA,IAAIC,0BAA0B,GAAG;AAC/BC,EAAAA,YAAY,EAAE,IADiB;AAE/BC,EAAAA,UAAU,EAAE,KAFmB;AAG/BC,EAAAA,GAAG,EAAEC;AAH0B,CAAjC;AAMA,OAAO,SAASC,YAAT,CAAsBC,IAAtB,EAA4BC,MAA5B,EAAoCC,OAAO,GAAG,EAA9C,EAAkD;AACvD,MAAI;AAAEC,IAAAA,OAAO,GAAG,KAAZ;AAAmBC,IAAAA,UAAU,GAAG,IAAhC;AAAsCC,IAAAA,WAAW,GAAG;AAApD,MAA2DH,OAA/D;;AAEA,MAAIC,OAAJ,EAAa;AACXV,IAAAA,KAAK,CAACa,SAAN,CAAgBN,IAAhB,IAAwB,UAAU,GAAGO,IAAb,EAAmB;AACzC;AACA,WAAKC,QAAL,GAAgB,IAAhB;AACA,UAAIC,MAAM,GAAGR,MAAM,CAACS,KAAP,CAAa,IAAb,EAAmB,CAAC,GAAGL,WAAJ,EAAiB,GAAGE,IAApB,CAAnB,CAAb;;AACA,UAAIH,UAAJ,EAAgB;AACd,eAAO,IAAP;AACD;;AACD,aAAOK,MAAP;AACD,KARD;AASD,GAVD,MAUO;AACLhB,IAAAA,KAAK,CAACa,SAAN,CAAgBN,IAAhB,IAAwB,UAAU,GAAGO,IAAb,EAAmB;AACzC,aAAON,MAAM,CAACS,KAAP,CAAa,IAAb,EAAmB,CAAC,GAAGL,WAAJ,EAAiB,GAAGE,IAApB,CAAnB,CAAP;AACD,KAFD;AAGD;;AACD,SAAOd,KAAP;AACD;AAED,OAAO,SAASkB,cAAT,CAAwBX,IAAxB,EAA8BC,MAA9B,EAAsCC,OAAO,GAAG,EAAhD,EAAoD;AACzD,MAAI;AAAEG,IAAAA,WAAW,GAAG;AAAhB,MAAuBH,OAA3B;;AAEAR,EAAAA,0BAA0B,CAACG,GAA3B,GAAiC,YAAY;AAC3C,QAAI,KAAKW,QAAL,KAAkB,IAAtB,EAA4B;AAC1B,WAAKA,QAAL,GAAgB,EAAhB;AACD,KAFD,MAEO,IAAIhB,MAAM,CAACQ,IAAD,EAAO,KAAKQ,QAAZ,CAAV,EAAiC;AACtC,aAAO,KAAKA,QAAL,CAAcR,IAAd,CAAP;AACD;;AACD,QAAIS,MAAM,GAAGR,MAAM,CAACS,KAAP,CAAa,IAAb,EAAmBL,WAAnB,CAAb;AACA,SAAKG,QAAL,CAAcR,IAAd,IAAsBS,MAAtB;AACA,WAAOA,MAAP;AACD,GATD;;AAUAG,EAAAA,MAAM,CAACC,cAAP,CAAsBpB,KAAK,CAACa,SAA5B,EAAuCN,IAAvC,EAA6CN,0BAA7C;AACA,SAAOD,KAAP;AACD","sourcesContent":["import hasOwn from 'has-own';\n\nimport Image from '../Image';\n\nlet computedPropertyDescriptor = {\n  configurable: true,\n  enumerable: false,\n  get: undefined,\n};\n\nexport function extendMethod(name, method, options = {}) {\n  let { inPlace = false, returnThis = true, partialArgs = [] } = options;\n\n  if (inPlace) {\n    Image.prototype[name] = function (...args) {\n      // remove computed properties\n      this.computed = null;\n      let result = method.apply(this, [...partialArgs, ...args]);\n      if (returnThis) {\n        return this;\n      }\n      return result;\n    };\n  } else {\n    Image.prototype[name] = function (...args) {\n      return method.apply(this, [...partialArgs, ...args]);\n    };\n  }\n  return Image;\n}\n\nexport function extendProperty(name, method, options = {}) {\n  let { partialArgs = [] } = options;\n\n  computedPropertyDescriptor.get = function () {\n    if (this.computed === null) {\n      this.computed = {};\n    } else if (hasOwn(name, this.computed)) {\n      return this.computed[name];\n    }\n    let result = method.apply(this, partialArgs);\n    this.computed[name] = result;\n    return result;\n  };\n  Object.defineProperty(Image.prototype, name, computedPropertyDescriptor);\n  return Image;\n}\n"]},"metadata":{},"sourceType":"module"}