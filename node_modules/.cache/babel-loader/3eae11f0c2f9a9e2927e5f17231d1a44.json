{"ast":null,"code":"/*\n *\n * see http://rsb.info.nih.gov/ij/developer/source/ij/process/AutoThresholder.java.html.\n * Huang: Implements Huang's fuzzy thresholding method: Huang, L-K & Wang, M-J J (1995),\n * \"Image thresholding by minimizing the measure of fuzziness\", Pattern Recognition 28(1): 41-51\n *\n */\nexport default function huang(histogram) {\n  /* Determine the first non-zero bin */\n  let firstBin = 0;\n\n  for (let ih = 0; ih < histogram.length; ih++) {\n    if (histogram[ih] !== 0) {\n      firstBin = ih;\n      break;\n    }\n  }\n  /* Determine the last non-zero bin */\n\n\n  let lastBin = histogram.length - 1;\n\n  for (let ih = histogram.length - 1; ih >= firstBin; ih--) {\n    if (histogram[ih] !== 0) {\n      lastBin = ih;\n      break;\n    }\n  }\n\n  let term = 1.0 / (lastBin - firstBin);\n  let mu0 = new Array(histogram.length);\n  let sumPix = 0;\n  let numPix = 0;\n\n  for (let ih = firstBin; ih < histogram.length; ih++) {\n    sumPix += ih * histogram[ih];\n    numPix += histogram[ih];\n    mu0[ih] = sumPix / numPix;\n  }\n\n  let mu1 = new Array(histogram.length);\n  sumPix = numPix = 0;\n\n  for (let ih = lastBin; ih > 0; ih--) {\n    sumPix += ih * histogram[ih];\n    numPix += histogram[ih];\n    mu1[ih - 1] = sumPix / numPix;\n  }\n  /* Determine the threshold that minimizes the fuzzy entropy*/\n\n\n  let threshold = -1;\n  let minEnt = Number.MAX_VALUE;\n\n  for (let it = 0; it < histogram.length; it++) {\n    let ent = 0;\n    let muX;\n\n    for (let ih = 0; ih <= it; ih++) {\n      /* Equation (4) in Ref. 1 */\n      muX = 1 / (1 + term * Math.abs(ih - mu0[it]));\n\n      if (!(muX < 1e-6 || muX > 0.999999)) {\n        /* Equation (6) & (8) in Ref. 1 */\n        ent += histogram[ih] * (-muX * Math.log(muX) - (1 - muX) * Math.log(1 - muX));\n      }\n    }\n\n    for (let ih = it + 1; ih < histogram.length; ih++) {\n      /* Equation (4) in Ref. 1 */\n      muX = 1 / (1 + term * Math.abs(ih - mu1[it]));\n\n      if (!(muX < 1e-6 || muX > 0.999999)) {\n        /* Equation (6) & (8) in Ref. 1 */\n        ent += histogram[ih] * (-muX * Math.log(muX) - (1 - muX) * Math.log(1 - muX));\n      }\n    }\n\n    if (ent < minEnt) {\n      minEnt = ent;\n      threshold = it;\n    }\n  }\n\n  return threshold;\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/node_modules/image-js/src/image/transform/mask/huang.js"],"names":["huang","histogram","firstBin","ih","length","lastBin","term","mu0","Array","sumPix","numPix","mu1","threshold","minEnt","Number","MAX_VALUE","it","ent","muX","Math","abs","log"],"mappings":"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","sourcesContent":["/*\n *\n * see http://rsb.info.nih.gov/ij/developer/source/ij/process/AutoThresholder.java.html.\n * Huang: Implements Huang's fuzzy thresholding method: Huang, L-K & Wang, M-J J (1995),\n * \"Image thresholding by minimizing the measure of fuzziness\", Pattern Recognition 28(1): 41-51\n *\n */\n\nexport default function huang(histogram) {\n  /* Determine the first non-zero bin */\n  let firstBin = 0;\n  for (let ih = 0; ih < histogram.length; ih++) {\n    if (histogram[ih] !== 0) {\n      firstBin = ih;\n      break;\n    }\n  }\n\n  /* Determine the last non-zero bin */\n  let lastBin = histogram.length - 1;\n  for (let ih = histogram.length - 1; ih >= firstBin; ih--) {\n    if (histogram[ih] !== 0) {\n      lastBin = ih;\n      break;\n    }\n  }\n\n  let term = 1.0 / (lastBin - firstBin);\n  let mu0 = new Array(histogram.length);\n  let sumPix = 0;\n  let numPix = 0;\n  for (let ih = firstBin; ih < histogram.length; ih++) {\n    sumPix += ih * histogram[ih];\n    numPix += histogram[ih];\n    mu0[ih] = sumPix / numPix;\n  }\n\n  let mu1 = new Array(histogram.length);\n  sumPix = numPix = 0;\n  for (let ih = lastBin; ih > 0; ih--) {\n    sumPix += ih * histogram[ih];\n    numPix += histogram[ih];\n    mu1[ih - 1] = sumPix / numPix;\n  }\n\n  /* Determine the threshold that minimizes the fuzzy entropy*/\n  let threshold = -1;\n  let minEnt = Number.MAX_VALUE;\n  for (let it = 0; it < histogram.length; it++) {\n    let ent = 0;\n    let muX;\n    for (let ih = 0; ih <= it; ih++) {\n      /* Equation (4) in Ref. 1 */\n      muX = 1 / (1 + term * Math.abs(ih - mu0[it]));\n      if (!(muX < 1e-6 || muX > 0.999999)) {\n        /* Equation (6) & (8) in Ref. 1 */\n        ent +=\n          histogram[ih] *\n          (-muX * Math.log(muX) - (1 - muX) * Math.log(1 - muX));\n      }\n    }\n\n    for (let ih = it + 1; ih < histogram.length; ih++) {\n      /* Equation (4) in Ref. 1 */\n      muX = 1 / (1 + term * Math.abs(ih - mu1[it]));\n      if (!(muX < 1e-6 || muX > 0.999999)) {\n        /* Equation (6) & (8) in Ref. 1 */\n        ent +=\n          histogram[ih] *\n          (-muX * Math.log(muX) - (1 - muX) * Math.log(1 - muX));\n      }\n    }\n\n    if (ent < minEnt) {\n      minEnt = ent;\n      threshold = it;\n    }\n  }\n  return threshold;\n}\n"]},"metadata":{},"sourceType":"module"}