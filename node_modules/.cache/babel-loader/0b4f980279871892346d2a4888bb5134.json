{"ast":null,"code":"'use strict';\n\nconst {\n  Matrix,\n  MatrixTransposeView\n} = require('ml-matrix');\n\nconst GaussianKernel = require('ml-kernel-gaussian');\n\nconst PolynomialKernel = require('ml-kernel-polynomial');\n\nconst SigmoidKernel = require('ml-kernel-sigmoid');\n\nconst ANOVAKernel = require('./kernels/anova-kernel');\n\nconst CauchyKernel = require('./kernels/cauchy-kernel');\n\nconst ExponentialKernel = require('./kernels/exponential-kernel');\n\nconst HistogramKernel = require('./kernels/histogram-intersection-kernel');\n\nconst LaplacianKernel = require('./kernels/laplacian-kernel');\n\nconst MultiquadraticKernel = require('./kernels/multiquadratic-kernel');\n\nconst RationalKernel = require('./kernels/rational-quadratic-kernel');\n\nconst kernelType = {\n  gaussian: GaussianKernel,\n  rbf: GaussianKernel,\n  polynomial: PolynomialKernel,\n  poly: PolynomialKernel,\n  anova: ANOVAKernel,\n  cauchy: CauchyKernel,\n  exponential: ExponentialKernel,\n  histogram: HistogramKernel,\n  min: HistogramKernel,\n  laplacian: LaplacianKernel,\n  multiquadratic: MultiquadraticKernel,\n  rational: RationalKernel,\n  sigmoid: SigmoidKernel,\n  mlp: SigmoidKernel\n};\n\nclass Kernel {\n  constructor(type, options) {\n    this.kernelType = type;\n    if (type === 'linear') return;\n\n    if (typeof type === 'string') {\n      type = type.toLowerCase();\n      var KernelConstructor = kernelType[type];\n\n      if (KernelConstructor) {\n        this.kernelFunction = new KernelConstructor(options);\n      } else {\n        throw new Error(`unsupported kernel type: ${type}`);\n      }\n    } else if (typeof type === 'object' && typeof type.compute === 'function') {\n      this.kernelFunction = type;\n    } else {\n      throw new TypeError('first argument must be a valid kernel type or instance');\n    }\n  }\n\n  compute(inputs, landmarks) {\n    inputs = Matrix.checkMatrix(inputs);\n\n    if (landmarks === undefined) {\n      landmarks = inputs;\n    } else {\n      landmarks = Matrix.checkMatrix(landmarks);\n    }\n\n    if (this.kernelType === 'linear') {\n      return inputs.mmul(new MatrixTransposeView(landmarks));\n    }\n\n    const kernelMatrix = new Matrix(inputs.rows, landmarks.rows);\n\n    if (inputs === landmarks) {\n      // fast path, matrix is symmetric\n      for (let i = 0; i < inputs.rows; i++) {\n        for (let j = i; j < inputs.rows; j++) {\n          const value = this.kernelFunction.compute(inputs.getRow(i), inputs.getRow(j));\n          kernelMatrix.set(i, j, value);\n          kernelMatrix.set(j, i, value);\n        }\n      }\n    } else {\n      for (let i = 0; i < inputs.rows; i++) {\n        for (let j = 0; j < landmarks.rows; j++) {\n          kernelMatrix.set(i, j, this.kernelFunction.compute(inputs.getRow(i), landmarks.getRow(j)));\n        }\n      }\n    }\n\n    return kernelMatrix;\n  }\n\n}\n\nmodule.exports = Kernel;","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/node_modules/ml-kernel/src/kernel.js"],"names":["Matrix","MatrixTransposeView","require","GaussianKernel","PolynomialKernel","SigmoidKernel","ANOVAKernel","CauchyKernel","ExponentialKernel","HistogramKernel","LaplacianKernel","MultiquadraticKernel","RationalKernel","kernelType","gaussian","rbf","polynomial","poly","anova","cauchy","exponential","histogram","min","laplacian","multiquadratic","rational","sigmoid","mlp","Kernel","constructor","type","options","toLowerCase","KernelConstructor","kernelFunction","Error","compute","TypeError","inputs","landmarks","checkMatrix","undefined","mmul","kernelMatrix","rows","i","j","value","getRow","set","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst { Matrix, MatrixTransposeView } = require('ml-matrix');\nconst GaussianKernel = require('ml-kernel-gaussian');\nconst PolynomialKernel = require('ml-kernel-polynomial');\nconst SigmoidKernel = require('ml-kernel-sigmoid');\n\nconst ANOVAKernel = require('./kernels/anova-kernel');\nconst CauchyKernel = require('./kernels/cauchy-kernel');\nconst ExponentialKernel = require('./kernels/exponential-kernel');\nconst HistogramKernel = require('./kernels/histogram-intersection-kernel');\nconst LaplacianKernel = require('./kernels/laplacian-kernel');\nconst MultiquadraticKernel = require('./kernels/multiquadratic-kernel');\nconst RationalKernel = require('./kernels/rational-quadratic-kernel');\n\nconst kernelType = {\n  gaussian: GaussianKernel,\n  rbf: GaussianKernel,\n  polynomial: PolynomialKernel,\n  poly: PolynomialKernel,\n  anova: ANOVAKernel,\n  cauchy: CauchyKernel,\n  exponential: ExponentialKernel,\n  histogram: HistogramKernel,\n  min: HistogramKernel,\n  laplacian: LaplacianKernel,\n  multiquadratic: MultiquadraticKernel,\n  rational: RationalKernel,\n  sigmoid: SigmoidKernel,\n  mlp: SigmoidKernel\n};\n\nclass Kernel {\n  constructor(type, options) {\n    this.kernelType = type;\n    if (type === 'linear') return;\n\n    if (typeof type === 'string') {\n      type = type.toLowerCase();\n\n      var KernelConstructor = kernelType[type];\n      if (KernelConstructor) {\n        this.kernelFunction = new KernelConstructor(options);\n      } else {\n        throw new Error(`unsupported kernel type: ${type}`);\n      }\n    } else if (typeof type === 'object' && typeof type.compute === 'function') {\n      this.kernelFunction = type;\n    } else {\n      throw new TypeError(\n        'first argument must be a valid kernel type or instance'\n      );\n    }\n  }\n\n  compute(inputs, landmarks) {\n    inputs = Matrix.checkMatrix(inputs);\n    if (landmarks === undefined) {\n      landmarks = inputs;\n    } else {\n      landmarks = Matrix.checkMatrix(landmarks);\n    }\n    if (this.kernelType === 'linear') {\n      return inputs.mmul(new MatrixTransposeView(landmarks));\n    }\n\n    const kernelMatrix = new Matrix(inputs.rows, landmarks.rows);\n    if (inputs === landmarks) {\n      // fast path, matrix is symmetric\n      for (let i = 0; i < inputs.rows; i++) {\n        for (let j = i; j < inputs.rows; j++) {\n          const value = this.kernelFunction.compute(\n            inputs.getRow(i),\n            inputs.getRow(j)\n          );\n          kernelMatrix.set(i, j, value);\n          kernelMatrix.set(j, i, value);\n        }\n      }\n    } else {\n      for (let i = 0; i < inputs.rows; i++) {\n        for (let j = 0; j < landmarks.rows; j++) {\n          kernelMatrix.set(\n            i,\n            j,\n            this.kernelFunction.compute(inputs.getRow(i), landmarks.getRow(j))\n          );\n        }\n      }\n    }\n    return kernelMatrix;\n  }\n}\n\nmodule.exports = Kernel;\n"]},"metadata":{},"sourceType":"script"}