{"ast":null,"code":"/*\n * see https://github.com/fiji/Auto_Threshold/blob/master/src/main/java/fiji/threshold/Auto_Threshold.java\n * Isodata: Ridler, TW & Calvard, S (1978), \"Picture thresholding using an iterative selection method\"\n * IEEE Transactions on Systems, Man and Cybernetics 8: 630-632.\n *\n */\nexport default function isodata(histogram) {\n  let l; // the average grey value of pixels with intensities < g\n\n  let toth; // the the average grey value of pixels with intensities > g\n\n  let totl; // the total the average grey value of pixels with intensities < g\n\n  let h; // the average grey value of pixels with intensities > g\n\n  let g = 0; // threshold value\n\n  for (let i = 1; i < histogram.length; i++) {\n    if (histogram[i] > 0) {\n      g = i + 1;\n      break;\n    }\n  }\n\n  while (true) {\n    l = 0;\n    totl = 0;\n\n    for (let i = 0; i < g; i++) {\n      totl = totl + histogram[i];\n      l = l + histogram[i] * i;\n    }\n\n    h = 0;\n    toth = 0;\n\n    for (let i = g + 1; i < histogram.length; i++) {\n      toth += histogram[i];\n      h += histogram[i] * i;\n    }\n\n    if (totl > 0 && toth > 0) {\n      l /= totl;\n      h /= toth;\n\n      if (g === Math.round((l + h) / 2.0)) {\n        break;\n      }\n    }\n\n    g++;\n\n    if (g > histogram.length - 2) {\n      throw new Error('Threshold not found');\n    }\n  }\n\n  return g;\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/node_modules/image-js/src/image/transform/mask/isodata.js"],"names":["isodata","histogram","l","toth","totl","h","g","i","length","Math","round","Error"],"mappings":"AAAA;;;;;;AAMA,eAAe,SAASA,OAAT,CAAiBC,SAAjB,EAA4B;AACzC,MAAIC,CAAJ,CADyC,CAClC;;AACP,MAAIC,IAAJ,CAFyC,CAE/B;;AACV,MAAIC,IAAJ,CAHyC,CAG/B;;AACV,MAAIC,CAAJ,CAJyC,CAIlC;;AACP,MAAIC,CAAC,GAAG,CAAR,CALyC,CAK9B;;AAEX,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,SAAS,CAACO,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACzC,QAAIN,SAAS,CAACM,CAAD,CAAT,GAAe,CAAnB,EAAsB;AACpBD,MAAAA,CAAC,GAAGC,CAAC,GAAG,CAAR;AACA;AACD;AACF;;AAED,SAAO,IAAP,EAAa;AACXL,IAAAA,CAAC,GAAG,CAAJ;AACAE,IAAAA,IAAI,GAAG,CAAP;;AACA,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,CAApB,EAAuBC,CAAC,EAAxB,EAA4B;AAC1BH,MAAAA,IAAI,GAAGA,IAAI,GAAGH,SAAS,CAACM,CAAD,CAAvB;AACAL,MAAAA,CAAC,GAAGA,CAAC,GAAGD,SAAS,CAACM,CAAD,CAAT,GAAeA,CAAvB;AACD;;AACDF,IAAAA,CAAC,GAAG,CAAJ;AACAF,IAAAA,IAAI,GAAG,CAAP;;AACA,SAAK,IAAII,CAAC,GAAGD,CAAC,GAAG,CAAjB,EAAoBC,CAAC,GAAGN,SAAS,CAACO,MAAlC,EAA0CD,CAAC,EAA3C,EAA+C;AAC7CJ,MAAAA,IAAI,IAAIF,SAAS,CAACM,CAAD,CAAjB;AACAF,MAAAA,CAAC,IAAIJ,SAAS,CAACM,CAAD,CAAT,GAAeA,CAApB;AACD;;AACD,QAAIH,IAAI,GAAG,CAAP,IAAYD,IAAI,GAAG,CAAvB,EAA0B;AACxBD,MAAAA,CAAC,IAAIE,IAAL;AACAC,MAAAA,CAAC,IAAIF,IAAL;;AACA,UAAIG,CAAC,KAAKG,IAAI,CAACC,KAAL,CAAW,CAACR,CAAC,GAAGG,CAAL,IAAU,GAArB,CAAV,EAAqC;AACnC;AACD;AACF;;AACDC,IAAAA,CAAC;;AACD,QAAIA,CAAC,GAAGL,SAAS,CAACO,MAAV,GAAmB,CAA3B,EAA8B;AAC5B,YAAM,IAAIG,KAAJ,CAAU,qBAAV,CAAN;AACD;AACF;;AACD,SAAOL,CAAP;AACD","sourcesContent":["/*\n * see https://github.com/fiji/Auto_Threshold/blob/master/src/main/java/fiji/threshold/Auto_Threshold.java\n * Isodata: Ridler, TW & Calvard, S (1978), \"Picture thresholding using an iterative selection method\"\n * IEEE Transactions on Systems, Man and Cybernetics 8: 630-632.\n *\n */\nexport default function isodata(histogram) {\n  let l; // the average grey value of pixels with intensities < g\n  let toth; // the the average grey value of pixels with intensities > g\n  let totl; // the total the average grey value of pixels with intensities < g\n  let h; // the average grey value of pixels with intensities > g\n  let g = 0; // threshold value\n\n  for (let i = 1; i < histogram.length; i++) {\n    if (histogram[i] > 0) {\n      g = i + 1;\n      break;\n    }\n  }\n\n  while (true) {\n    l = 0;\n    totl = 0;\n    for (let i = 0; i < g; i++) {\n      totl = totl + histogram[i];\n      l = l + histogram[i] * i;\n    }\n    h = 0;\n    toth = 0;\n    for (let i = g + 1; i < histogram.length; i++) {\n      toth += histogram[i];\n      h += histogram[i] * i;\n    }\n    if (totl > 0 && toth > 0) {\n      l /= totl;\n      h /= toth;\n      if (g === Math.round((l + h) / 2.0)) {\n        break;\n      }\n    }\n    g++;\n    if (g > histogram.length - 2) {\n      throw new Error('Threshold not found');\n    }\n  }\n  return g;\n}\n"]},"metadata":{},"sourceType":"module"}