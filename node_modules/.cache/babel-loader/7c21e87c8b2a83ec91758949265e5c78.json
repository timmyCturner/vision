{"ast":null,"code":"export const hoveredBubbleData = {\n  mouseOver: false,\n  value: null\n};\nconst startingNumBubbles = 30; // always starts with 30 bubbles\n\nlet bubbles = []; // holds Bubble objects\n\nlet hoveredBubble = null;\nlet newHeight = 0;\n/**\r\n * Class for bubbles that float up from seabed on display\r\n */\n\nclass Bubble {\n  /**\r\n   * Constructor for bubbles\r\n   *\r\n   * @param {*} p p5 ptr\r\n   * @param {*} xstart Starting x-position\r\n   * @param {*} yspeed Speed of bubble rising to top\r\n   * @param {*} size Size of bubble\r\n   */\n  constructor(p, xstart, yspeed, size, value) {\n    // class for bubble objects\n    this.x = xstart; // starting x-position of bubbles\n\n    this.y = p.random(p.height - 150, p.height * 1.5); // starting y-position of bubbles under height\n\n    this.size = size;\n    this.yspeed = yspeed;\n    this.degree = 0;\n    this.value = value; // current value to date from data\n\n    /**\r\n     * Display bubble on sketch\r\n     */\n\n    this.display = function () {\n      p.fill(255, 255, 255, 50);\n      p.ellipse(this.x, this.y, size);\n      p.fill(255, 255, 255, 180);\n      p.ellipse(this.x + 0.2 * size, this.y - 0.2 * size, 0.2 * size); // bubble detail\n\n      if (hoveredBubbleData.mouseOver) {\n        p.fill(225, 225, 0, 70);\n        p.ellipse(this.x, this.y, size + 10);\n      }\n    };\n    /**\r\n     * Behavior for bubble movement\r\n     */\n\n\n    this.move = function () {\n      this.x += p.cos(p.radians(this.degree)); // base x-shifts on cosine waves\n\n      this.y += this.yspeed; // bubble movement speed\n\n      if (this.y < p.height * 0.63 - newHeight) {\n        this.y = p.height;\n      } // check if mouse is pressed and within range of bubble\n\n\n      if (p.mouseIsPressed && p.dist(p.mouseX, p.mouseY, this.x, this.y) < size) {\n        hoveredBubbleData.mouseOver = true;\n        hoveredBubble = this;\n      }\n\n      this.degree += p.random(0.0, 1.0);\n    };\n    /**\r\n     * Set bubble speed corresponding to data\r\n     *\r\n     * @param {*} new_speed Re-initialize bubble speed\r\n     */\n\n\n    this.setSpeed = function (new_speed) {\n      this.yspeed = new_speed;\n    };\n  }\n\n}\n/**\r\n * Set up methane bubbles on canvas\r\n *\r\n * @param {*} p p5 ptr\r\n */\n\n\nexport function setupMethaneBubbles(p, methaneData) {\n  // initialize at beginning with bubbles from starting date\n  // const startingValue = methaneData.arr[0].average;\n  // const AVG_END = methaneData.arr[methaneData.arr.length - 1].average;\n  // const diff = AVG_END - startingValue; // diff btwn curr avg and start avg\n  for (let i = 0; i < startingNumBubbles; i++) {\n    // initialize the bubbles\n    bubbles[i] = new Bubble(p, p.random(0, p.width), p.random(-1.5, -1), p.random(10, 20), null);\n  }\n}\n/**\r\n * Draw methane bubbles on sketch\r\n *\r\n * @param {*} p p5 ptr\r\n * @param {*} methaneData Object containing map and arr\r\n * @param {*} currentDate Current date stored in state\r\n */\n\nexport function drawMethaneBubbles(p, methaneData, currentDate, seaLevelRise) {\n  if (methaneData.arr) {\n    // create the bubbles and call their methods\n    // data starts on/after 1983\n    const yyyy = new Intl.DateTimeFormat(\"en\", {\n      year: \"numeric\"\n    }).format(currentDate);\n    const mm = new Intl.DateTimeFormat(\"en\", {\n      month: \"2-digit\"\n    }).format(currentDate);\n    const dd = \"01\";\n    const date = `${yyyy}-${mm}-${dd}`;\n    const startingValue = methaneData.arr[0].average;\n    const startingDate = methaneData.arr[0].date;\n    const startingYearEstValue = 1116; // retrieved from https://www.methanelevels.org/\n    // we will add a new height to the starting height to make our landscape rise and fall\n    // with the date and sea seaLevelRise data\n\n    const currentYear = currentDate.getFullYear();\n    const index = currentYear - 1880;\n\n    if (index < 0) {\n      newHeight = 0;\n    }\n\n    if (currentYear > 2013) {\n      newHeight = seaLevelRise[2013 - 1880][1] * 3 + (currentYear - 2014) / 3;\n    } else {\n      newHeight = seaLevelRise[index][1] * 3;\n    } // make more bubbles and modify speed\n\n\n    for (let i = 0; i < bubbles.length; i++) {\n      // check if mouse is hovering over bubble\n      // if not, move normally\n      // otherwise, compare current mouse position with initially selected bubble position\n      if (!hoveredBubbleData.mouseOver) {\n        bubbles[i].move();\n      } else if (p.dist(p.mouseX, p.mouseY, hoveredBubble.x, hoveredBubble.y) > hoveredBubble.size) {\n        hoveredBubbleData.mouseOver = false;\n      }\n\n      bubbles[i].display();\n    } // update bubble here\n\n\n    if (methaneData.map.get(date)) {\n      const currentValue = methaneData.map.get(date);\n      const diff = currentValue - startingValue; // diff btwn curr avg and start avg\n\n      const ratio = startingValue / currentValue;\n      const newNumBubbles = parseInt(diff + startingNumBubbles); // update current data value\n      //console.log(currentValue);\n\n      hoveredBubbleData.value = currentValue;\n\n      if (newNumBubbles > bubbles.length) {\n        for (let j = bubbles.length; j < newNumBubbles; j++) {\n          bubbles[j] = new Bubble(p, p.random(0, p.width), p.random(-2 / ratio * 2, -1.5 / ratio * 2), p.random(10, 20), currentValue);\n        }\n      }\n\n      if (newNumBubbles < bubbles.length) {\n        bubbles = bubbles.splice(bubbles.length - newNumBubbles);\n      }\n    } else {\n      // set to null if no data available\n      // console.log(`Current year: ${currentYear} (${typeof(currentYear)}), Starting year: ${startingYear} (${typeof(startingYear)})`)\n      hoveredBubbleData.value = `${(startingYearEstValue + (currentYear - 1950) * 10).toString()} (approximation)`; // use last known date (make sure to set first date to earliest and vice versa)\n      // 1. get the date where data starts for api\n\n      const new_yyyy = startingDate.substring(0, 4);\n      const new_mm = startingDate.substring(5, startingDate.length).padStart(2, \"0\");\n      const new_dd = \"01\";\n      const new_date = new Date(`${new_yyyy}-${new_mm}-${new_dd}`); // 2. update bubble here (could be < lower bound or > upper bound)\n\n      if (new_date >= currentDate) {\n        bubbles = bubbles.splice(0, startingNumBubbles);\n\n        for (let i = 0; i < startingNumBubbles; i++) {\n          bubbles[i].setSpeed(p.random(-1.5, -1));\n        }\n      }\n    }\n  }\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/src/sketches/methaneBubbles.js"],"names":["hoveredBubbleData","mouseOver","value","startingNumBubbles","bubbles","hoveredBubble","newHeight","Bubble","constructor","p","xstart","yspeed","size","x","y","random","height","degree","display","fill","ellipse","move","cos","radians","mouseIsPressed","dist","mouseX","mouseY","setSpeed","new_speed","setupMethaneBubbles","methaneData","i","width","drawMethaneBubbles","currentDate","seaLevelRise","arr","yyyy","Intl","DateTimeFormat","year","format","mm","month","dd","date","startingValue","average","startingDate","startingYearEstValue","currentYear","getFullYear","index","length","map","get","currentValue","diff","ratio","newNumBubbles","parseInt","j","splice","toString","new_yyyy","substring","new_mm","padStart","new_dd","new_date","Date"],"mappings":"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","sourcesContent":["export const hoveredBubbleData = { mouseOver: false, value: null };\r\nconst startingNumBubbles = 30; // always starts with 30 bubbles\r\nlet bubbles = []; // holds Bubble objects\r\nlet hoveredBubble = null;\r\nlet newHeight = 0;\r\n/**\r\n * Class for bubbles that float up from seabed on display\r\n */\r\nclass Bubble {\r\n    /**\r\n     * Constructor for bubbles\r\n     *\r\n     * @param {*} p p5 ptr\r\n     * @param {*} xstart Starting x-position\r\n     * @param {*} yspeed Speed of bubble rising to top\r\n     * @param {*} size Size of bubble\r\n     */\r\n    constructor(p, xstart, yspeed, size, value) {\r\n        // class for bubble objects\r\n        this.x = xstart; // starting x-position of bubbles\r\n        this.y = p.random(p.height - 150, p.height * 1.5); // starting y-position of bubbles under height\r\n        this.size = size;\r\n        this.yspeed = yspeed;\r\n        this.degree = 0;\r\n        this.value = value; // current value to date from data\r\n\r\n        /**\r\n         * Display bubble on sketch\r\n         */\r\n        this.display = function () {\r\n            p.fill(255, 255, 255, 50);\r\n            p.ellipse(this.x, this.y, size);\r\n            p.fill(255, 255, 255, 180);\r\n            p.ellipse(this.x + 0.2 * size, this.y - 0.2 * size, 0.2 * size); // bubble detail\r\n            if (hoveredBubbleData.mouseOver) {\r\n                p.fill(225, 225, 0, 70);\r\n                p.ellipse(this.x, this.y, size + 10);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Behavior for bubble movement\r\n         */\r\n        this.move = function () {\r\n            this.x += p.cos(p.radians(this.degree)); // base x-shifts on cosine waves\r\n            this.y += this.yspeed; // bubble movement speed\r\n            if (this.y < p.height * 0.63 - newHeight) {\r\n                this.y = p.height;\r\n            }\r\n\r\n            // check if mouse is pressed and within range of bubble\r\n            if (p.mouseIsPressed && p.dist(p.mouseX, p.mouseY, this.x, this.y) < size) {\r\n                hoveredBubbleData.mouseOver = true;\r\n                hoveredBubble = this;\r\n            }\r\n\r\n            this.degree += p.random(0.0, 1.0);\r\n        };\r\n\r\n        /**\r\n         * Set bubble speed corresponding to data\r\n         *\r\n         * @param {*} new_speed Re-initialize bubble speed\r\n         */\r\n        this.setSpeed = function (new_speed) {\r\n            this.yspeed = new_speed;\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * Set up methane bubbles on canvas\r\n *\r\n * @param {*} p p5 ptr\r\n */\r\nexport function setupMethaneBubbles(p, methaneData) {\r\n    // initialize at beginning with bubbles from starting date\r\n    // const startingValue = methaneData.arr[0].average;\r\n    // const AVG_END = methaneData.arr[methaneData.arr.length - 1].average;\r\n    // const diff = AVG_END - startingValue; // diff btwn curr avg and start avg\r\n\r\n    for (let i = 0; i < startingNumBubbles; i++) {\r\n        // initialize the bubbles\r\n        bubbles[i] = new Bubble(p, p.random(0, p.width), p.random(-1.5, -1), p.random(10, 20), null);\r\n    }\r\n}\r\n\r\n/**\r\n * Draw methane bubbles on sketch\r\n *\r\n * @param {*} p p5 ptr\r\n * @param {*} methaneData Object containing map and arr\r\n * @param {*} currentDate Current date stored in state\r\n */\r\nexport function drawMethaneBubbles(p, methaneData, currentDate, seaLevelRise) {\r\n    if (methaneData.arr) {\r\n        // create the bubbles and call their methods\r\n        // data starts on/after 1983\r\n        const yyyy = new Intl.DateTimeFormat(\"en\", { year: \"numeric\" }).format(\r\n            currentDate\r\n        );\r\n        const mm = new Intl.DateTimeFormat(\"en\", { month: \"2-digit\" }).format(\r\n            currentDate\r\n        );\r\n        const dd = \"01\";\r\n        const date = `${yyyy}-${mm}-${dd}`;\r\n        const startingValue = methaneData.arr[0].average;\r\n        const startingDate = methaneData.arr[0].date;\r\n        const startingYearEstValue = 1116; // retrieved from https://www.methanelevels.org/\r\n    \r\n        // we will add a new height to the starting height to make our landscape rise and fall\r\n        // with the date and sea seaLevelRise data\r\n        const currentYear = currentDate.getFullYear();\r\n        const index = currentYear - 1880;\r\n    \r\n        if (index < 0) {\r\n            newHeight = 0;\r\n        }\r\n        if (currentYear > 2013) {\r\n            newHeight = seaLevelRise[2013 - 1880][1] * 3 + (currentYear - 2014) / 3;\r\n        } else {\r\n            newHeight = seaLevelRise[index][1] * 3;\r\n        }\r\n    \r\n        // make more bubbles and modify speed\r\n        for (let i = 0; i < bubbles.length; i++) {\r\n            // check if mouse is hovering over bubble\r\n            // if not, move normally\r\n            // otherwise, compare current mouse position with initially selected bubble position\r\n            if (!hoveredBubbleData.mouseOver) {\r\n                bubbles[i].move();\r\n            } else if (\r\n                p.dist(p.mouseX, p.mouseY, hoveredBubble.x, hoveredBubble.y) >\r\n                hoveredBubble.size\r\n            ) {\r\n                hoveredBubbleData.mouseOver = false;\r\n            }\r\n            bubbles[i].display();\r\n        }\r\n    \r\n        // update bubble here\r\n        if (methaneData.map.get(date)) {\r\n            const currentValue = methaneData.map.get(date);\r\n            const diff = currentValue - startingValue; // diff btwn curr avg and start avg\r\n            const ratio = startingValue / currentValue;\r\n            const newNumBubbles = parseInt(diff + startingNumBubbles);\r\n    \r\n            // update current data value\r\n            //console.log(currentValue);\r\n            hoveredBubbleData.value = currentValue;\r\n    \r\n            if (newNumBubbles > bubbles.length) {\r\n                for (let j = bubbles.length; j < newNumBubbles; j++) {\r\n                    bubbles[j] = new Bubble(\r\n                        p,\r\n                        p.random(0, p.width),\r\n                        p.random((-2 / ratio) * 2, (-1.5 / ratio) * 2),\r\n                        p.random(10, 20),\r\n                        currentValue\r\n                    );\r\n                }\r\n            }\r\n    \r\n            if (newNumBubbles < bubbles.length) {\r\n                bubbles = bubbles.splice(bubbles.length - newNumBubbles);\r\n            }\r\n        } else {\r\n            // set to null if no data available\r\n            // console.log(`Current year: ${currentYear} (${typeof(currentYear)}), Starting year: ${startingYear} (${typeof(startingYear)})`)\r\n            hoveredBubbleData.value = `${(\r\n                startingYearEstValue +\r\n                (currentYear - 1950) * 10\r\n            ).toString()} (approximation)`;\r\n    \r\n            // use last known date (make sure to set first date to earliest and vice versa)\r\n            // 1. get the date where data starts for api\r\n            const new_yyyy = startingDate.substring(0, 4);\r\n            const new_mm = startingDate\r\n                .substring(5, startingDate.length)\r\n                .padStart(2, \"0\");\r\n            const new_dd = \"01\";\r\n            const new_date = new Date(`${new_yyyy}-${new_mm}-${new_dd}`);\r\n    \r\n            // 2. update bubble here (could be < lower bound or > upper bound)\r\n            if (new_date >= currentDate) {\r\n                bubbles = bubbles.splice(0, startingNumBubbles);\r\n                for (let i = 0; i < startingNumBubbles; i++) {\r\n                    bubbles[i].setSpeed(p.random(-1.5, -1));\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}