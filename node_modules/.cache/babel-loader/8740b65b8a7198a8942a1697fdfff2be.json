{"ast":null,"code":"export default function microPlastic(p) {\n  let canvas;\n  let context; //these are gonna be the variables for our garbage collection\n\n  let plastic_array_2050;\n  let current_plastic_values;\n  let plastic_image_array = new Array(p.floor(200));\n  var image; //these are all variables for our wave function\n\n  let xspacing = 16; // Distance between each horizontal location\n\n  let w; // Width of entire wave\n\n  let theta = 0.15; // Start angle at 0\n\n  let amplitude = 25.0; // Height of wave\n\n  let period = 200.0; // How many pixels before the wave repeats\n\n  let dx = 2; // Value for incrementing x\n\n  let yvalues; // Using an array to store height values for the wave\n\n  let backvalues;\n  let back = 2; // back offset\n\n  p.setup = () => {\n    canvas = p.createCanvas(600, 300); //set up wave\n\n    w = p.width + 16;\n    dx = 2 * Math.PI / period * xspacing;\n    yvalues = new Array(p.floor(w / xspacing));\n    backvalues = new Array(p.floor(w / xspacing)); //set up plastic\n    //load plastic images into Array\n  };\n\n  p.draw = () => {\n    p.background('blue'); //do wave\n\n    p.calcWave();\n    p.renderWave();\n    p.backWave();\n  }; //\n  //\n  //\n  //hear lies al information on how to create plastic\n  //\n  //\n  //\n\n\n  p.calcPlastic = () => {\n    //console.log(temp_array)\n    if (plastic_array_2050 != null) {\n      for (let i = 0; i < plastic_array_2050.length; i++) {\n        var amount = parseFloat(plastic_array_2050[i].station); // + parseFloat(temp_array[i*8].land))/2);\n        //console.log(typeof average);\n\n        current_plastic_values[i] = 400 - amount; //console.log(average);\n      } //console.log(typeof temp_array[200]);\n\n    }\n  }; //\n  //\n  //\n  //hear lies al information on how to create a wave\n  //\n  //\n  //\n\n\n  p.calcWave = () => {\n    // Increment theta (try different values for\n    // 'angular velocity' here)\n    theta += 0.02; // For every x value, calculate a y value with sine function\n\n    let x = theta;\n\n    for (let i = 0; i < yvalues.length; i++) {\n      yvalues[i] = Math.sin(x) * amplitude;\n      backvalues[i] = Math.sin(x + back) * amplitude;\n      x += dx;\n    }\n  };\n\n  p.renderWave = () => {\n    p.noStroke();\n    p.fill(37, 207, 122); // A simple way to draw the wave with an ellipse at each location\n\n    for (let x = 0; x < yvalues.length; x++) {\n      var waveHeight = 4 * p.height / 8 + yvalues[x];\n      p.ellipse(x * xspacing, p.height, 64, waveHeight);\n    }\n  };\n\n  p.backWave = () => {\n    p.noStroke();\n    p.fill(19, 149, 244); // A simple way to draw the wave with an ellipse at each location\n\n    for (let x = 0; x < backvalues.length; x++) {\n      var waveHeight = 4 * p.height / 8 + backvalues[x];\n      p.ellipse(x * xspacing, p.height, 64, waveHeight);\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/src/sketches/microPlastic.js"],"names":["microPlastic","p","canvas","context","plastic_array_2050","current_plastic_values","plastic_image_array","Array","floor","image","xspacing","w","theta","amplitude","period","dx","yvalues","backvalues","back","setup","createCanvas","width","Math","PI","draw","background","calcWave","renderWave","backWave","calcPlastic","i","length","amount","parseFloat","station","x","sin","noStroke","fill","waveHeight","height","ellipse"],"mappings":"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","sourcesContent":["\r\nexport default function microPlastic(p) {\r\n\r\n  let canvas;\r\n  let context;\r\n\r\n  //these are gonna be the variables for our garbage collection\r\n  let plastic_array_2050;\r\n  let current_plastic_values;\r\n  let plastic_image_array = new Array(p.floor(200));\r\n  var image;\r\n\r\n  //these are all variables for our wave function\r\n  let xspacing = 16; // Distance between each horizontal location\r\n  let w; // Width of entire wave\r\n  let theta = 0.15; // Start angle at 0\r\n  let amplitude = 25.0; // Height of wave\r\n  let period = 200.0; // How many pixels before the wave repeats\r\n  let dx=2; // Value for incrementing x\r\n  let yvalues; // Using an array to store height values for the wave\r\n  let backvalues;\r\n  let back = 2 // back offset\r\n\r\n\r\n\r\n  p.setup = () => {\r\n    canvas = p.createCanvas(600, 300);\r\n    //set up wave\r\n    w = p.width + 16;\r\n    dx = (2*Math.PI / period) * xspacing;\r\n    yvalues = new Array(p.floor(w / xspacing));\r\n    backvalues = new Array(p.floor(w / xspacing));\r\n\r\n\r\n    //set up plastic\r\n\r\n    //load plastic images into Array\r\n\r\n\r\n  }\r\n  p.draw = () => {\r\n    p.background('blue');\r\n\r\n    //do wave\r\n    p.calcWave();\r\n    p.renderWave();\r\n    p.backWave();\r\n  }\r\n  //\r\n  //\r\n  //\r\n  //hear lies al information on how to create plastic\r\n  //\r\n  //\r\n  //\r\n\r\n\r\n\r\n\r\n\r\n  \r\n  p.calcPlastic= () => {\r\n\r\n    //console.log(temp_array)\r\n    if (plastic_array_2050 != null){\r\n      for (let i = 0; i < (plastic_array_2050.length); i++) {\r\n\r\n        var amount = parseFloat(plastic_array_2050[i].station)// + parseFloat(temp_array[i*8].land))/2);\r\n        //console.log(typeof average);\r\n        current_plastic_values[i] = 400-amount;\r\n        //console.log(average);\r\n      }\r\n      //console.log(typeof temp_array[200]);\r\n    }\r\n  }\r\n  //\r\n  //\r\n  //\r\n  //hear lies al information on how to create a wave\r\n  //\r\n  //\r\n  //\r\n  p.calcWave= () =>  {\r\n    // Increment theta (try different values for\r\n    // 'angular velocity' here)\r\n    theta += 0.02;\r\n\r\n    // For every x value, calculate a y value with sine function\r\n    let x = theta;\r\n    for (let i = 0; i < yvalues.length; i++) {\r\n\r\n      yvalues[i] = Math.sin(x) * amplitude;\r\n      backvalues[i] = Math.sin(x+back) * amplitude;\r\n      x += dx;\r\n    }\r\n  }\r\n  p.renderWave = () => {\r\n    p.noStroke();\r\n    p.fill(37, 207, 122);\r\n    // A simple way to draw the wave with an ellipse at each location\r\n    for (let x = 0; x < yvalues.length; x++) {\r\n      var waveHeight = 4*p.height / 8 + yvalues[x]\r\n      p.ellipse((x) * xspacing, p.height, 64,waveHeight);\r\n\r\n    }\r\n  }\r\n  p.backWave = () => {\r\n    p.noStroke();\r\n    p.fill(19, 149, 244);\r\n    // A simple way to draw the wave with an ellipse at each location\r\n    for (let x = 0; x < backvalues.length; x++) {\r\n      var waveHeight = 4*p.height / 8 + backvalues[x]\r\n      p.ellipse((x) * xspacing, p.height, 64,waveHeight);\r\n\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}