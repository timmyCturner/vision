{"ast":null,"code":"/*\n * The method is present in: Otsu, N (1979), \"A threshold selection method from gray-level histograms\", IEEE Trans. Sys., Man., Cyber. 9: 62-66\n * The Otsu implementation is based on: https://en.wikipedia.org/wiki/Otsu's_method\n * @param histogram - the histogram of the image\n * @returns {number} - the threshold\n */\nexport default function otsu(histogramCounts, total) {\n  let sumB = 0;\n  let wB = 0;\n  let maximum = 0;\n  let level = 0;\n  let sum1 = 0;\n\n  for (let i = 0; i < histogramCounts.length; i++) {\n    sum1 += i * histogramCounts[i];\n  }\n\n  for (let ii = 0; ii < histogramCounts.length; ii++) {\n    wB = wB + histogramCounts[ii];\n    const wF = total - wB;\n\n    if (wB === 0 || wF === 0) {\n      continue;\n    }\n\n    sumB = sumB + ii * histogramCounts[ii];\n    const mF = (sum1 - sumB) / wF;\n    const between = wB * wF * (sumB / wB - mF) * (sumB / wB - mF);\n\n    if (between >= maximum) {\n      level = ii;\n      maximum = between;\n    }\n  }\n\n  return level;\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/node_modules/image-js/src/image/transform/mask/otsu.js"],"names":["otsu","histogramCounts","total","sumB","wB","maximum","level","sum1","i","length","ii","wF","mF","between"],"mappings":"AAAA;;;;;;AAOA,eAAe,SAASA,IAAT,CAAcC,eAAd,EAA+BC,KAA/B,EAAsC;AACnD,MAAIC,IAAI,GAAG,CAAX;AACA,MAAIC,EAAE,GAAG,CAAT;AACA,MAAIC,OAAO,GAAG,CAAd;AACA,MAAIC,KAAK,GAAG,CAAZ;AAEA,MAAIC,IAAI,GAAG,CAAX;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,eAAe,CAACQ,MAApC,EAA4CD,CAAC,EAA7C,EAAiD;AAC/CD,IAAAA,IAAI,IAAIC,CAAC,GAAGP,eAAe,CAACO,CAAD,CAA3B;AACD;;AAED,OAAK,IAAIE,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGT,eAAe,CAACQ,MAAtC,EAA8CC,EAAE,EAAhD,EAAoD;AAClDN,IAAAA,EAAE,GAAGA,EAAE,GAAGH,eAAe,CAACS,EAAD,CAAzB;AACA,UAAMC,EAAE,GAAGT,KAAK,GAAGE,EAAnB;;AACA,QAAIA,EAAE,KAAK,CAAP,IAAYO,EAAE,KAAK,CAAvB,EAA0B;AACxB;AACD;;AACDR,IAAAA,IAAI,GAAGA,IAAI,GAAGO,EAAE,GAAGT,eAAe,CAACS,EAAD,CAAlC;AACA,UAAME,EAAE,GAAG,CAACL,IAAI,GAAGJ,IAAR,IAAgBQ,EAA3B;AACA,UAAME,OAAO,GAAGT,EAAE,GAAGO,EAAL,IAAWR,IAAI,GAAGC,EAAP,GAAYQ,EAAvB,KAA8BT,IAAI,GAAGC,EAAP,GAAYQ,EAA1C,CAAhB;;AACA,QAAIC,OAAO,IAAIR,OAAf,EAAwB;AACtBC,MAAAA,KAAK,GAAGI,EAAR;AACAL,MAAAA,OAAO,GAAGQ,OAAV;AACD;AACF;;AAED,SAAOP,KAAP;AACD","sourcesContent":["/*\n * The method is present in: Otsu, N (1979), \"A threshold selection method from gray-level histograms\", IEEE Trans. Sys., Man., Cyber. 9: 62-66\n * The Otsu implementation is based on: https://en.wikipedia.org/wiki/Otsu's_method\n * @param histogram - the histogram of the image\n * @returns {number} - the threshold\n */\n\nexport default function otsu(histogramCounts, total) {\n  let sumB = 0;\n  let wB = 0;\n  let maximum = 0;\n  let level = 0;\n\n  let sum1 = 0;\n  for (let i = 0; i < histogramCounts.length; i++) {\n    sum1 += i * histogramCounts[i];\n  }\n\n  for (let ii = 0; ii < histogramCounts.length; ii++) {\n    wB = wB + histogramCounts[ii];\n    const wF = total - wB;\n    if (wB === 0 || wF === 0) {\n      continue;\n    }\n    sumB = sumB + ii * histogramCounts[ii];\n    const mF = (sum1 - sumB) / wF;\n    const between = wB * wF * (sumB / wB - mF) * (sumB / wB - mF);\n    if (between >= maximum) {\n      level = ii;\n      maximum = between;\n    }\n  }\n\n  return level;\n}\n"]},"metadata":{},"sourceType":"module"}