{"ast":null,"code":"'use strict';\n\nfunction FFT(size) {\n  this.size = size | 0;\n  if (this.size <= 1 || (this.size & this.size - 1) !== 0) throw new Error('FFT size must be a power of two and bigger than 1');\n  this._csize = size << 1; // NOTE: Use of `var` is intentional for old V8 versions\n\n  var table = new Array(this.size * 2);\n\n  for (var i = 0; i < table.length; i += 2) {\n    const angle = Math.PI * i / this.size;\n    table[i] = Math.cos(angle);\n    table[i + 1] = -Math.sin(angle);\n  }\n\n  this.table = table; // Find size's power of two\n\n  var power = 0;\n\n  for (var t = 1; this.size > t; t <<= 1) power++; // Calculate initial step's width:\n  //   * If we are full radix-4 - it is 2x smaller to give inital len=8\n  //   * Otherwise it is the same as `power` to give len=4\n\n\n  this._width = power % 2 === 0 ? power - 1 : power; // Pre-compute bit-reversal patterns\n\n  this._bitrev = new Array(1 << this._width);\n\n  for (var j = 0; j < this._bitrev.length; j++) {\n    this._bitrev[j] = 0;\n\n    for (var shift = 0; shift < this._width; shift += 2) {\n      var revShift = this._width - shift - 2;\n      this._bitrev[j] |= (j >>> shift & 3) << revShift;\n    }\n  }\n\n  this._out = null;\n  this._data = null;\n  this._inv = 0;\n}\n\nmodule.exports = FFT;\n\nFFT.prototype.fromComplexArray = function fromComplexArray(complex, storage) {\n  var res = storage || new Array(complex.length >>> 1);\n\n  for (var i = 0; i < complex.length; i += 2) res[i >>> 1] = complex[i];\n\n  return res;\n};\n\nFFT.prototype.createComplexArray = function createComplexArray() {\n  const res = new Array(this._csize);\n\n  for (var i = 0; i < res.length; i++) res[i] = 0;\n\n  return res;\n};\n\nFFT.prototype.toComplexArray = function toComplexArray(input, storage) {\n  var res = storage || this.createComplexArray();\n\n  for (var i = 0; i < res.length; i += 2) {\n    res[i] = input[i >>> 1];\n    res[i + 1] = 0;\n  }\n\n  return res;\n};\n\nFFT.prototype.completeSpectrum = function completeSpectrum(spectrum) {\n  var size = this._csize;\n  var half = size >>> 1;\n\n  for (var i = 2; i < half; i += 2) {\n    spectrum[size - i] = spectrum[i];\n    spectrum[size - i + 1] = -spectrum[i + 1];\n  }\n};\n\nFFT.prototype.transform = function transform(out, data) {\n  if (out === data) throw new Error('Input and output buffers must be different');\n  this._out = out;\n  this._data = data;\n  this._inv = 0;\n\n  this._transform4();\n\n  this._out = null;\n  this._data = null;\n};\n\nFFT.prototype.realTransform = function realTransform(out, data) {\n  if (out === data) throw new Error('Input and output buffers must be different');\n  this._out = out;\n  this._data = data;\n  this._inv = 0;\n\n  this._realTransform4();\n\n  this._out = null;\n  this._data = null;\n};\n\nFFT.prototype.inverseTransform = function inverseTransform(out, data) {\n  if (out === data) throw new Error('Input and output buffers must be different');\n  this._out = out;\n  this._data = data;\n  this._inv = 1;\n\n  this._transform4();\n\n  for (var i = 0; i < out.length; i++) out[i] /= this.size;\n\n  this._out = null;\n  this._data = null;\n}; // radix-4 implementation\n//\n// NOTE: Uses of `var` are intentional for older V8 version that do not\n// support both `let compound assignments` and `const phi`\n\n\nFFT.prototype._transform4 = function _transform4() {\n  var out = this._out;\n  var size = this._csize; // Initial step (permute and transform)\n\n  var width = this._width;\n  var step = 1 << width;\n  var len = size / step << 1;\n  var outOff;\n  var t;\n  var bitrev = this._bitrev;\n\n  if (len === 4) {\n    for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {\n      const off = bitrev[t];\n\n      this._singleTransform2(outOff, off, step);\n    }\n  } else {\n    // len === 8\n    for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {\n      const off = bitrev[t];\n\n      this._singleTransform4(outOff, off, step);\n    }\n  } // Loop through steps in decreasing order\n\n\n  var inv = this._inv ? -1 : 1;\n  var table = this.table;\n\n  for (step >>= 2; step >= 2; step >>= 2) {\n    len = size / step << 1;\n    var quarterLen = len >>> 2; // Loop through offsets in the data\n\n    for (outOff = 0; outOff < size; outOff += len) {\n      // Full case\n      var limit = outOff + quarterLen;\n\n      for (var i = outOff, k = 0; i < limit; i += 2, k += step) {\n        const A = i;\n        const B = A + quarterLen;\n        const C = B + quarterLen;\n        const D = C + quarterLen; // Original values\n\n        const Ar = out[A];\n        const Ai = out[A + 1];\n        const Br = out[B];\n        const Bi = out[B + 1];\n        const Cr = out[C];\n        const Ci = out[C + 1];\n        const Dr = out[D];\n        const Di = out[D + 1]; // Middle values\n\n        const MAr = Ar;\n        const MAi = Ai;\n        const tableBr = table[k];\n        const tableBi = inv * table[k + 1];\n        const MBr = Br * tableBr - Bi * tableBi;\n        const MBi = Br * tableBi + Bi * tableBr;\n        const tableCr = table[2 * k];\n        const tableCi = inv * table[2 * k + 1];\n        const MCr = Cr * tableCr - Ci * tableCi;\n        const MCi = Cr * tableCi + Ci * tableCr;\n        const tableDr = table[3 * k];\n        const tableDi = inv * table[3 * k + 1];\n        const MDr = Dr * tableDr - Di * tableDi;\n        const MDi = Dr * tableDi + Di * tableDr; // Pre-Final values\n\n        const T0r = MAr + MCr;\n        const T0i = MAi + MCi;\n        const T1r = MAr - MCr;\n        const T1i = MAi - MCi;\n        const T2r = MBr + MDr;\n        const T2i = MBi + MDi;\n        const T3r = inv * (MBr - MDr);\n        const T3i = inv * (MBi - MDi); // Final values\n\n        const FAr = T0r + T2r;\n        const FAi = T0i + T2i;\n        const FCr = T0r - T2r;\n        const FCi = T0i - T2i;\n        const FBr = T1r + T3i;\n        const FBi = T1i - T3r;\n        const FDr = T1r - T3i;\n        const FDi = T1i + T3r;\n        out[A] = FAr;\n        out[A + 1] = FAi;\n        out[B] = FBr;\n        out[B + 1] = FBi;\n        out[C] = FCr;\n        out[C + 1] = FCi;\n        out[D] = FDr;\n        out[D + 1] = FDi;\n      }\n    }\n  }\n}; // radix-2 implementation\n//\n// NOTE: Only called for len=4\n\n\nFFT.prototype._singleTransform2 = function _singleTransform2(outOff, off, step) {\n  const out = this._out;\n  const data = this._data;\n  const evenR = data[off];\n  const evenI = data[off + 1];\n  const oddR = data[off + step];\n  const oddI = data[off + step + 1];\n  const leftR = evenR + oddR;\n  const leftI = evenI + oddI;\n  const rightR = evenR - oddR;\n  const rightI = evenI - oddI;\n  out[outOff] = leftR;\n  out[outOff + 1] = leftI;\n  out[outOff + 2] = rightR;\n  out[outOff + 3] = rightI;\n}; // radix-4\n//\n// NOTE: Only called for len=8\n\n\nFFT.prototype._singleTransform4 = function _singleTransform4(outOff, off, step) {\n  const out = this._out;\n  const data = this._data;\n  const inv = this._inv ? -1 : 1;\n  const step2 = step * 2;\n  const step3 = step * 3; // Original values\n\n  const Ar = data[off];\n  const Ai = data[off + 1];\n  const Br = data[off + step];\n  const Bi = data[off + step + 1];\n  const Cr = data[off + step2];\n  const Ci = data[off + step2 + 1];\n  const Dr = data[off + step3];\n  const Di = data[off + step3 + 1]; // Pre-Final values\n\n  const T0r = Ar + Cr;\n  const T0i = Ai + Ci;\n  const T1r = Ar - Cr;\n  const T1i = Ai - Ci;\n  const T2r = Br + Dr;\n  const T2i = Bi + Di;\n  const T3r = inv * (Br - Dr);\n  const T3i = inv * (Bi - Di); // Final values\n\n  const FAr = T0r + T2r;\n  const FAi = T0i + T2i;\n  const FBr = T1r + T3i;\n  const FBi = T1i - T3r;\n  const FCr = T0r - T2r;\n  const FCi = T0i - T2i;\n  const FDr = T1r - T3i;\n  const FDi = T1i + T3r;\n  out[outOff] = FAr;\n  out[outOff + 1] = FAi;\n  out[outOff + 2] = FBr;\n  out[outOff + 3] = FBi;\n  out[outOff + 4] = FCr;\n  out[outOff + 5] = FCi;\n  out[outOff + 6] = FDr;\n  out[outOff + 7] = FDi;\n}; // Real input radix-4 implementation\n\n\nFFT.prototype._realTransform4 = function _realTransform4() {\n  var out = this._out;\n  var size = this._csize; // Initial step (permute and transform)\n\n  var width = this._width;\n  var step = 1 << width;\n  var len = size / step << 1;\n  var outOff;\n  var t;\n  var bitrev = this._bitrev;\n\n  if (len === 4) {\n    for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {\n      const off = bitrev[t];\n\n      this._singleRealTransform2(outOff, off >>> 1, step >>> 1);\n    }\n  } else {\n    // len === 8\n    for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {\n      const off = bitrev[t];\n\n      this._singleRealTransform4(outOff, off >>> 1, step >>> 1);\n    }\n  } // Loop through steps in decreasing order\n\n\n  var inv = this._inv ? -1 : 1;\n  var table = this.table;\n\n  for (step >>= 2; step >= 2; step >>= 2) {\n    len = size / step << 1;\n    var halfLen = len >>> 1;\n    var quarterLen = halfLen >>> 1;\n    var hquarterLen = quarterLen >>> 1; // Loop through offsets in the data\n\n    for (outOff = 0; outOff < size; outOff += len) {\n      for (var i = 0, k = 0; i <= hquarterLen; i += 2, k += step) {\n        var A = outOff + i;\n        var B = A + quarterLen;\n        var C = B + quarterLen;\n        var D = C + quarterLen; // Original values\n\n        var Ar = out[A];\n        var Ai = out[A + 1];\n        var Br = out[B];\n        var Bi = out[B + 1];\n        var Cr = out[C];\n        var Ci = out[C + 1];\n        var Dr = out[D];\n        var Di = out[D + 1]; // Middle values\n\n        var MAr = Ar;\n        var MAi = Ai;\n        var tableBr = table[k];\n        var tableBi = inv * table[k + 1];\n        var MBr = Br * tableBr - Bi * tableBi;\n        var MBi = Br * tableBi + Bi * tableBr;\n        var tableCr = table[2 * k];\n        var tableCi = inv * table[2 * k + 1];\n        var MCr = Cr * tableCr - Ci * tableCi;\n        var MCi = Cr * tableCi + Ci * tableCr;\n        var tableDr = table[3 * k];\n        var tableDi = inv * table[3 * k + 1];\n        var MDr = Dr * tableDr - Di * tableDi;\n        var MDi = Dr * tableDi + Di * tableDr; // Pre-Final values\n\n        var T0r = MAr + MCr;\n        var T0i = MAi + MCi;\n        var T1r = MAr - MCr;\n        var T1i = MAi - MCi;\n        var T2r = MBr + MDr;\n        var T2i = MBi + MDi;\n        var T3r = inv * (MBr - MDr);\n        var T3i = inv * (MBi - MDi); // Final values\n\n        var FAr = T0r + T2r;\n        var FAi = T0i + T2i;\n        var FBr = T1r + T3i;\n        var FBi = T1i - T3r;\n        out[A] = FAr;\n        out[A + 1] = FAi;\n        out[B] = FBr;\n        out[B + 1] = FBi; // Output final middle point\n\n        if (i === 0) {\n          var FCr = T0r - T2r;\n          var FCi = T0i - T2i;\n          out[C] = FCr;\n          out[C + 1] = FCi;\n          continue;\n        } // Do not overwrite ourselves\n\n\n        if (i === hquarterLen) continue; // In the flipped case:\n        // MAi = -MAi\n        // MBr=-MBi, MBi=-MBr\n        // MCr=-MCr\n        // MDr=MDi, MDi=MDr\n\n        var ST0r = T1r;\n        var ST0i = -T1i;\n        var ST1r = T0r;\n        var ST1i = -T0i;\n        var ST2r = -inv * T3i;\n        var ST2i = -inv * T3r;\n        var ST3r = -inv * T2i;\n        var ST3i = -inv * T2r;\n        var SFAr = ST0r + ST2r;\n        var SFAi = ST0i + ST2i;\n        var SFBr = ST1r + ST3i;\n        var SFBi = ST1i - ST3r;\n        var SA = outOff + quarterLen - i;\n        var SB = outOff + halfLen - i;\n        out[SA] = SFAr;\n        out[SA + 1] = SFAi;\n        out[SB] = SFBr;\n        out[SB + 1] = SFBi;\n      }\n    }\n  }\n}; // radix-2 implementation\n//\n// NOTE: Only called for len=4\n\n\nFFT.prototype._singleRealTransform2 = function _singleRealTransform2(outOff, off, step) {\n  const out = this._out;\n  const data = this._data;\n  const evenR = data[off];\n  const oddR = data[off + step];\n  const leftR = evenR + oddR;\n  const rightR = evenR - oddR;\n  out[outOff] = leftR;\n  out[outOff + 1] = 0;\n  out[outOff + 2] = rightR;\n  out[outOff + 3] = 0;\n}; // radix-4\n//\n// NOTE: Only called for len=8\n\n\nFFT.prototype._singleRealTransform4 = function _singleRealTransform4(outOff, off, step) {\n  const out = this._out;\n  const data = this._data;\n  const inv = this._inv ? -1 : 1;\n  const step2 = step * 2;\n  const step3 = step * 3; // Original values\n\n  const Ar = data[off];\n  const Br = data[off + step];\n  const Cr = data[off + step2];\n  const Dr = data[off + step3]; // Pre-Final values\n\n  const T0r = Ar + Cr;\n  const T1r = Ar - Cr;\n  const T2r = Br + Dr;\n  const T3r = inv * (Br - Dr); // Final values\n\n  const FAr = T0r + T2r;\n  const FBr = T1r;\n  const FBi = -T3r;\n  const FCr = T0r - T2r;\n  const FDr = T1r;\n  const FDi = T3r;\n  out[outOff] = FAr;\n  out[outOff + 1] = 0;\n  out[outOff + 2] = FBr;\n  out[outOff + 3] = FBi;\n  out[outOff + 4] = FCr;\n  out[outOff + 5] = 0;\n  out[outOff + 6] = FDr;\n  out[outOff + 7] = FDi;\n};","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/node_modules/fft.js/lib/fft.js"],"names":["FFT","size","Error","_csize","table","Array","i","length","angle","Math","PI","cos","sin","power","t","_width","_bitrev","j","shift","revShift","_out","_data","_inv","module","exports","prototype","fromComplexArray","complex","storage","res","createComplexArray","toComplexArray","input","completeSpectrum","spectrum","half","transform","out","data","_transform4","realTransform","_realTransform4","inverseTransform","width","step","len","outOff","bitrev","off","_singleTransform2","_singleTransform4","inv","quarterLen","limit","k","A","B","C","D","Ar","Ai","Br","Bi","Cr","Ci","Dr","Di","MAr","MAi","tableBr","tableBi","MBr","MBi","tableCr","tableCi","MCr","MCi","tableDr","tableDi","MDr","MDi","T0r","T0i","T1r","T1i","T2r","T2i","T3r","T3i","FAr","FAi","FCr","FCi","FBr","FBi","FDr","FDi","evenR","evenI","oddR","oddI","leftR","leftI","rightR","rightI","step2","step3","_singleRealTransform2","_singleRealTransform4","halfLen","hquarterLen","ST0r","ST0i","ST1r","ST1i","ST2r","ST2i","ST3r","ST3i","SFAr","SFAi","SFBr","SFBi","SA","SB"],"mappings":"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","sourcesContent":["'use strict';\n\nfunction FFT(size) {\n  this.size = size | 0;\n  if (this.size <= 1 || (this.size & (this.size - 1)) !== 0)\n    throw new Error('FFT size must be a power of two and bigger than 1');\n\n  this._csize = size << 1;\n\n  // NOTE: Use of `var` is intentional for old V8 versions\n  var table = new Array(this.size * 2);\n  for (var i = 0; i < table.length; i += 2) {\n    const angle = Math.PI * i / this.size;\n    table[i] = Math.cos(angle);\n    table[i + 1] = -Math.sin(angle);\n  }\n  this.table = table;\n\n  // Find size's power of two\n  var power = 0;\n  for (var t = 1; this.size > t; t <<= 1)\n    power++;\n\n  // Calculate initial step's width:\n  //   * If we are full radix-4 - it is 2x smaller to give inital len=8\n  //   * Otherwise it is the same as `power` to give len=4\n  this._width = power % 2 === 0 ? power - 1 : power;\n\n  // Pre-compute bit-reversal patterns\n  this._bitrev = new Array(1 << this._width);\n  for (var j = 0; j < this._bitrev.length; j++) {\n    this._bitrev[j] = 0;\n    for (var shift = 0; shift < this._width; shift += 2) {\n      var revShift = this._width - shift - 2;\n      this._bitrev[j] |= ((j >>> shift) & 3) << revShift;\n    }\n  }\n\n  this._out = null;\n  this._data = null;\n  this._inv = 0;\n}\nmodule.exports = FFT;\n\nFFT.prototype.fromComplexArray = function fromComplexArray(complex, storage) {\n  var res = storage || new Array(complex.length >>> 1);\n  for (var i = 0; i < complex.length; i += 2)\n    res[i >>> 1] = complex[i];\n  return res;\n};\n\nFFT.prototype.createComplexArray = function createComplexArray() {\n  const res = new Array(this._csize);\n  for (var i = 0; i < res.length; i++)\n    res[i] = 0;\n  return res;\n};\n\nFFT.prototype.toComplexArray = function toComplexArray(input, storage) {\n  var res = storage || this.createComplexArray();\n  for (var i = 0; i < res.length; i += 2) {\n    res[i] = input[i >>> 1];\n    res[i + 1] = 0;\n  }\n  return res;\n};\n\nFFT.prototype.completeSpectrum = function completeSpectrum(spectrum) {\n  var size = this._csize;\n  var half = size >>> 1;\n  for (var i = 2; i < half; i += 2) {\n    spectrum[size - i] = spectrum[i];\n    spectrum[size - i + 1] = -spectrum[i + 1];\n  }\n};\n\nFFT.prototype.transform = function transform(out, data) {\n  if (out === data)\n    throw new Error('Input and output buffers must be different');\n\n  this._out = out;\n  this._data = data;\n  this._inv = 0;\n  this._transform4();\n  this._out = null;\n  this._data = null;\n};\n\nFFT.prototype.realTransform = function realTransform(out, data) {\n  if (out === data)\n    throw new Error('Input and output buffers must be different');\n\n  this._out = out;\n  this._data = data;\n  this._inv = 0;\n  this._realTransform4();\n  this._out = null;\n  this._data = null;\n};\n\nFFT.prototype.inverseTransform = function inverseTransform(out, data) {\n  if (out === data)\n    throw new Error('Input and output buffers must be different');\n\n  this._out = out;\n  this._data = data;\n  this._inv = 1;\n  this._transform4();\n  for (var i = 0; i < out.length; i++)\n    out[i] /= this.size;\n  this._out = null;\n  this._data = null;\n};\n\n// radix-4 implementation\n//\n// NOTE: Uses of `var` are intentional for older V8 version that do not\n// support both `let compound assignments` and `const phi`\nFFT.prototype._transform4 = function _transform4() {\n  var out = this._out;\n  var size = this._csize;\n\n  // Initial step (permute and transform)\n  var width = this._width;\n  var step = 1 << width;\n  var len = (size / step) << 1;\n\n  var outOff;\n  var t;\n  var bitrev = this._bitrev;\n  if (len === 4) {\n    for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {\n      const off = bitrev[t];\n      this._singleTransform2(outOff, off, step);\n    }\n  } else {\n    // len === 8\n    for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {\n      const off = bitrev[t];\n      this._singleTransform4(outOff, off, step);\n    }\n  }\n\n  // Loop through steps in decreasing order\n  var inv = this._inv ? -1 : 1;\n  var table = this.table;\n  for (step >>= 2; step >= 2; step >>= 2) {\n    len = (size / step) << 1;\n    var quarterLen = len >>> 2;\n\n    // Loop through offsets in the data\n    for (outOff = 0; outOff < size; outOff += len) {\n      // Full case\n      var limit = outOff + quarterLen;\n      for (var i = outOff, k = 0; i < limit; i += 2, k += step) {\n        const A = i;\n        const B = A + quarterLen;\n        const C = B + quarterLen;\n        const D = C + quarterLen;\n\n        // Original values\n        const Ar = out[A];\n        const Ai = out[A + 1];\n        const Br = out[B];\n        const Bi = out[B + 1];\n        const Cr = out[C];\n        const Ci = out[C + 1];\n        const Dr = out[D];\n        const Di = out[D + 1];\n\n        // Middle values\n        const MAr = Ar;\n        const MAi = Ai;\n\n        const tableBr = table[k];\n        const tableBi = inv * table[k + 1];\n        const MBr = Br * tableBr - Bi * tableBi;\n        const MBi = Br * tableBi + Bi * tableBr;\n\n        const tableCr = table[2 * k];\n        const tableCi = inv * table[2 * k + 1];\n        const MCr = Cr * tableCr - Ci * tableCi;\n        const MCi = Cr * tableCi + Ci * tableCr;\n\n        const tableDr = table[3 * k];\n        const tableDi = inv * table[3 * k + 1];\n        const MDr = Dr * tableDr - Di * tableDi;\n        const MDi = Dr * tableDi + Di * tableDr;\n\n        // Pre-Final values\n        const T0r = MAr + MCr;\n        const T0i = MAi + MCi;\n        const T1r = MAr - MCr;\n        const T1i = MAi - MCi;\n        const T2r = MBr + MDr;\n        const T2i = MBi + MDi;\n        const T3r = inv * (MBr - MDr);\n        const T3i = inv * (MBi - MDi);\n\n        // Final values\n        const FAr = T0r + T2r;\n        const FAi = T0i + T2i;\n\n        const FCr = T0r - T2r;\n        const FCi = T0i - T2i;\n\n        const FBr = T1r + T3i;\n        const FBi = T1i - T3r;\n\n        const FDr = T1r - T3i;\n        const FDi = T1i + T3r;\n\n        out[A] = FAr;\n        out[A + 1] = FAi;\n        out[B] = FBr;\n        out[B + 1] = FBi;\n        out[C] = FCr;\n        out[C + 1] = FCi;\n        out[D] = FDr;\n        out[D + 1] = FDi;\n      }\n    }\n  }\n};\n\n// radix-2 implementation\n//\n// NOTE: Only called for len=4\nFFT.prototype._singleTransform2 = function _singleTransform2(outOff, off,\n                                                             step) {\n  const out = this._out;\n  const data = this._data;\n\n  const evenR = data[off];\n  const evenI = data[off + 1];\n  const oddR = data[off + step];\n  const oddI = data[off + step + 1];\n\n  const leftR = evenR + oddR;\n  const leftI = evenI + oddI;\n  const rightR = evenR - oddR;\n  const rightI = evenI - oddI;\n\n  out[outOff] = leftR;\n  out[outOff + 1] = leftI;\n  out[outOff + 2] = rightR;\n  out[outOff + 3] = rightI;\n};\n\n// radix-4\n//\n// NOTE: Only called for len=8\nFFT.prototype._singleTransform4 = function _singleTransform4(outOff, off,\n                                                             step) {\n  const out = this._out;\n  const data = this._data;\n  const inv = this._inv ? -1 : 1;\n  const step2 = step * 2;\n  const step3 = step * 3;\n\n  // Original values\n  const Ar = data[off];\n  const Ai = data[off + 1];\n  const Br = data[off + step];\n  const Bi = data[off + step + 1];\n  const Cr = data[off + step2];\n  const Ci = data[off + step2 + 1];\n  const Dr = data[off + step3];\n  const Di = data[off + step3 + 1];\n\n  // Pre-Final values\n  const T0r = Ar + Cr;\n  const T0i = Ai + Ci;\n  const T1r = Ar - Cr;\n  const T1i = Ai - Ci;\n  const T2r = Br + Dr;\n  const T2i = Bi + Di;\n  const T3r = inv * (Br - Dr);\n  const T3i = inv * (Bi - Di);\n\n  // Final values\n  const FAr = T0r + T2r;\n  const FAi = T0i + T2i;\n\n  const FBr = T1r + T3i;\n  const FBi = T1i - T3r;\n\n  const FCr = T0r - T2r;\n  const FCi = T0i - T2i;\n\n  const FDr = T1r - T3i;\n  const FDi = T1i + T3r;\n\n  out[outOff] = FAr;\n  out[outOff + 1] = FAi;\n  out[outOff + 2] = FBr;\n  out[outOff + 3] = FBi;\n  out[outOff + 4] = FCr;\n  out[outOff + 5] = FCi;\n  out[outOff + 6] = FDr;\n  out[outOff + 7] = FDi;\n};\n\n// Real input radix-4 implementation\nFFT.prototype._realTransform4 = function _realTransform4() {\n  var out = this._out;\n  var size = this._csize;\n\n  // Initial step (permute and transform)\n  var width = this._width;\n  var step = 1 << width;\n  var len = (size / step) << 1;\n\n  var outOff;\n  var t;\n  var bitrev = this._bitrev;\n  if (len === 4) {\n    for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {\n      const off = bitrev[t];\n      this._singleRealTransform2(outOff, off >>> 1, step >>> 1);\n    }\n  } else {\n    // len === 8\n    for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {\n      const off = bitrev[t];\n      this._singleRealTransform4(outOff, off >>> 1, step >>> 1);\n    }\n  }\n\n  // Loop through steps in decreasing order\n  var inv = this._inv ? -1 : 1;\n  var table = this.table;\n  for (step >>= 2; step >= 2; step >>= 2) {\n    len = (size / step) << 1;\n    var halfLen = len >>> 1;\n    var quarterLen = halfLen >>> 1;\n    var hquarterLen = quarterLen >>> 1;\n\n    // Loop through offsets in the data\n    for (outOff = 0; outOff < size; outOff += len) {\n      for (var i = 0, k = 0; i <= hquarterLen; i += 2, k += step) {\n        var A = outOff + i;\n        var B = A + quarterLen;\n        var C = B + quarterLen;\n        var D = C + quarterLen;\n\n        // Original values\n        var Ar = out[A];\n        var Ai = out[A + 1];\n        var Br = out[B];\n        var Bi = out[B + 1];\n        var Cr = out[C];\n        var Ci = out[C + 1];\n        var Dr = out[D];\n        var Di = out[D + 1];\n\n        // Middle values\n        var MAr = Ar;\n        var MAi = Ai;\n\n        var tableBr = table[k];\n        var tableBi = inv * table[k + 1];\n        var MBr = Br * tableBr - Bi * tableBi;\n        var MBi = Br * tableBi + Bi * tableBr;\n\n        var tableCr = table[2 * k];\n        var tableCi = inv * table[2 * k + 1];\n        var MCr = Cr * tableCr - Ci * tableCi;\n        var MCi = Cr * tableCi + Ci * tableCr;\n\n        var tableDr = table[3 * k];\n        var tableDi = inv * table[3 * k + 1];\n        var MDr = Dr * tableDr - Di * tableDi;\n        var MDi = Dr * tableDi + Di * tableDr;\n\n        // Pre-Final values\n        var T0r = MAr + MCr;\n        var T0i = MAi + MCi;\n        var T1r = MAr - MCr;\n        var T1i = MAi - MCi;\n        var T2r = MBr + MDr;\n        var T2i = MBi + MDi;\n        var T3r = inv * (MBr - MDr);\n        var T3i = inv * (MBi - MDi);\n\n        // Final values\n        var FAr = T0r + T2r;\n        var FAi = T0i + T2i;\n\n        var FBr = T1r + T3i;\n        var FBi = T1i - T3r;\n\n        out[A] = FAr;\n        out[A + 1] = FAi;\n        out[B] = FBr;\n        out[B + 1] = FBi;\n\n        // Output final middle point\n        if (i === 0) {\n          var FCr = T0r - T2r;\n          var FCi = T0i - T2i;\n          out[C] = FCr;\n          out[C + 1] = FCi;\n          continue;\n        }\n\n        // Do not overwrite ourselves\n        if (i === hquarterLen)\n          continue;\n\n        // In the flipped case:\n        // MAi = -MAi\n        // MBr=-MBi, MBi=-MBr\n        // MCr=-MCr\n        // MDr=MDi, MDi=MDr\n        var ST0r = T1r;\n        var ST0i = -T1i;\n        var ST1r = T0r;\n        var ST1i = -T0i;\n        var ST2r = -inv * T3i;\n        var ST2i = -inv * T3r;\n        var ST3r = -inv * T2i;\n        var ST3i = -inv * T2r;\n\n        var SFAr = ST0r + ST2r;\n        var SFAi = ST0i + ST2i;\n\n        var SFBr = ST1r + ST3i;\n        var SFBi = ST1i - ST3r;\n\n        var SA = outOff + quarterLen - i;\n        var SB = outOff + halfLen - i;\n\n        out[SA] = SFAr;\n        out[SA + 1] = SFAi;\n        out[SB] = SFBr;\n        out[SB + 1] = SFBi;\n      }\n    }\n  }\n};\n\n// radix-2 implementation\n//\n// NOTE: Only called for len=4\nFFT.prototype._singleRealTransform2 = function _singleRealTransform2(outOff,\n                                                                     off,\n                                                                     step) {\n  const out = this._out;\n  const data = this._data;\n\n  const evenR = data[off];\n  const oddR = data[off + step];\n\n  const leftR = evenR + oddR;\n  const rightR = evenR - oddR;\n\n  out[outOff] = leftR;\n  out[outOff + 1] = 0;\n  out[outOff + 2] = rightR;\n  out[outOff + 3] = 0;\n};\n\n// radix-4\n//\n// NOTE: Only called for len=8\nFFT.prototype._singleRealTransform4 = function _singleRealTransform4(outOff,\n                                                                     off,\n                                                                     step) {\n  const out = this._out;\n  const data = this._data;\n  const inv = this._inv ? -1 : 1;\n  const step2 = step * 2;\n  const step3 = step * 3;\n\n  // Original values\n  const Ar = data[off];\n  const Br = data[off + step];\n  const Cr = data[off + step2];\n  const Dr = data[off + step3];\n\n  // Pre-Final values\n  const T0r = Ar + Cr;\n  const T1r = Ar - Cr;\n  const T2r = Br + Dr;\n  const T3r = inv * (Br - Dr);\n\n  // Final values\n  const FAr = T0r + T2r;\n\n  const FBr = T1r;\n  const FBi = -T3r;\n\n  const FCr = T0r - T2r;\n\n  const FDr = T1r;\n  const FDi = T3r;\n\n  out[outOff] = FAr;\n  out[outOff + 1] = 0;\n  out[outOff + 2] = FBr;\n  out[outOff + 3] = FBi;\n  out[outOff + 4] = FCr;\n  out[outOff + 5] = 0;\n  out[outOff + 6] = FDr;\n  out[outOff + 7] = FDi;\n};\n"]},"metadata":{},"sourceType":"script"}