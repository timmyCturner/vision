{"ast":null,"code":"import Shape from '../../../util/Shape';\nimport RoiMap from '../RoiMap';\n/**\n * @memberof RoiManager\n * @instance\n * @param {Array<Array<number>>} pointsToPaint - an array of points\n * @param {object} [options]\n * @return {RoiMap}\n */\n\nexport default function fromPoints(pointsToPaint, options = {}) {\n  let shape = new Shape(options); // based on a binary image we will create plenty of small images\n\n  let data = new Int16Array(this.size); // maxValue: 32767, minValue: -32768\n\n  let positiveID = 0;\n  let shapePoints = shape.getPoints();\n\n  for (let i = 0; i < pointsToPaint.length; i++) {\n    positiveID++;\n    let xP = pointsToPaint[i][0];\n    let yP = pointsToPaint[i][1];\n\n    for (let j = 0; j < shapePoints.length; j++) {\n      let xS = shapePoints[j][0];\n      let yS = shapePoints[j][1];\n\n      if (xP + xS >= 0 && yP + yS >= 0 && xP + xS < this.width && yP + yS < this.height) {\n        data[xP + xS + (yP + yS) * this.width] = positiveID;\n      }\n    }\n  }\n\n  return new RoiMap(this, data);\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/node_modules/image-js/src/image/roi/creator/fromPoints.js"],"names":["Shape","RoiMap","fromPoints","pointsToPaint","options","shape","data","Int16Array","size","positiveID","shapePoints","getPoints","i","length","xP","yP","j","xS","yS","width","height"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,qBAAlB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AAEA;;;;;;;;AAOA,eAAe,SAASC,UAAT,CAAoBC,aAApB,EAAmCC,OAAO,GAAG,EAA7C,EAAiD;AAC9D,MAAIC,KAAK,GAAG,IAAIL,KAAJ,CAAUI,OAAV,CAAZ,CAD8D,CAG9D;;AACA,MAAIE,IAAI,GAAG,IAAIC,UAAJ,CAAe,KAAKC,IAApB,CAAX,CAJ8D,CAIxB;;AACtC,MAAIC,UAAU,GAAG,CAAjB;AACA,MAAIC,WAAW,GAAGL,KAAK,CAACM,SAAN,EAAlB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,aAAa,CAACU,MAAlC,EAA0CD,CAAC,EAA3C,EAA+C;AAC7CH,IAAAA,UAAU;AACV,QAAIK,EAAE,GAAGX,aAAa,CAACS,CAAD,CAAb,CAAiB,CAAjB,CAAT;AACA,QAAIG,EAAE,GAAGZ,aAAa,CAACS,CAAD,CAAb,CAAiB,CAAjB,CAAT;;AACA,SAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,WAAW,CAACG,MAAhC,EAAwCG,CAAC,EAAzC,EAA6C;AAC3C,UAAIC,EAAE,GAAGP,WAAW,CAACM,CAAD,CAAX,CAAe,CAAf,CAAT;AACA,UAAIE,EAAE,GAAGR,WAAW,CAACM,CAAD,CAAX,CAAe,CAAf,CAAT;;AACA,UACEF,EAAE,GAAGG,EAAL,IAAW,CAAX,IACAF,EAAE,GAAGG,EAAL,IAAW,CADX,IAEAJ,EAAE,GAAGG,EAAL,GAAU,KAAKE,KAFf,IAGAJ,EAAE,GAAGG,EAAL,GAAU,KAAKE,MAJjB,EAKE;AACAd,QAAAA,IAAI,CAACQ,EAAE,GAAGG,EAAL,GAAU,CAACF,EAAE,GAAGG,EAAN,IAAY,KAAKC,KAA5B,CAAJ,GAAyCV,UAAzC;AACD;AACF;AACF;;AAED,SAAO,IAAIR,MAAJ,CAAW,IAAX,EAAiBK,IAAjB,CAAP;AACD","sourcesContent":["import Shape from '../../../util/Shape';\nimport RoiMap from '../RoiMap';\n\n/**\n * @memberof RoiManager\n * @instance\n * @param {Array<Array<number>>} pointsToPaint - an array of points\n * @param {object} [options]\n * @return {RoiMap}\n */\nexport default function fromPoints(pointsToPaint, options = {}) {\n  let shape = new Shape(options);\n\n  // based on a binary image we will create plenty of small images\n  let data = new Int16Array(this.size); // maxValue: 32767, minValue: -32768\n  let positiveID = 0;\n  let shapePoints = shape.getPoints();\n  for (let i = 0; i < pointsToPaint.length; i++) {\n    positiveID++;\n    let xP = pointsToPaint[i][0];\n    let yP = pointsToPaint[i][1];\n    for (let j = 0; j < shapePoints.length; j++) {\n      let xS = shapePoints[j][0];\n      let yS = shapePoints[j][1];\n      if (\n        xP + xS >= 0 &&\n        yP + yS >= 0 &&\n        xP + xS < this.width &&\n        yP + yS < this.height\n      ) {\n        data[xP + xS + (yP + yS) * this.width] = positiveID;\n      }\n    }\n  }\n\n  return new RoiMap(this, data);\n}\n"]},"metadata":{},"sourceType":"module"}