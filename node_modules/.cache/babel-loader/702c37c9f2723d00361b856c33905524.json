{"ast":null,"code":"/**\n * Converts a factor value to a number between 0 and 1\n * @private\n * @param {string|number} value\n * @return {number}\n */\nexport function getFactor(value) {\n  if (typeof value === 'string') {\n    const last = value[value.length - 1];\n    value = parseFloat(value);\n\n    if (last === '%') {\n      value /= 100;\n    }\n  }\n\n  return value;\n}\n/**\n * We can specify a threshold as \"0.4\", \"40%\" or 123\n * @private\n * @param {string|number} value\n * @param {number} maxValue\n * @return {number}\n */\n\nexport function getThreshold(value, maxValue) {\n  if (!maxValue) {\n    throw Error('getThreshold : the maxValue should be specified');\n  }\n\n  if (typeof value === 'string') {\n    let last = value[value.length - 1];\n\n    if (last !== '%') {\n      throw Error('getThreshold : if the value is a string it must finish by %');\n    }\n\n    return parseFloat(value) / 100 * maxValue;\n  } else if (typeof value === 'number') {\n    if (value < 1) {\n      return value * maxValue;\n    }\n\n    return value;\n  } else {\n    throw Error('getThreshold : the value is not valid');\n  }\n}\nexport function factorDimensions(factor, width, height) {\n  factor = getFactor(factor);\n  let newWidth = Math.round(factor * width);\n  let newHeight = Math.round(factor * height);\n\n  if (newWidth <= 0) {\n    newWidth = 1;\n  }\n\n  if (newHeight <= 0) {\n    newHeight = 1;\n  }\n\n  return {\n    width: newWidth,\n    height: newHeight\n  };\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/node_modules/image-js/src/util/converter.js"],"names":["getFactor","value","last","length","parseFloat","getThreshold","maxValue","Error","factorDimensions","factor","width","height","newWidth","Math","round","newHeight"],"mappings":"AAAA;;;;;;AAMA,OAAO,SAASA,SAAT,CAAmBC,KAAnB,EAA0B;AAC/B,MAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,UAAMC,IAAI,GAAGD,KAAK,CAACA,KAAK,CAACE,MAAN,GAAe,CAAhB,CAAlB;AACAF,IAAAA,KAAK,GAAGG,UAAU,CAACH,KAAD,CAAlB;;AACA,QAAIC,IAAI,KAAK,GAAb,EAAkB;AAChBD,MAAAA,KAAK,IAAI,GAAT;AACD;AACF;;AACD,SAAOA,KAAP;AACD;AAED;;;;;;;;AAOA,OAAO,SAASI,YAAT,CAAsBJ,KAAtB,EAA6BK,QAA7B,EAAuC;AAC5C,MAAI,CAACA,QAAL,EAAe;AACb,UAAMC,KAAK,CAAC,iDAAD,CAAX;AACD;;AACD,MAAI,OAAON,KAAP,KAAiB,QAArB,EAA+B;AAC7B,QAAIC,IAAI,GAAGD,KAAK,CAACA,KAAK,CAACE,MAAN,GAAe,CAAhB,CAAhB;;AACA,QAAID,IAAI,KAAK,GAAb,EAAkB;AAChB,YAAMK,KAAK,CACT,6DADS,CAAX;AAGD;;AACD,WAAQH,UAAU,CAACH,KAAD,CAAV,GAAoB,GAArB,GAA4BK,QAAnC;AACD,GARD,MAQO,IAAI,OAAOL,KAAP,KAAiB,QAArB,EAA+B;AACpC,QAAIA,KAAK,GAAG,CAAZ,EAAe;AACb,aAAOA,KAAK,GAAGK,QAAf;AACD;;AACD,WAAOL,KAAP;AACD,GALM,MAKA;AACL,UAAMM,KAAK,CAAC,uCAAD,CAAX;AACD;AACF;AAED,OAAO,SAASC,gBAAT,CAA0BC,MAA1B,EAAkCC,KAAlC,EAAyCC,MAAzC,EAAiD;AACtDF,EAAAA,MAAM,GAAGT,SAAS,CAACS,MAAD,CAAlB;AACA,MAAIG,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWL,MAAM,GAAGC,KAApB,CAAf;AACA,MAAIK,SAAS,GAAGF,IAAI,CAACC,KAAL,CAAWL,MAAM,GAAGE,MAApB,CAAhB;;AAEA,MAAIC,QAAQ,IAAI,CAAhB,EAAmB;AACjBA,IAAAA,QAAQ,GAAG,CAAX;AACD;;AACD,MAAIG,SAAS,IAAI,CAAjB,EAAoB;AAClBA,IAAAA,SAAS,GAAG,CAAZ;AACD;;AACD,SAAO;AACLL,IAAAA,KAAK,EAAEE,QADF;AAELD,IAAAA,MAAM,EAAEI;AAFH,GAAP;AAID","sourcesContent":["/**\n * Converts a factor value to a number between 0 and 1\n * @private\n * @param {string|number} value\n * @return {number}\n */\nexport function getFactor(value) {\n  if (typeof value === 'string') {\n    const last = value[value.length - 1];\n    value = parseFloat(value);\n    if (last === '%') {\n      value /= 100;\n    }\n  }\n  return value;\n}\n\n/**\n * We can specify a threshold as \"0.4\", \"40%\" or 123\n * @private\n * @param {string|number} value\n * @param {number} maxValue\n * @return {number}\n */\nexport function getThreshold(value, maxValue) {\n  if (!maxValue) {\n    throw Error('getThreshold : the maxValue should be specified');\n  }\n  if (typeof value === 'string') {\n    let last = value[value.length - 1];\n    if (last !== '%') {\n      throw Error(\n        'getThreshold : if the value is a string it must finish by %',\n      );\n    }\n    return (parseFloat(value) / 100) * maxValue;\n  } else if (typeof value === 'number') {\n    if (value < 1) {\n      return value * maxValue;\n    }\n    return value;\n  } else {\n    throw Error('getThreshold : the value is not valid');\n  }\n}\n\nexport function factorDimensions(factor, width, height) {\n  factor = getFactor(factor);\n  let newWidth = Math.round(factor * width);\n  let newHeight = Math.round(factor * height);\n\n  if (newWidth <= 0) {\n    newWidth = 1;\n  }\n  if (newHeight <= 0) {\n    newHeight = 1;\n  }\n  return {\n    width: newWidth,\n    height: newHeight,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}