{"ast":null,"code":"import p5 from \"p5\"; //import \"../libs/p5.sound.js\";\n//( <any>window ).p5 = p5;\n\nexport default function microPlastic(p) {\n  let canvas; //these are gonna be the variables for our garbage collection\n\n  let song;\n  let particleMoveFactor;\n  let fft;\n  let particleCount;\n  let particleCreateFactor = 8;\n  let bgQueue;\n  let fgQueue;\n  let toggleSound; //var index = 0;\n  //these are all variables for our wave function\n\n  let xspacing = 16; // Distance between each horizontal location\n\n  let w; // Width of entire wave\n\n  let theta = 0.15; // Start angle at 0\n\n  let amplitude = 25.0; // Height of wave\n\n  let period = 200.0; // How many pixels before the wave repeats\n\n  let dx = 2; // Value for incrementing x\n\n  let yvalues; // Using an array to store height values for the wave\n\n  let backvalues;\n  let back = 2; // back offset\n\n  p.setup = () => {\n    canvas = p.createCanvas(600, 300); //set up wave\n\n    w = p.width + 16;\n    dx = 2 * Math.PI / period * xspacing;\n    yvalues = new Array(p.floor(w / xspacing));\n    backvalues = new Array(p.floor(w / xspacing)); //\n    //set up plastic\n    //\n\n    toggleSound = p.createCheckbox(\"toggle audio\", false); //masterVolume(0, 0);\n\n    toggleSound.position(p.width - 100, 10);\n    toggleSound.style('color', '#ffffff');\n    fft = new p5.FFT();\n    bgQueue = new CircularArrayQueue(200);\n    fgQueue = new CircularArrayQueue(100);\n    particleMoveFactor = 0;\n    particleCount = particleCreateFactor;\n    index = 0;\n    Promise.all([new Promise(resolve => {\n      song = loadSound(\"tears mstr 2.mp3\", resolve);\n    })]).then(() => {\n      song.amp(1);\n      song.play();\n    });\n    ; //load plastic images into Array\n  };\n\n  p.draw = () => {\n    p.background('blue'); //do wave\n\n    p.calcWave();\n    p.renderWave();\n    p.backWave(); //calc microplastic\n    //\n    //bg();\n\n    p.drawbgParticles();\n    p.moveWithBeat();\n    p.drawfgParticles();\n\n    if (toggleSound.checked()) {\n      masterVolume(1, 0.5);\n    } else {\n      masterVolume(0, 0.5);\n    }\n  }; //\n  //\n  //\n  //hear lies al information on how to create plastic\n  //\n  //\n  //\n\n\n  p.drawbgParticles = () => {\n    if (particleCount === particleCreateFactor) {\n      bgQueue.enqueue(new Particle(4, 1));\n    }\n\n    if (particleCount === particleCreateFactor / 2) {\n      bgQueue.enqueue(new Particle(4, 1));\n    }\n\n    bgQueue.displayAll();\n  };\n\n  p.moveWithBeat = () => {//fft.analyze();\n    //particleMoveFactor = p.map(fft.getEnergy(\"bass\"), 0, 225, 0.03, 0.6);\n  };\n\n  p.bg = () => {//fft.analyze();\n    //p.background(fft.getEnergy(\"mid\") * 0.6, fft.getEnergy(\"treble\") * 0.5, fft.getEnergy(\"bass\")* 0.6);\n  }; //\n  //\n  //\n  //hear lies al information on how to create a wave\n  //\n  //\n  //\n\n\n  p.calcWave = () => {\n    // Increment theta (try different values for\n    // 'angular velocity' here)\n    theta += 0.02; // For every x value, calculate a y value with sine function\n\n    let x = theta;\n\n    for (let i = 0; i < yvalues.length; i++) {\n      yvalues[i] = Math.sin(x) * amplitude;\n      backvalues[i] = Math.sin(x + back) * amplitude;\n      x += dx;\n    }\n  };\n\n  p.renderWave = () => {\n    p.noStroke();\n    p.fill(37, 207, 122); // A simple way to draw the wave with an ellipse at each location\n\n    for (let x = 0; x < yvalues.length; x++) {\n      var waveHeight = 4 * p.height / 8 + yvalues[x];\n      p.ellipse(x * xspacing, p.height, 64, waveHeight);\n    }\n  };\n\n  p.backWave = () => {\n    p.noStroke();\n    p.fill(19, 149, 244); // A simple way to draw the wave with an ellipse at each location\n\n    for (let x = 0; x < backvalues.length; x++) {\n      var waveHeight = 4 * p.height / 8 + backvalues[x];\n      p.ellipse(x * xspacing, p.height, 64, waveHeight);\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/src/sketches/microPlastic.js"],"names":["p5","microPlastic","p","canvas","song","particleMoveFactor","fft","particleCount","particleCreateFactor","bgQueue","fgQueue","toggleSound","xspacing","w","theta","amplitude","period","dx","yvalues","backvalues","back","setup","createCanvas","width","Math","PI","Array","floor","createCheckbox","position","style","FFT","CircularArrayQueue","index","Promise","all","resolve","loadSound","then","amp","play","draw","background","calcWave","renderWave","backWave","drawbgParticles","moveWithBeat","drawfgParticles","checked","masterVolume","enqueue","Particle","displayAll","bg","x","i","length","sin","noStroke","fill","waveHeight","height","ellipse"],"mappings":"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","sourcesContent":["import p5 from \"p5\";\r\n//import \"../libs/p5.sound.js\";\r\n//( <any>window ).p5 = p5;\r\n\r\nexport default function microPlastic(p) {\r\n\r\n  let canvas;\r\n\r\n  //these are gonna be the variables for our garbage collection\r\n  let song;\r\n  let particleMoveFactor;\r\n  let fft;\r\n  let particleCount;\r\n  let particleCreateFactor = 8;\r\n  let bgQueue;\r\n  let fgQueue;\r\n  let toggleSound;\r\n  //var index = 0;\r\n\r\n  //these are all variables for our wave function\r\n  let xspacing = 16; // Distance between each horizontal location\r\n  let w; // Width of entire wave\r\n  let theta = 0.15; // Start angle at 0\r\n  let amplitude = 25.0; // Height of wave\r\n  let period = 200.0; // How many pixels before the wave repeats\r\n  let dx=2; // Value for incrementing x\r\n  let yvalues; // Using an array to store height values for the wave\r\n  let backvalues;\r\n  let back = 2 // back offset\r\n\r\n\r\n\r\n  p.setup = () => {\r\n    canvas = p.createCanvas(600, 300);\r\n    //set up wave\r\n    w = p.width + 16;\r\n    dx = (2*Math.PI / period) * xspacing;\r\n    yvalues = new Array(p.floor(w / xspacing));\r\n    backvalues = new Array(p.floor(w / xspacing));\r\n    //\r\n    //set up plastic\r\n    //\r\n    toggleSound = p.createCheckbox(\"toggle audio\", false);\r\n    //masterVolume(0, 0);\r\n    toggleSound.position(p.width - 100, 10);\r\n    toggleSound.style('color', '#ffffff');\r\n\r\n    fft = new p5.FFT();\r\n\r\n    bgQueue = new CircularArrayQueue(200);\r\n    fgQueue = new CircularArrayQueue(100);\r\n    particleMoveFactor = 0;\r\n    particleCount = particleCreateFactor;\r\n    index = 0;\r\n\r\n    Promise.all([\r\n      new Promise((resolve) => {song = loadSound(\"tears mstr 2.mp3\", resolve)})\r\n    ]).then(() => {\r\n      song.amp(1);\r\n    \tsong.play();\r\n    });;\r\n\r\n\r\n    //load plastic images into Array\r\n\r\n\r\n  }\r\n  p.draw = () => {\r\n    p.background('blue');\r\n\r\n    //do wave\r\n    p.calcWave();\r\n    p.renderWave();\r\n    p.backWave();\r\n    //calc microplastic\r\n    //\r\n    //bg();\r\n    p.drawbgParticles();\r\n\r\n    p.moveWithBeat();\r\n    p.drawfgParticles();\r\n\r\n    if (toggleSound.checked()) {\r\n      masterVolume(1, 0.5);\r\n    }\r\n    else {\r\n      masterVolume(0, 0.5);\r\n    }\r\n  }\r\n  //\r\n  //\r\n  //\r\n  //hear lies al information on how to create plastic\r\n  //\r\n  //\r\n  //\r\n  p.drawbgParticles = () => {\r\n    if (particleCount === particleCreateFactor) {\r\n      bgQueue.enqueue(new Particle(4, 1));\r\n    }\r\n\r\n    if (particleCount === particleCreateFactor/2) {\r\n      bgQueue.enqueue(new Particle(4, 1));\r\n    }\r\n\r\n    bgQueue.displayAll();\r\n  }\r\n\r\n  p.moveWithBeat = () => {\r\n    //fft.analyze();\r\n\r\n    //particleMoveFactor = p.map(fft.getEnergy(\"bass\"), 0, 225, 0.03, 0.6);\r\n  }\r\n\r\n  p.bg = () =>{\r\n    //fft.analyze();\r\n\r\n    //p.background(fft.getEnergy(\"mid\") * 0.6, fft.getEnergy(\"treble\") * 0.5, fft.getEnergy(\"bass\")* 0.6);\r\n  }\r\n\r\n\r\n\r\n\r\n  //\r\n  //\r\n  //\r\n  //hear lies al information on how to create a wave\r\n  //\r\n  //\r\n  //\r\n  p.calcWave= () =>  {\r\n    // Increment theta (try different values for\r\n    // 'angular velocity' here)\r\n    theta += 0.02;\r\n\r\n    // For every x value, calculate a y value with sine function\r\n    let x = theta;\r\n    for (let i = 0; i < yvalues.length; i++) {\r\n\r\n      yvalues[i] = Math.sin(x) * amplitude;\r\n      backvalues[i] = Math.sin(x+back) * amplitude;\r\n      x += dx;\r\n    }\r\n  }\r\n  p.renderWave = () => {\r\n    p.noStroke();\r\n    p.fill(37, 207, 122);\r\n    // A simple way to draw the wave with an ellipse at each location\r\n    for (let x = 0; x < yvalues.length; x++) {\r\n      var waveHeight = 4*p.height / 8 + yvalues[x]\r\n      p.ellipse((x) * xspacing, p.height, 64,waveHeight);\r\n\r\n    }\r\n  }\r\n  p.backWave = () => {\r\n    p.noStroke();\r\n    p.fill(19, 149, 244);\r\n    // A simple way to draw the wave with an ellipse at each location\r\n    for (let x = 0; x < backvalues.length; x++) {\r\n      var waveHeight = 4*p.height / 8 + backvalues[x]\r\n      p.ellipse((x) * xspacing, p.height, 64,waveHeight);\r\n\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}