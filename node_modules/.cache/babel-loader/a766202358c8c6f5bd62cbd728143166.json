{"ast":null,"code":"import { cssColor } from 'color-functions';\nexport function css2array(string) {\n  let color = cssColor(string);\n  return [color.r, color.g, color.b, Math.round(color.a * 255 / 100)];\n}\n\nfunction hue2rgb(p, q, t) {\n  if (t < 0) {\n    t += 1;\n  }\n\n  if (t > 1) {\n    t -= 1;\n  }\n\n  if (t < 1 / 6) {\n    return p + (q - p) * 6 * t;\n  }\n\n  if (t < 1 / 2) {\n    return q;\n  }\n\n  if (t < 2 / 3) {\n    return p + (q - p) * (2 / 3 - t) * 6;\n  }\n\n  return p;\n}\n\nfunction hsl2rgb(h, s, l) {\n  let m1, m2, hue, r, g, b;\n  s /= 100;\n  l /= 100;\n\n  if (s === 0) {\n    r = g = b = l * 255;\n  } else {\n    if (l <= 0.5) {\n      m2 = l * (s + 1);\n    } else {\n      m2 = l + s - l * s;\n    }\n\n    m1 = l * 2 - m2;\n    hue = h / 360;\n    r = hue2rgb(m1, m2, hue + 1 / 3);\n    g = hue2rgb(m1, m2, hue);\n    b = hue2rgb(m1, m2, hue - 1 / 3);\n  }\n\n  return {\n    r: r,\n    g: g,\n    b: b\n  };\n}\n\nexport function getDistinctColors(numColors) {\n  let colors = new Array(numColors);\n  let j = 0;\n\n  for (let i = 0; i < 360; i += 360 / numColors) {\n    j++;\n    let color = hsl2rgb(i, 100, 30 + j % 4 * 15);\n    colors[j - 1] = [Math.round(color.r * 255), Math.round(color.g * 255), Math.round(color.b * 255)];\n  }\n\n  return colors;\n}\nexport function getRandomColor() {\n  return [Math.floor(Math.random() * 256), Math.floor(Math.random() * 256), Math.floor(Math.random() * 256)];\n}\n/**\n * returns an array of colors based on various options\n * by default this methods return 50 distinct colors\n * @param {object} [options]\n * @param {Array<number>|string}     [options.color] - Array of 3 elements (R, G, B) or a valid css color.\n * @param {Array<Array<number>>|Array<string>} [options.colors] - Array of Array of 3 elements (R, G, B) for each color of each mask\n * @param {boolean}             [options.randomColors=true] - To paint each mask with a random color if color and colors are undefined\n * @param {boolean}             [options.distinctColors=false] - To paint each mask with a different color if color and colors are undefined\n * @param {boolean}             [options.numberColors=50] - number of colors to generate by default\n * @return {Array} Array of colors\n * @private\n */\n\nexport function getColors(options) {\n  let {\n    color,\n    colors,\n    randomColors,\n    // true / false\n    numberColors = 50\n  } = options;\n\n  if (color && !Array.isArray(color)) {\n    color = css2array(color);\n  }\n\n  if (color) {\n    return [color];\n  }\n\n  if (colors) {\n    colors = colors.map(function (color) {\n      if (!Array.isArray(color)) {\n        return css2array(color);\n      }\n\n      return color;\n    });\n    return colors;\n  }\n\n  if (randomColors) {\n    colors = new Array(numberColors);\n\n    for (let i = 0; i < numberColors; i++) {\n      colors[i] = getRandomColor();\n    }\n  }\n\n  return getDistinctColors(numberColors);\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/node_modules/image-js/src/util/color.js"],"names":["cssColor","css2array","string","color","r","g","b","Math","round","a","hue2rgb","p","q","t","hsl2rgb","h","s","l","m1","m2","hue","getDistinctColors","numColors","colors","Array","j","i","getRandomColor","floor","random","getColors","options","randomColors","numberColors","isArray","map"],"mappings":"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","sourcesContent":["import { cssColor } from 'color-functions';\n\nexport function css2array(string) {\n  let color = cssColor(string);\n  return [color.r, color.g, color.b, Math.round((color.a * 255) / 100)];\n}\n\nfunction hue2rgb(p, q, t) {\n  if (t < 0) {\n    t += 1;\n  }\n  if (t > 1) {\n    t -= 1;\n  }\n  if (t < 1 / 6) {\n    return p + (q - p) * 6 * t;\n  }\n  if (t < 1 / 2) {\n    return q;\n  }\n  if (t < 2 / 3) {\n    return p + (q - p) * (2 / 3 - t) * 6;\n  }\n  return p;\n}\n\nfunction hsl2rgb(h, s, l) {\n  let m1, m2, hue, r, g, b;\n  s /= 100;\n  l /= 100;\n\n  if (s === 0) {\n    r = g = b = l * 255;\n  } else {\n    if (l <= 0.5) {\n      m2 = l * (s + 1);\n    } else {\n      m2 = l + s - l * s;\n    }\n\n    m1 = l * 2 - m2;\n    hue = h / 360;\n    r = hue2rgb(m1, m2, hue + 1 / 3);\n    g = hue2rgb(m1, m2, hue);\n    b = hue2rgb(m1, m2, hue - 1 / 3);\n  }\n  return { r: r, g: g, b: b };\n}\n\nexport function getDistinctColors(numColors) {\n  let colors = new Array(numColors);\n  let j = 0;\n  for (let i = 0; i < 360; i += 360 / numColors) {\n    j++;\n    let color = hsl2rgb(i, 100, 30 + (j % 4) * 15);\n    colors[j - 1] = [\n      Math.round(color.r * 255),\n      Math.round(color.g * 255),\n      Math.round(color.b * 255),\n    ];\n  }\n  return colors;\n}\n\nexport function getRandomColor() {\n  return [\n    Math.floor(Math.random() * 256),\n    Math.floor(Math.random() * 256),\n    Math.floor(Math.random() * 256),\n  ];\n}\n\n/**\n * returns an array of colors based on various options\n * by default this methods return 50 distinct colors\n * @param {object} [options]\n * @param {Array<number>|string}     [options.color] - Array of 3 elements (R, G, B) or a valid css color.\n * @param {Array<Array<number>>|Array<string>} [options.colors] - Array of Array of 3 elements (R, G, B) for each color of each mask\n * @param {boolean}             [options.randomColors=true] - To paint each mask with a random color if color and colors are undefined\n * @param {boolean}             [options.distinctColors=false] - To paint each mask with a different color if color and colors are undefined\n * @param {boolean}             [options.numberColors=50] - number of colors to generate by default\n * @return {Array} Array of colors\n * @private\n */\nexport function getColors(options) {\n  let {\n    color,\n    colors,\n    randomColors, // true / false\n    numberColors = 50,\n  } = options;\n\n  if (color && !Array.isArray(color)) {\n    color = css2array(color);\n  }\n\n  if (color) {\n    return [color];\n  }\n\n  if (colors) {\n    colors = colors.map(function (color) {\n      if (!Array.isArray(color)) {\n        return css2array(color);\n      }\n      return color;\n    });\n    return colors;\n  }\n\n  if (randomColors) {\n    colors = new Array(numberColors);\n    for (let i = 0; i < numberColors; i++) {\n      colors[i] = getRandomColor();\n    }\n  }\n\n  return getDistinctColors(numberColors);\n}\n"]},"metadata":{},"sourceType":"module"}