{"ast":null,"code":"import { BasicGarbage } from \"./garbageShapes\"; //these are gonna be the variables for our garbage collection\n\nvar macro_plastic = [];\n\nclass Plastic {\n  constructor(p, index) {\n    this.START_HEIGHT = p.height * 0.56;\n    var ending_height = this.START_HEIGHT - index / 15; // var width = this.START_HEIGHT + index / 10;\n\n    this.x = p.random(\n    /*width*/\n    0, p.width);\n    this.y = p.random(this.START_HEIGHT, ending_height);\n    this.color = p.random(0, 255);\n    this.size = p.random(12, 20);\n  }\n\n  show(p) {\n    p.noStroke();\n    p.fill(this.color); //p.ellipse(this.x, this.y, this.size, this.size);\n\n    var up = this.y + this.size / 2;\n    var down = this.y - this.size / 2;\n    var left = this.x + this.size / 2;\n    var right = this.x - this.size / 2;\n    p.ellipse(this.x, this.y, this.size, this.size);\n    p.ellipse(this.x, up, this.size, this.size);\n    p.ellipse(this.x, down, this.size, this.size);\n    p.ellipse(left, this.y, this.size, this.size);\n    p.ellipse(right, this.y, this.size, this.size);\n  }\n\n}\n\nexport function setupMacroPlastics(p) {\n  //\n  //set up plastic\n  //\n  for (var i = 0; i < 200; i++) {\n    macro_plastic[i] = new Plastic(p, i);\n  }\n}\nexport function drawMacroPlastics(p, macroGrowth2050, current_date) {\n  //calc microplastic\n  //\n  var currentDate = current_date.getFullYear(); // console.log(currentDate);\n  //p.background(230, 230, 250);\n  //console.log(microGrowth2050);\n  // console.log(current_date);\n\n  for (var i = 0; i < macro_plastic.length; i++) {\n    macro_plastic[i].show(p);\n  }\n\n  if (macroGrowth2050 != null) {\n    var newSize = -1 * (macroGrowth2050[currentDate - 1950][1] - 367);\n    newSize = newSize * 5 + 200; // console.log(newSize);\n    //add drops\n\n    if (newSize > macro_plastic.length) {\n      for (var j = macro_plastic.length; j < newSize; j++) {\n        macro_plastic[j] = new Plastic(p, j);\n      }\n    } //remove drops\n\n\n    if (newSize < macro_plastic.length) {\n      var diff = macro_plastic.length - newSize;\n      macro_plastic = macro_plastic.splice(0, diff);\n    }\n  }\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/src/sketches/macroPlastics.js"],"names":["BasicGarbage","macro_plastic","Plastic","constructor","p","index","START_HEIGHT","height","ending_height","x","random","width","y","color","size","show","noStroke","fill","up","down","left","right","ellipse","setupMacroPlastics","i","drawMacroPlastics","macroGrowth2050","current_date","currentDate","getFullYear","length","newSize","j","diff","splice"],"mappings":"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","sourcesContent":["import { BasicGarbage } from \"./garbageShapes\";\r\n//these are gonna be the variables for our garbage collection\r\nvar macro_plastic = [];\r\n\r\nclass Plastic {\r\n    constructor(p, index) {\r\n        this.START_HEIGHT = p.height * 0.56;\r\n        var ending_height = this.START_HEIGHT - index / 15;\r\n        // var width = this.START_HEIGHT + index / 10;\r\n        this.x = p.random(/*width*/ 0, p.width);\r\n        this.y = p.random(this.START_HEIGHT, ending_height);\r\n        this.color = p.random(0, 255);\r\n        this.size = p.random(12, 20);\r\n    }\r\n\r\n    show(p) {\r\n        p.noStroke();\r\n        p.fill(this.color);\r\n        //p.ellipse(this.x, this.y, this.size, this.size);\r\n        var up = this.y+this.size/2\r\n        var down = this.y-this.size/2\r\n        var left = this.x+this.size/2\r\n        var right = this.x-this.size/2\r\n        p.ellipse(this.x,this.y,this.size,this.size)\r\n        p.ellipse(this.x,up,this.size,this.size)\r\n        p.ellipse(this.x,down,this.size,this.size)\r\n        p.ellipse(left,this.y,this.size,this.size)\r\n        p.ellipse(right,this.y,this.size,this.size)\r\n    }\r\n}\r\n\r\nexport function setupMacroPlastics(p) {\r\n    //\r\n    //set up plastic\r\n    //\r\n    for (var i = 0; i < 200; i++) {\r\n        macro_plastic[i] = new Plastic(p, i);\r\n    }\r\n}\r\n\r\nexport function drawMacroPlastics(p, macroGrowth2050, current_date) {\r\n    //calc microplastic\r\n    //\r\n    var currentDate = current_date.getFullYear();\r\n    // console.log(currentDate);\r\n    //p.background(230, 230, 250);\r\n    //console.log(microGrowth2050);\r\n    // console.log(current_date);\r\n\r\n    for (var i = 0; i < macro_plastic.length; i++) {\r\n        macro_plastic[i].show(p);\r\n    }\r\n\r\n    if (macroGrowth2050 != null) {\r\n        var newSize = -1 * (macroGrowth2050[currentDate - 1950][1] - 367);\r\n        newSize = newSize * 5 + 200;\r\n        // console.log(newSize);\r\n        //add drops\r\n        if (newSize > macro_plastic.length) {\r\n            for (var j = macro_plastic.length; j < newSize; j++) {\r\n                macro_plastic[j] = new Plastic(p, j);\r\n            }\r\n        }\r\n        //remove drops\r\n        if (newSize < macro_plastic.length) {\r\n            var diff = macro_plastic.length - newSize;\r\n            macro_plastic = macro_plastic.splice(0, diff);\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}