{"ast":null,"code":"export default function plastic(p) {\n  let canvas; //these are gonna be the variables for our garbage collection\n\n  let plastic_array_2050;\n  let current_plastic_values;\n  let plastic_image_array = new Array(p.floor(200));\n  var image; //these are all variables for our wave function\n\n  let xspacing = 16; // Distance between each horizontal location\n\n  let w; // Width of entire wave\n\n  let theta = 0.15; // Start angle at 0\n\n  let amplitude = 25.0; // Height of wave\n\n  let period = 200.0; // How many pixels before the wave repeats\n\n  let dx = 2; // Value for incrementing x\n\n  let yvalues; // Using an array to store height values for the wave\n\n  let backvalues;\n  let back = 2; // back offset\n\n  p.preload = () => {\n    let i = 0; //plastic_image_array[i] = p.loadImage('plastic_images/bottle1.png');\n    //console.log(plastic_image_array[i]);\n\n    console.log('HERE');\n    p.loadImage('assets/laDefense.jpg', img => {\n      image = img;\n      console.log(image);\n    });\n  };\n\n  p.setup = () => {\n    canvas = p.createCanvas(600, 300); //set up wave\n\n    w = p.width + 16;\n    dx = 2 * Math.PI / period * xspacing;\n    yvalues = new Array(p.floor(w / xspacing));\n    backvalues = new Array(p.floor(w / xspacing)); //set up plastic\n    //load plastic images into Array\n  };\n\n  p.draw = () => {\n    p.background('blue');\n    p.drawPlastic(); //draw wave\n\n    p.calcWave();\n    p.renderWave();\n    p.backWave();\n  }; //\n  //\n  //\n  //hear lies al information on how to create plastic\n  //\n  //\n  //\n\n\n  p.drawPlastic = () => {\n    p.showPlasticBottle();\n  };\n\n  p.showPlasticBottle = () => {\n    let i = 1;\n    let img;\n    p.noStroke(); //p.image(image, 30,30,50,50)\n  };\n\n  p.calcPlastic = () => {\n    //console.log(temp_array)\n    if (plastic_array_2050 != null) {\n      for (let i = 0; i < plastic_array_2050.length; i++) {\n        var amount = parseFloat(plastic_array_2050[i].station); // + parseFloat(temp_array[i*8].land))/2);\n        //console.log(typeof average);\n\n        current_plastic_values[i] = 400 - amount; //console.log(average);\n      } //console.log(typeof temp_array[200]);\n\n    }\n  }; //\n  //\n  //\n  //hear lies al information on how to create a wave\n  //\n  //\n  //\n\n\n  p.calcWave = () => {\n    // Increment theta (try different values for\n    // 'angular velocity' here)\n    theta += 0.02; // For every x value, calculate a y value with sine function\n\n    let x = theta;\n\n    for (let i = 0; i < yvalues.length; i++) {\n      yvalues[i] = Math.sin(x) * amplitude;\n      backvalues[i] = Math.sin(x + back) * amplitude;\n      x += dx;\n    }\n  };\n\n  p.renderWave = () => {\n    p.noStroke();\n    p.fill(37, 207, 122); // A simple way to draw the wave with an ellipse at each location\n\n    for (let x = 0; x < yvalues.length; x++) {\n      var waveHeight = 4 * p.height / 8 + yvalues[x];\n      p.ellipse(x * xspacing, p.height, 64, waveHeight);\n    }\n  };\n\n  p.backWave = () => {\n    p.noStroke();\n    p.fill(19, 149, 244); // A simple way to draw the wave with an ellipse at each location\n\n    for (let x = 0; x < backvalues.length; x++) {\n      var waveHeight = 4 * p.height / 8 + backvalues[x];\n      p.ellipse(x * xspacing, p.height, 64, waveHeight);\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/src/sketches/plastic.js"],"names":["plastic","p","canvas","plastic_array_2050","current_plastic_values","plastic_image_array","Array","floor","image","xspacing","w","theta","amplitude","period","dx","yvalues","backvalues","back","preload","i","console","log","loadImage","img","setup","createCanvas","width","Math","PI","draw","background","drawPlastic","calcWave","renderWave","backWave","showPlasticBottle","noStroke","calcPlastic","length","amount","parseFloat","station","x","sin","fill","waveHeight","height","ellipse"],"mappings":"AAGA,eAAe,SAASA,OAAT,CAAiBC,CAAjB,EAAoB;AAEjC,MAAIC,MAAJ,CAFiC,CAGjC;;AACA,MAAIC,kBAAJ;AACA,MAAIC,sBAAJ;AACA,MAAIC,mBAAmB,GAAG,IAAIC,KAAJ,CAAUL,CAAC,CAACM,KAAF,CAAQ,GAAR,CAAV,CAA1B;AACA,MAAIC,KAAJ,CAPiC,CASjC;;AACA,MAAIC,QAAQ,GAAG,EAAf,CAViC,CAUd;;AACnB,MAAIC,CAAJ,CAXiC,CAW1B;;AACP,MAAIC,KAAK,GAAG,IAAZ,CAZiC,CAYf;;AAClB,MAAIC,SAAS,GAAG,IAAhB,CAbiC,CAaX;;AACtB,MAAIC,MAAM,GAAG,KAAb,CAdiC,CAcb;;AACpB,MAAIC,EAAE,GAAC,CAAP,CAfiC,CAevB;;AACV,MAAIC,OAAJ,CAhBiC,CAgBpB;;AACb,MAAIC,UAAJ;AACA,MAAIC,IAAI,GAAG,CAAX,CAlBiC,CAkBpB;;AAEbhB,EAAAA,CAAC,CAACiB,OAAF,GAAY,MAAM;AAChB,QAAIC,CAAC,GAAG,CAAR,CADgB,CAGhB;AACA;;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACApB,IAAAA,CAAC,CAACqB,SAAF,CAAY,sBAAZ,EAAoCC,GAAG,IAAI;AACzCf,MAAAA,KAAK,GAAGe,GAAR;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAYb,KAAZ;AAED,KAJD;AAKD,GAXD;;AAYAP,EAAAA,CAAC,CAACuB,KAAF,GAAU,MAAM;AACdtB,IAAAA,MAAM,GAAGD,CAAC,CAACwB,YAAF,CAAe,GAAf,EAAoB,GAApB,CAAT,CADc,CAEd;;AACAf,IAAAA,CAAC,GAAGT,CAAC,CAACyB,KAAF,GAAU,EAAd;AACAZ,IAAAA,EAAE,GAAI,IAAEa,IAAI,CAACC,EAAP,GAAYf,MAAb,GAAuBJ,QAA5B;AACAM,IAAAA,OAAO,GAAG,IAAIT,KAAJ,CAAUL,CAAC,CAACM,KAAF,CAAQG,CAAC,GAAGD,QAAZ,CAAV,CAAV;AACAO,IAAAA,UAAU,GAAG,IAAIV,KAAJ,CAAUL,CAAC,CAACM,KAAF,CAAQG,CAAC,GAAGD,QAAZ,CAAV,CAAb,CANc,CAQd;AAEA;AAGD,GAbD;;AAcAR,EAAAA,CAAC,CAAC4B,IAAF,GAAS,MAAM;AACb5B,IAAAA,CAAC,CAAC6B,UAAF,CAAa,MAAb;AACA7B,IAAAA,CAAC,CAAC8B,WAAF,GAFa,CAGb;;AACA9B,IAAAA,CAAC,CAAC+B,QAAF;AACA/B,IAAAA,CAAC,CAACgC,UAAF;AACAhC,IAAAA,CAAC,CAACiC,QAAF;AACD,GAPD,CA9CiC,CAsDjC;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAjC,EAAAA,CAAC,CAAC8B,WAAF,GAAgB,MAAM;AACpB9B,IAAAA,CAAC,CAACkC,iBAAF;AACD,GAFD;;AAIAlC,EAAAA,CAAC,CAACkC,iBAAF,GAAsB,MAAM;AAC1B,QAAIhB,CAAC,GAAG,CAAR;AACA,QAAII,GAAJ;AACAtB,IAAAA,CAAC,CAACmC,QAAF,GAH0B,CAI1B;AAED,GAND;;AAOAnC,EAAAA,CAAC,CAACoC,WAAF,GAAe,MAAM;AAEnB;AACA,QAAIlC,kBAAkB,IAAI,IAA1B,EAA+B;AAC7B,WAAK,IAAIgB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAIhB,kBAAkB,CAACmC,MAAxC,EAAiDnB,CAAC,EAAlD,EAAsD;AAEpD,YAAIoB,MAAM,GAAGC,UAAU,CAACrC,kBAAkB,CAACgB,CAAD,CAAlB,CAAsBsB,OAAvB,CAAvB,CAFoD,CAEE;AACtD;;AACArC,QAAAA,sBAAsB,CAACe,CAAD,CAAtB,GAA4B,MAAIoB,MAAhC,CAJoD,CAKpD;AACD,OAP4B,CAQ7B;;AACD;AACF,GAbD,CAxEiC,CAsFjC;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAtC,EAAAA,CAAC,CAAC+B,QAAF,GAAY,MAAO;AACjB;AACA;AACArB,IAAAA,KAAK,IAAI,IAAT,CAHiB,CAKjB;;AACA,QAAI+B,CAAC,GAAG/B,KAAR;;AACA,SAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,OAAO,CAACuB,MAA5B,EAAoCnB,CAAC,EAArC,EAAyC;AAEvCJ,MAAAA,OAAO,CAACI,CAAD,CAAP,GAAaQ,IAAI,CAACgB,GAAL,CAASD,CAAT,IAAc9B,SAA3B;AACAI,MAAAA,UAAU,CAACG,CAAD,CAAV,GAAgBQ,IAAI,CAACgB,GAAL,CAASD,CAAC,GAACzB,IAAX,IAAmBL,SAAnC;AACA8B,MAAAA,CAAC,IAAI5B,EAAL;AACD;AACF,GAbD;;AAcAb,EAAAA,CAAC,CAACgC,UAAF,GAAe,MAAM;AACnBhC,IAAAA,CAAC,CAACmC,QAAF;AACAnC,IAAAA,CAAC,CAAC2C,IAAF,CAAO,EAAP,EAAW,GAAX,EAAgB,GAAhB,EAFmB,CAGnB;;AACA,SAAK,IAAIF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG3B,OAAO,CAACuB,MAA5B,EAAoCI,CAAC,EAArC,EAAyC;AACvC,UAAIG,UAAU,GAAG,IAAE5C,CAAC,CAAC6C,MAAJ,GAAa,CAAb,GAAiB/B,OAAO,CAAC2B,CAAD,CAAzC;AACAzC,MAAAA,CAAC,CAAC8C,OAAF,CAAWL,CAAD,GAAMjC,QAAhB,EAA0BR,CAAC,CAAC6C,MAA5B,EAAoC,EAApC,EAAuCD,UAAvC;AAED;AACF,GATD;;AAUA5C,EAAAA,CAAC,CAACiC,QAAF,GAAa,MAAM;AACjBjC,IAAAA,CAAC,CAACmC,QAAF;AACAnC,IAAAA,CAAC,CAAC2C,IAAF,CAAO,EAAP,EAAW,GAAX,EAAgB,GAAhB,EAFiB,CAGjB;;AACA,SAAK,IAAIF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG1B,UAAU,CAACsB,MAA/B,EAAuCI,CAAC,EAAxC,EAA4C;AAC1C,UAAIG,UAAU,GAAG,IAAE5C,CAAC,CAAC6C,MAAJ,GAAa,CAAb,GAAiB9B,UAAU,CAAC0B,CAAD,CAA5C;AACAzC,MAAAA,CAAC,CAAC8C,OAAF,CAAWL,CAAD,GAAMjC,QAAhB,EAA0BR,CAAC,CAAC6C,MAA5B,EAAoC,EAApC,EAAuCD,UAAvC;AAED;AACF,GATD;AAUD","sourcesContent":["\r\n\r\n\r\nexport default function plastic(p) {\r\n\r\n  let canvas;\r\n  //these are gonna be the variables for our garbage collection\r\n  let plastic_array_2050;\r\n  let current_plastic_values;\r\n  let plastic_image_array = new Array(p.floor(200));\r\n  var image;\r\n\r\n  //these are all variables for our wave function\r\n  let xspacing = 16; // Distance between each horizontal location\r\n  let w; // Width of entire wave\r\n  let theta = 0.15; // Start angle at 0\r\n  let amplitude = 25.0; // Height of wave\r\n  let period = 200.0; // How many pixels before the wave repeats\r\n  let dx=2; // Value for incrementing x\r\n  let yvalues; // Using an array to store height values for the wave\r\n  let backvalues;\r\n  let back = 2 // back offset\r\n\r\n  p.preload = () => {\r\n    let i = 0;\r\n\r\n    //plastic_image_array[i] = p.loadImage('plastic_images/bottle1.png');\r\n    //console.log(plastic_image_array[i]);\r\n    console.log('HERE');\r\n    p.loadImage('assets/laDefense.jpg', img => {\r\n      image = img;\r\n      console.log(image);\r\n\r\n    });\r\n  }\r\n  p.setup = () => {\r\n    canvas = p.createCanvas(600, 300);\r\n    //set up wave\r\n    w = p.width + 16;\r\n    dx = (2*Math.PI / period) * xspacing;\r\n    yvalues = new Array(p.floor(w / xspacing));\r\n    backvalues = new Array(p.floor(w / xspacing));\r\n\r\n    //set up plastic\r\n\r\n    //load plastic images into Array\r\n\r\n\r\n  }\r\n  p.draw = () => {\r\n    p.background('blue');\r\n    p.drawPlastic();\r\n    //draw wave\r\n    p.calcWave();\r\n    p.renderWave();\r\n    p.backWave();\r\n  }\r\n  //\r\n  //\r\n  //\r\n  //hear lies al information on how to create plastic\r\n  //\r\n  //\r\n  //\r\n  p.drawPlastic = () => {\r\n    p.showPlasticBottle()\r\n  }\r\n\r\n  p.showPlasticBottle = () => {\r\n    let i = 1;\r\n    let img;\r\n    p.noStroke();\r\n    //p.image(image, 30,30,50,50)\r\n\r\n  }\r\n  p.calcPlastic= () => {\r\n\r\n    //console.log(temp_array)\r\n    if (plastic_array_2050 != null){\r\n      for (let i = 0; i < (plastic_array_2050.length); i++) {\r\n\r\n        var amount = parseFloat(plastic_array_2050[i].station)// + parseFloat(temp_array[i*8].land))/2);\r\n        //console.log(typeof average);\r\n        current_plastic_values[i] = 400-amount;\r\n        //console.log(average);\r\n      }\r\n      //console.log(typeof temp_array[200]);\r\n    }\r\n  }\r\n  //\r\n  //\r\n  //\r\n  //hear lies al information on how to create a wave\r\n  //\r\n  //\r\n  //\r\n  p.calcWave= () =>  {\r\n    // Increment theta (try different values for\r\n    // 'angular velocity' here)\r\n    theta += 0.02;\r\n\r\n    // For every x value, calculate a y value with sine function\r\n    let x = theta;\r\n    for (let i = 0; i < yvalues.length; i++) {\r\n\r\n      yvalues[i] = Math.sin(x) * amplitude;\r\n      backvalues[i] = Math.sin(x+back) * amplitude;\r\n      x += dx;\r\n    }\r\n  }\r\n  p.renderWave = () => {\r\n    p.noStroke();\r\n    p.fill(37, 207, 122);\r\n    // A simple way to draw the wave with an ellipse at each location\r\n    for (let x = 0; x < yvalues.length; x++) {\r\n      var waveHeight = 4*p.height / 8 + yvalues[x]\r\n      p.ellipse((x) * xspacing, p.height, 64,waveHeight);\r\n\r\n    }\r\n  }\r\n  p.backWave = () => {\r\n    p.noStroke();\r\n    p.fill(19, 149, 244);\r\n    // A simple way to draw the wave with an ellipse at each location\r\n    for (let x = 0; x < backvalues.length; x++) {\r\n      var waveHeight = 4*p.height / 8 + backvalues[x]\r\n      p.ellipse((x) * xspacing, p.height, 64,waveHeight);\r\n\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}