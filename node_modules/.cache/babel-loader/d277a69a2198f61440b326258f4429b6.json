{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kuent\\\\Documents\\\\FinishDipshit\\\\Creative\\\\Ocean-Weather-Visualization\\\\src\\\\App.js\";\nimport React from 'react';\nimport './App.css';\nimport Child1 from './Child1'; // import both children\n\nimport Child2 from './Child2';\nimport axios from 'axios'; // used for API stuff\n// below imports are for static files to avoid 429 errors from requests while testing\n\nimport carbonJSON from './static/carbon.json';\nimport methaneJSON from './static/methane.json';\nimport nitrousJSON from './static/nitrous.json';\nimport temperatureJSON from './static/temperature.json'; //get plastic //repeat for others\n\nimport macroGrowth2050 from './plastic_pollution/macroGrowth2050.json';\nimport * as d3 from 'd3'; // import {sliderBottom} from 'd3-simple-slider';\n// end testing-related import block\n\nclass App extends React.Component {\n  // you can create class-scope fields in here like in Java\n  constructor(props) {\n    super(props);\n    this.createSlider = this.createSlider.bind(this);\n    this.state = {\n      // you can add new states here\n      // initialize below states to null if not using static data for testing\n      carbonData: carbonJSON.co2,\n      methaneData: methaneJSON.methane,\n      nitrousData: nitrousJSON.nitrous,\n      temperatureData: temperatureJSON.result,\n      //get plastic //repeat for others\n      macroGrowth2050: macroGrowth2050.macroGrowth2050,\n      currentDate: new Date(),\n      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\n      dataIsLoaded: false\n    };\n  }\n\n  loadData() {\n    const fetchData = async () => {\n      const proxyurl = \"https://cors-anywhere.herokuapp.com/\"; // proxy url that is used in combination with real url\n\n      let promises = []; // make an array of promises\n\n      this.props.urls.split(\",\").forEach(function (url) {\n        promises.push(axios(proxyurl + url)); // push request onto promise array\n      }); // order of promises is retained; reference: https://stackoverflow.com/questions/28066429/promise-all-order-of-resolved-values/28066851\n\n      const data = await Promise.all(promises);\n      this.state.carbonData = data[0].data.co2; // directly modifying the state like this does NOT force re-render\n\n      this.state.methaneData = data[1].data.methane;\n      this.state.nitrousData = data[2].data.nitrous;\n      this.state.temperatureData = data[3].data.result;\n      this.setState({\n        dataIsLoaded: true\n      }); // calling this.setState(...) forces re-render\n    };\n\n    fetchData();\n  }\n\n  createSlider() {\n    const self = this;\n    let formatDateIntoYear = d3.timeFormat(\"%Y\");\n    let formatDate = d3.timeFormat(\"%B %d, %Y\"); // https://github.com/d3/d3-time-format\n\n    let startDate = new Date(\"2004-11-01\");\n    let endDate = new Date(\"2017-04-01\");\n    let margin = {\n      top: 50,\n      right: 50,\n      bottom: 0,\n      left: 50\n    };\n    let width = 960 - margin.left - margin.right;\n    let height = 500 - margin.top - margin.bottom;\n    let timer = 0;\n    let currentValue = 0;\n    let targetValue = width;\n    let playButton = d3.select(\"#play-button\"); // select play button\n\n    playButton.on(\"click\", function () {\n      let button = d3.select(this); // recall 'this' references the d3 selection\n\n      if (button.text() === \"Pause\") {\n        clearInterval(timer); // if pause, clear interval\n\n        button.text(\"Play\"); // change text to play\n      } else {\n        timer = setInterval(function () {\n          // play interval asynchronously\n          update(x.invert(currentValue)); // update handle position\n\n          currentValue = currentValue + targetValue / 151; // update/adjust current value tick jups\n\n          if (currentValue > targetValue) {\n            // if at end of range\n            // currentValue = 0;\n            clearInterval(timer); // clear interval so that it can restart\n\n            playButton.text(\"Play\"); // at end of interval, change text to play\n          }\n\n          self.setState({\n            currentDate: x.invert(currentValue)\n          }); // communicate with child\n        }, 100); // loops for about 20 seconds going from month to month\n\n        button.text(\"Pause\"); // change text to pause\n      }\n    });\n    let svg = d3.select(\".App\") // appends svg on top of .App svg\n    .append(\"svg\") // add new svg on top of exterior svg\n    .attr(\"width\", width + margin.left + margin.right) // set width of svg\n    .attr(\"height\", height + margin.top + margin.bottom); // set height of svg\n\n    let slider = svg.append(\"g\") // create the slider\n    .attr(\"class\", \"slider\") // apply slider css properties\n    .attr(\"transform\", \"translate(\" + margin.left + \",\" + height / 5 + \")\"); // shift from left and make it higher\n\n    let x = d3.scaleTime() // https://observablehq.com/@d3/d3-scaletime\n    .domain([startDate, endDate]) // use timescale domain between start and end dates\n    .range([0, targetValue]) // define range of slider being from beginning to end of its range\n    .clamp(true); // ensure that handle does not escape range\n\n    slider.append(\"line\").attr(\"class\", \"track\") // apply track css properties\n    .attr(\"x1\", x.range()[0]).attr(\"x2\", x.range()[1]).select(function () {\n      return this.parentNode.appendChild(this.cloneNode(true));\n    }).attr(\"class\", \"track-inset\") // apply track-inset cs properties\n    .select(function () {\n      return this.parentNode.appendChild(this.cloneNode(true));\n    }).attr(\"class\", \"track-overlay\") // apply track-overlay css properties\n    .call(d3.drag() // dragging behavior\n    .on(\"start.interrupt\", function () {\n      // on any interrupts\n      slider.interrupt();\n    }).on(\"start drag\", function (event) {\n      // while hande is dragged\n      currentValue = event.x; // store current value\n\n      update(x.invert(currentValue)); // update handle location\n    }).on(\"end\", function (event) {\n      // when handle is released\n      self.setState({\n        currentDate: x.invert(currentValue)\n      });\n    }));\n    let handle = slider.insert(\"circle\", \".track-overlay\") // inserts the track\n    .attr(\"class\", \"handle\") // apply .handle css properties\n    .attr(\"r\", 9); // radius of handle\n\n    let label = slider.append(\"text\") // append text onto slider\n    .attr(\"class\", \"label\") // apply label css properties\n    .attr(\"text-anchor\", \"middle\") // anchor text to middle\n    .text(formatDate(startDate)) // display currently selected date\n    .attr(\"transform\", \"translate(0,\" + -25 + \")\"); // shift it to the right\n\n    document.addEventListener('keydown', function (event) {\n      // listen for keypresses\n      switch (event.key) {\n        // we are only concerned about left/right arrow keys\n        case \"ArrowLeft\":\n          currentValue = // ensure handle does not decrement below zero\n          currentValue === 0 ? currentValue : currentValue - 1;\n          update(x.invert(currentValue)); // shift handle one to left\n\n          break;\n\n        case \"ArrowRight\":\n          currentValue++; // increment current value\n\n          update(x.invert(currentValue)); // shift handle one to right\n\n          break;\n\n        default:\n          break;\n      }\n    });\n    slider.insert(\"g\", \".track-overlay\") // create the track overlay\n    .attr(\"class\", \"ticks\") // apply ticks css properties\n    .attr(\"transform\", \"translate(0,\" + 18 + \")\") // shift it to right\n    .selectAll(\"text\") // apply following changes to all text on slider (ticks)\n    .data(x.ticks(10)) // https://observablehq.com/@d3/d3-scaletime\n    .enter() // https://observablehq.com/@dnarvaez27/understanding-enter-exit-merge-key-function\n    .append(\"text\") // append text representing ticks\n    .attr(\"x\", x) // initialize x position\n    .attr(\"y\", 10) // initialize y position\n    .attr(\"text-anchor\", \"middle\") // center text on tick\n    .text(d => formatDateIntoYear(d)); // write formatted date as text\n\n    function update(h) {\n      // update position and text of label according to slider scale\n      handle.attr(\"cx\", x(h)); // update handle position\n\n      label.attr(\"x\", x(h)) // update tick label position\n      .text(formatDate(h)); // update tick label with new date\n    }\n  }\n\n  componentDidMount() {\n    // this is called when the page is initially loaded/mounted\n    console.log(\"Parent Mounted\"); // this.loadData(); // comment this out if using static files; loadData() will make API requests\n\n    this.createSlider();\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    // when re-render occurs, componentDidUpdate() is called\n    console.log(\"Parent Updated\");\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"App\",\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Child1, {\n      currentDate: this.state.currentDate,\n      tempArray: this.state.temperatureData // need to pass data into children via props\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Child2, {\n      currentDate: this.state.currentDate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      id: \"play-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 17\n      }\n    }, \"Play\"));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/src/App.js"],"names":["React","Child1","Child2","axios","carbonJSON","methaneJSON","nitrousJSON","temperatureJSON","macroGrowth2050","d3","App","Component","constructor","props","createSlider","bind","state","carbonData","co2","methaneData","methane","nitrousData","nitrous","temperatureData","result","currentDate","Date","dataIsLoaded","loadData","fetchData","proxyurl","promises","urls","split","forEach","url","push","data","Promise","all","setState","self","formatDateIntoYear","timeFormat","formatDate","startDate","endDate","margin","top","right","bottom","left","width","height","timer","currentValue","targetValue","playButton","select","on","button","text","clearInterval","setInterval","update","x","invert","svg","append","attr","slider","scaleTime","domain","range","clamp","parentNode","appendChild","cloneNode","call","drag","interrupt","event","handle","insert","label","document","addEventListener","key","selectAll","ticks","enter","d","h","componentDidMount","console","log","componentDidUpdate","prevProps","prevState","snapshot","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport Child1 from './Child1' // import both children\r\nimport Child2 from './Child2'\r\nimport axios from 'axios'; // used for API stuff\r\n\r\n// below imports are for static files to avoid 429 errors from requests while testing\r\nimport carbonJSON from './static/carbon.json'\r\nimport methaneJSON from './static/methane.json'\r\nimport nitrousJSON from './static/nitrous.json'\r\nimport temperatureJSON from './static/temperature.json'\r\n\r\n//get plastic //repeat for others\r\nimport macroGrowth2050 from './plastic_pollution/macroGrowth2050.json'\r\n\r\n\r\nimport * as d3 from 'd3';\r\n// import {sliderBottom} from 'd3-simple-slider';\r\n// end testing-related import block\r\n\r\nclass App extends React.Component {\r\n    // you can create class-scope fields in here like in Java\r\n    constructor(props) {\r\n        super(props);\r\n        this.createSlider = this.createSlider.bind(this);\r\n        this.state = { // you can add new states here\r\n            // initialize below states to null if not using static data for testing\r\n            carbonData: carbonJSON.co2,\r\n            methaneData: methaneJSON.methane,\r\n            nitrousData: nitrousJSON.nitrous,\r\n            temperatureData: temperatureJSON.result,\r\n\r\n            //get plastic //repeat for others\r\n            macroGrowth2050: macroGrowth2050.macroGrowth2050,\r\n\r\n\r\n            currentDate: new Date(), // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\r\n            dataIsLoaded: false\r\n        };\r\n    }\r\n\r\n    loadData() {\r\n        const fetchData = async () => {\r\n            const proxyurl = \"https://cors-anywhere.herokuapp.com/\"; // proxy url that is used in combination with real url\r\n\r\n            let promises = []; // make an array of promises\r\n            this.props.urls.split(\",\").forEach(function(url) {\r\n                promises.push(axios(proxyurl + url)); // push request onto promise array\r\n            })\r\n\r\n            // order of promises is retained; reference: https://stackoverflow.com/questions/28066429/promise-all-order-of-resolved-values/28066851\r\n            const data = await Promise.all(promises);\r\n\r\n            this.state.carbonData = data[0].data.co2; // directly modifying the state like this does NOT force re-render\r\n            this.state.methaneData = data[1].data.methane;\r\n            this.state.nitrousData = data[2].data.nitrous;\r\n            this.state.temperatureData = data[3].data.result;\r\n\r\n            this.setState({ dataIsLoaded: true }); // calling this.setState(...) forces re-render\r\n        };\r\n        fetchData();\r\n    }\r\n\r\n    createSlider() {\r\n        const self = this;\r\n\r\n        let formatDateIntoYear = d3.timeFormat(\"%Y\");\r\n        let formatDate = d3.timeFormat(\"%B %d, %Y\");\r\n        // https://github.com/d3/d3-time-format\r\n\r\n        let startDate = new Date(\"2004-11-01\");\r\n        let endDate = new Date(\"2017-04-01\");\r\n\r\n        let margin = {top:50, right:50, bottom:0, left:50};\r\n        let width = 960 - margin.left - margin.right;\r\n        let height = 500 - margin.top - margin.bottom;\r\n\r\n        let timer = 0;\r\n        let currentValue = 0;\r\n        let targetValue = width;\r\n\r\n        let playButton = d3.select(\"#play-button\"); // select play button\r\n\r\n        playButton\r\n            .on(\"click\", function() {\r\n                let button = d3.select(this); // recall 'this' references the d3 selection\r\n                if (button.text() === \"Pause\") {\r\n                    clearInterval(timer); // if pause, clear interval\r\n                    button.text(\"Play\"); // change text to play\r\n                } else {\r\n                    timer = setInterval(function() { // play interval asynchronously\r\n                        update(x.invert(currentValue)); // update handle position\r\n                        currentValue = currentValue + (targetValue / 151); // update/adjust current value tick jups\r\n                        if (currentValue > targetValue) { // if at end of range\r\n                            // currentValue = 0;\r\n                            clearInterval(timer); // clear interval so that it can restart\r\n                            playButton.text(\"Play\"); // at end of interval, change text to play\r\n                        }\r\n                        self.setState({ currentDate: x.invert(currentValue) }); // communicate with child\r\n                    }, 100); // loops for about 20 seconds going from month to month\r\n                    button.text(\"Pause\"); // change text to pause\r\n                }\r\n            })\r\n\r\n\r\n        let svg = d3.select(\".App\") // appends svg on top of .App svg\r\n            .append(\"svg\") // add new svg on top of exterior svg\r\n            .attr(\"width\", width + margin.left + margin.right) // set width of svg\r\n            .attr(\"height\", height + margin.top + margin.bottom); // set height of svg\r\n\r\n        let slider = svg.append(\"g\") // create the slider\r\n            .attr(\"class\", \"slider\") // apply slider css properties\r\n            .attr(\"transform\", \"translate(\" + margin.left + \",\" + height / 5 + \")\"); // shift from left and make it higher\r\n\r\n        let x = d3.scaleTime() // https://observablehq.com/@d3/d3-scaletime\r\n            .domain([startDate, endDate]) // use timescale domain between start and end dates\r\n            .range([0, targetValue]) // define range of slider being from beginning to end of its range\r\n            .clamp(true); // ensure that handle does not escape range\r\n\r\n        slider.append(\"line\")\r\n            .attr(\"class\", \"track\") // apply track css properties\r\n            .attr(\"x1\", x.range()[0])\r\n            .attr(\"x2\", x.range()[1])\r\n            .select(function() {\r\n                return this.parentNode.appendChild(this.cloneNode(true));\r\n            })\r\n            .attr(\"class\", \"track-inset\") // apply track-inset cs properties\r\n            .select(function() {\r\n                return this.parentNode.appendChild(this.cloneNode(true));\r\n            })\r\n            .attr(\"class\", \"track-overlay\") // apply track-overlay css properties\r\n            .call(d3.drag() // dragging behavior\r\n                .on(\"start.interrupt\", function() { // on any interrupts\r\n                    slider.interrupt();\r\n                })\r\n                .on(\"start drag\", function(event) { // while hande is dragged\r\n                    currentValue = event.x; // store current value\r\n                    update(x.invert(currentValue)); // update handle location\r\n                })\r\n                .on(\"end\", function(event) { // when handle is released\r\n                    self.setState({ currentDate: x.invert(currentValue) });\r\n                })\r\n            );\r\n\r\n        let handle = slider.insert(\"circle\", \".track-overlay\") // inserts the track\r\n            .attr(\"class\", \"handle\") // apply .handle css properties\r\n            .attr(\"r\", 9); // radius of handle\r\n\r\n        let label = slider.append(\"text\") // append text onto slider\r\n            .attr(\"class\", \"label\") // apply label css properties\r\n            .attr(\"text-anchor\", \"middle\") // anchor text to middle\r\n            .text(formatDate(startDate)) // display currently selected date\r\n            .attr(\"transform\", \"translate(0,\" + (-25) + \")\") // shift it to the right\r\n\r\n        document.addEventListener('keydown', function(event) { // listen for keypresses\r\n            switch (event.key) { // we are only concerned about left/right arrow keys\r\n                case \"ArrowLeft\":\r\n                    currentValue = // ensure handle does not decrement below zero\r\n                        (currentValue === 0) ? currentValue : currentValue - 1;\r\n                    update(x.invert(currentValue)); // shift handle one to left\r\n                    break;\r\n                case \"ArrowRight\":\r\n                    currentValue++; // increment current value\r\n                    update(x.invert(currentValue)); // shift handle one to right\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        });\r\n\r\n        slider.insert(\"g\", \".track-overlay\") // create the track overlay\r\n            .attr(\"class\", \"ticks\") // apply ticks css properties\r\n            .attr(\"transform\", \"translate(0,\" + 18 + \")\") // shift it to right\r\n            .selectAll(\"text\") // apply following changes to all text on slider (ticks)\r\n            .data(x.ticks(10)) // https://observablehq.com/@d3/d3-scaletime\r\n            .enter() // https://observablehq.com/@dnarvaez27/understanding-enter-exit-merge-key-function\r\n            .append(\"text\") // append text representing ticks\r\n            .attr(\"x\", x) // initialize x position\r\n            .attr(\"y\", 10) // initialize y position\r\n            .attr(\"text-anchor\", \"middle\") // center text on tick\r\n            .text((d) => formatDateIntoYear(d)); // write formatted date as text\r\n\r\n        function update(h) {\r\n            // update position and text of label according to slider scale\r\n            handle.attr(\"cx\", x(h)); // update handle position\r\n            label\r\n                .attr(\"x\", x(h)) // update tick label position\r\n                .text(formatDate(h)); // update tick label with new date\r\n        }\r\n    }\r\n\r\n    componentDidMount() { // this is called when the page is initially loaded/mounted\r\n        console.log(\"Parent Mounted\");\r\n        // this.loadData(); // comment this out if using static files; loadData() will make API requests\r\n        this.createSlider();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) { // when re-render occurs, componentDidUpdate() is called\r\n        console.log(\"Parent Updated\");\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"App\" className=\"App\">\r\n                <Child1\r\n                    currentDate={this.state.currentDate}\r\n                    tempArray={this.state.temperatureData} // need to pass data into children via props\r\n                />\r\n                <Child2\r\n                    currentDate={this.state.currentDate}\r\n                />\r\n                <button id=\"play-button\">Play</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}