{"ast":null,"code":"/**\n * In mathematical morphology, the closing of a set A by a structuring element B is the erosion of the dilation of that set (Wikipedia).\n * In image processing, closing is, together with opening, the basic workhorse of morphological noise removal.\n * Opening removes small objects, while closing removes small holes.\n * http://docs.opencv.org/2.4/doc/tutorials/imgproc/opening_closing_hats/opening_closing_hats.html\n * @memberof Image\n * @instance\n * @param {object} [options]\n * @param {Array<Array<number>>} [options.kernel] - The kernel can only have ones and zeros. Default: [[1, 1, 1], [1, 1, 1], [1, 1, 1]]\n * @param {number} [options.iterations=1] - Number of iterations of the morphological transform\n * @return {Image}\n */\nexport default function close(options = {}) {\n  let {\n    kernel = [[1, 1, 1], [1, 1, 1], [1, 1, 1]],\n    iterations = 1\n  } = options;\n  this.checkProcessable('close', {\n    bitDepth: [1, 8, 16],\n    components: 1,\n    alpha: 0\n  });\n\n  if (kernel.columns % 2 === 0 || kernel.rows % 2 === 0) {\n    throw new TypeError('close: The number of rows and columns of the kernel must be odd');\n  }\n\n  let newImage = this;\n\n  for (let i = 0; i < iterations; i++) {\n    newImage = newImage.dilate({\n      kernel\n    }).erode({\n      kernel\n    });\n  }\n\n  return newImage;\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/node_modules/image-js/src/image/morphology/close.js"],"names":["close","options","kernel","iterations","checkProcessable","bitDepth","components","alpha","columns","rows","TypeError","newImage","i","dilate","erode"],"mappings":"AAAA;;;;;;;;;;;;AAYA,eAAe,SAASA,KAAT,CAAeC,OAAO,GAAG,EAAzB,EAA6B;AAC1C,MAAI;AACFC,IAAAA,MAAM,GAAG,CACP,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADO,EAEP,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFO,EAGP,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAHO,CADP;AAMFC,IAAAA,UAAU,GAAG;AANX,MAOAF,OAPJ;AASA,OAAKG,gBAAL,CAAsB,OAAtB,EAA+B;AAC7BC,IAAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,EAAP,CADmB;AAE7BC,IAAAA,UAAU,EAAE,CAFiB;AAG7BC,IAAAA,KAAK,EAAE;AAHsB,GAA/B;;AAKA,MAAIL,MAAM,CAACM,OAAP,GAAiB,CAAjB,KAAuB,CAAvB,IAA4BN,MAAM,CAACO,IAAP,GAAc,CAAd,KAAoB,CAApD,EAAuD;AACrD,UAAM,IAAIC,SAAJ,CACJ,iEADI,CAAN;AAGD;;AAED,MAAIC,QAAQ,GAAG,IAAf;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,UAApB,EAAgCS,CAAC,EAAjC,EAAqC;AACnCD,IAAAA,QAAQ,GAAGA,QAAQ,CAACE,MAAT,CAAgB;AAAEX,MAAAA;AAAF,KAAhB,EAA4BY,KAA5B,CAAkC;AAAEZ,MAAAA;AAAF,KAAlC,CAAX;AACD;;AACD,SAAOS,QAAP;AACD","sourcesContent":["/**\n * In mathematical morphology, the closing of a set A by a structuring element B is the erosion of the dilation of that set (Wikipedia).\n * In image processing, closing is, together with opening, the basic workhorse of morphological noise removal.\n * Opening removes small objects, while closing removes small holes.\n * http://docs.opencv.org/2.4/doc/tutorials/imgproc/opening_closing_hats/opening_closing_hats.html\n * @memberof Image\n * @instance\n * @param {object} [options]\n * @param {Array<Array<number>>} [options.kernel] - The kernel can only have ones and zeros. Default: [[1, 1, 1], [1, 1, 1], [1, 1, 1]]\n * @param {number} [options.iterations=1] - Number of iterations of the morphological transform\n * @return {Image}\n */\nexport default function close(options = {}) {\n  let {\n    kernel = [\n      [1, 1, 1],\n      [1, 1, 1],\n      [1, 1, 1],\n    ],\n    iterations = 1,\n  } = options;\n\n  this.checkProcessable('close', {\n    bitDepth: [1, 8, 16],\n    components: 1,\n    alpha: 0,\n  });\n  if (kernel.columns % 2 === 0 || kernel.rows % 2 === 0) {\n    throw new TypeError(\n      'close: The number of rows and columns of the kernel must be odd',\n    );\n  }\n\n  let newImage = this;\n  for (let i = 0; i < iterations; i++) {\n    newImage = newImage.dilate({ kernel }).erode({ kernel });\n  }\n  return newImage;\n}\n"]},"metadata":{},"sourceType":"module"}