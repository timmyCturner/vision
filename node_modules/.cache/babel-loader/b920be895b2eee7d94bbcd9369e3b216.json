{"ast":null,"code":"let canvas; //these are gonna be the variables for our garbage collection\n\nvar drops = [];\nvar micro_Size = 5;\n\nclass Drop {\n  constructor(p) {\n    this.x = p.random(const_start_height, p.width);\n    this.y = p.random(const_start_height, p.height);\n  }\n\n  show(p) {\n    p.noStroke();\n    p.fill(255);\n    p.ellipse(this.x, this.y, p.random(5, micro_Size), p.random(5, micro_Size));\n  }\n\n  update(p) {\n    this.speed = this.speed = p.random(2, 4);\n    ;\n    this.gravity = 1.05;\n    this.y = this.y + this.speed * this.gravity;\n\n    if (this.y > p.height) {\n      this.y = const_start_height;\n      this.gravity = 0;\n    }\n  }\n\n}\n\nexport function setupDrops(p, microGrowth2050) {\n  //\n  //set up plastic\n  //\n  for (var i = 0; i < 200; i++) {\n    drops[i] = new Drop(p);\n  }\n}\nexport function drawDots(p, microGrowth2050, current_date) {\n  //calc microplastic\n  //\n  var currentDate = current_date.getFullYear(); //p.background(230, 230, 250);\n  //console.log(microGrowth2050);\n  //console.log(current_date);\n\n  for (var i = 0; i < drops.length; i++) {\n    drops[i].update(p);\n    drops[i].show(p);\n  }\n\n  if (microGrowth2050 != null) {\n    var newSize = -1 * (microGrowth2050[currentDate - 1950][1] - 367);\n    newSize = newSize * 2 + 200; //add drops\n\n    if (newSize > drops.length) {\n      for (var i = drops.length; i < newSize; i++) {\n        drops[i] = new Drop(p);\n      }\n    } //remove drops\n\n\n    if (newSize < drops.length) {\n      var diffrenece = drops.length - newSize;\n      drops = drops.splice(0, diffrenece);\n    }\n  }\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/src/sketches/microPlastic.js"],"names":["canvas","drops","micro_Size","Drop","constructor","p","x","random","const_start_height","width","y","height","show","noStroke","fill","ellipse","update","speed","gravity","setupDrops","microGrowth2050","i","drawDots","current_date","currentDate","getFullYear","length","newSize","diffrenece","splice"],"mappings":"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","sourcesContent":["\r\nlet canvas;\r\n//these are gonna be the variables for our garbage collection\r\nvar drops = []\r\nvar micro_Size = 5;\r\n\r\n\r\n\r\nclass Drop{\r\n\r\n  constructor(p){\r\n    this.x = p.random(const_start_height, p.width);\r\n    this.y = p.random(const_start_height, p.height);\r\n  }\r\n\r\n\r\n  show(p) {\r\n    p.noStroke();\r\n    p.fill(255);\r\n    p.ellipse(this.x, this.y, p.random(5,micro_Size), p.random(5, micro_Size));\r\n  }\r\n  update(p) {\r\n    this.speed = this.speed = p.random(2, 4);;\r\n    this.gravity = 1.05;\r\n    this.y = this.y + this.speed*this.gravity;\r\n\r\n    if (this.y > p.height) {\r\n      this.y = const_start_height;\r\n      this.gravity = 0;\r\n      }\r\n    }\r\n  }\r\n\r\nexport function setupDrops(p,microGrowth2050)  {\r\n\r\n  //\r\n  //set up plastic\r\n  //\r\n    for(var i = 0; i < 200; i++) {\r\n        drops[i] = new Drop(p);\r\n    }\r\n  }\r\n\r\nexport function drawDots(p,microGrowth2050,current_date) {\r\n  //calc microplastic\r\n  //\r\n  var currentDate = current_date.getFullYear()\r\n  //p.background(230, 230, 250);\r\n  //console.log(microGrowth2050);\r\n  //console.log(current_date);\r\n\r\n  for (var i = 0; i < drops.length; i++) {\r\n    drops[i].update(p);\r\n    drops[i].show(p);\r\n  }\r\n  if (microGrowth2050 != null){\r\n\r\n     var newSize = -1*(microGrowth2050[(currentDate -1950)][1]-367)\r\n     newSize = newSize *2 +200\r\n     //add drops\r\n     if (newSize>drops.length){\r\n       for (var i = drops.length; i<newSize; i++){\r\n         drops[i] = new Drop(p);\r\n       }\r\n\r\n     }\r\n     //remove drops\r\n     if (newSize<drops.length){\r\n       var diffrenece = drops.length-newSize\r\n       drops = drops.splice(0, diffrenece);\r\n\r\n\r\n\r\n     }\r\n  }\r\n\r\n\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}