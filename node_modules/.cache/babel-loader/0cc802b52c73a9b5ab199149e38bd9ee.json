{"ast":null,"code":"'use strict;';\n/**\n * Created by acastillo on 7/7/16.\n */\n\nvar FFTUtils = require(\"ml-fft\").FFTUtils;\n\nfunction convolutionFFT(input, kernel, opt) {\n  var tmp = matrix2Array(input);\n  var inputData = tmp.data;\n  var options = Object.assign({\n    normalize: false,\n    divisor: 1,\n    rows: tmp.rows,\n    cols: tmp.cols\n  }, opt);\n  var nRows, nCols;\n\n  if (options.rows && options.cols) {\n    nRows = options.rows;\n    nCols = options.cols;\n  } else {\n    throw new Error(\"Invalid number of rows or columns \" + nRows + \" \" + nCols);\n  }\n\n  var divisor = options.divisor;\n  var i, j;\n  var kHeight = kernel.length;\n  var kWidth = kernel[0].length;\n\n  if (options.normalize) {\n    divisor = 0;\n\n    for (i = 0; i < kHeight; i++) for (j = 0; j < kWidth; j++) divisor += kernel[i][j];\n  }\n\n  if (divisor === 0) {\n    throw new RangeError('convolution: The divisor is equal to zero');\n  }\n\n  var radix2Sized = FFTUtils.toRadix2(inputData, nRows, nCols);\n  var conv = FFTUtils.convolute(radix2Sized.data, kernel, radix2Sized.rows, radix2Sized.cols);\n  conv = FFTUtils.crop(conv, radix2Sized.rows, radix2Sized.cols, nRows, nCols);\n\n  if (divisor != 0 && divisor != 1) {\n    for (i = 0; i < conv.length; i++) {\n      conv[i] /= divisor;\n    }\n  }\n\n  return conv;\n}\n\nfunction convolutionDirect(input, kernel, opt) {\n  var tmp = matrix2Array(input);\n  var inputData = tmp.data;\n  var options = Object.assign({\n    normalize: false,\n    divisor: 1,\n    rows: tmp.rows,\n    cols: tmp.cols\n  }, opt);\n  var nRows, nCols;\n\n  if (options.rows && options.cols) {\n    nRows = options.rows;\n    nCols = options.cols;\n  } else {\n    throw new Error(\"Invalid number of rows or columns \" + nRows + \" \" + nCols);\n  }\n\n  var divisor = options.divisor;\n  var kHeight = kernel.length;\n  var kWidth = kernel[0].length;\n  var i, j, x, y, index, sum, kVal, row, col;\n\n  if (options.normalize) {\n    divisor = 0;\n\n    for (i = 0; i < kHeight; i++) for (j = 0; j < kWidth; j++) divisor += kernel[i][j];\n  }\n\n  if (divisor === 0) {\n    throw new RangeError('convolution: The divisor is equal to zero');\n  }\n\n  var output = new Array(nRows * nCols);\n  var hHeight = Math.floor(kHeight / 2);\n  var hWidth = Math.floor(kWidth / 2);\n\n  for (y = 0; y < nRows; y++) {\n    for (x = 0; x < nCols; x++) {\n      sum = 0;\n\n      for (j = 0; j < kHeight; j++) {\n        for (i = 0; i < kWidth; i++) {\n          kVal = kernel[kHeight - j - 1][kWidth - i - 1];\n          row = (y + j - hHeight + nRows) % nRows;\n          col = (x + i - hWidth + nCols) % nCols;\n          index = row * nCols + col;\n          sum += inputData[index] * kVal;\n        }\n      }\n\n      index = y * nCols + x;\n      output[index] = sum / divisor;\n    }\n  }\n\n  return output;\n}\n\nfunction LoG(sigma, nPoints, options) {\n  var factor = 1000;\n\n  if (options && options.factor) {\n    factor = options.factor;\n  }\n\n  var kernel = new Array(nPoints);\n  var i, j, tmp, y2, tmp2;\n  factor *= -1; //-1/(Math.PI*Math.pow(sigma,4));\n\n  var center = (nPoints - 1) / 2;\n  var sigma2 = 2 * sigma * sigma;\n\n  for (i = 0; i < nPoints; i++) {\n    kernel[i] = new Array(nPoints);\n    y2 = (i - center) * (i - center);\n\n    for (j = 0; j < nPoints; j++) {\n      tmp = -((j - center) * (j - center) + y2) / sigma2;\n      kernel[i][j] = Math.round(factor * (1 + tmp) * Math.exp(tmp));\n    }\n  }\n\n  return kernel;\n}\n\nfunction matrix2Array(input) {\n  var inputData = input;\n  var nRows, nCols;\n\n  if (typeof input[0] != \"number\") {\n    nRows = input.length;\n    nCols = input[0].length;\n    inputData = new Array(nRows * nCols);\n\n    for (var i = 0; i < nRows; i++) {\n      for (var j = 0; j < nCols; j++) {\n        inputData[i * nCols + j] = input[i][j];\n      }\n    }\n  } else {\n    var tmp = Math.sqrt(input.length);\n\n    if (Number.isInteger(tmp)) {\n      nRows = tmp;\n      nCols = tmp;\n    }\n  }\n\n  return {\n    data: inputData,\n    rows: nRows,\n    cols: nCols\n  };\n}\n\nmodule.exports = {\n  fft: convolutionFFT,\n  direct: convolutionDirect,\n  kernelFactory: {\n    LoG: LoG\n  },\n  matrix2Array: matrix2Array\n};","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/node_modules/ml-matrix-convolution/src/index.js"],"names":["FFTUtils","require","convolutionFFT","input","kernel","opt","tmp","matrix2Array","inputData","data","options","Object","assign","normalize","divisor","rows","cols","nRows","nCols","Error","i","j","kHeight","length","kWidth","RangeError","radix2Sized","toRadix2","conv","convolute","crop","convolutionDirect","x","y","index","sum","kVal","row","col","output","Array","hHeight","Math","floor","hWidth","LoG","sigma","nPoints","factor","y2","tmp2","center","sigma2","round","exp","sqrt","Number","isInteger","module","exports","fft","direct","kernelFactory"],"mappings":"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","sourcesContent":["'use strict;'\n/**\n * Created by acastillo on 7/7/16.\n */\nvar FFTUtils = require(\"ml-fft\").FFTUtils;\n\nfunction convolutionFFT(input, kernel, opt) {\n    var tmp = matrix2Array(input);\n    var inputData = tmp.data;\n    var options = Object.assign({normalize : false, divisor : 1, rows:tmp.rows, cols:tmp.cols}, opt);\n\n    var nRows, nCols;\n    if (options.rows&&options.cols) {\n        nRows = options.rows;\n        nCols = options.cols;\n    }\n    else {\n        throw new Error(\"Invalid number of rows or columns \" + nRows + \" \" + nCols)\n    }\n\n    var divisor = options.divisor;\n    var i,j;\n    var kHeight =  kernel.length;\n    var kWidth =  kernel[0].length;\n    if (options.normalize) {\n        divisor = 0;\n        for (i = 0; i < kHeight; i++)\n            for (j = 0; j < kWidth; j++)\n                divisor += kernel[i][j];\n    }\n    if (divisor === 0) {\n        throw new RangeError('convolution: The divisor is equal to zero');\n    }\n\n    var radix2Sized = FFTUtils.toRadix2(inputData, nRows, nCols);\n    var conv = FFTUtils.convolute(radix2Sized.data, kernel, radix2Sized.rows, radix2Sized.cols);\n    conv = FFTUtils.crop(conv, radix2Sized.rows, radix2Sized.cols, nRows, nCols);\n\n    if(divisor!=0&&divisor!=1){\n        for(i=0;i<conv.length;i++){\n            conv[i]/=divisor;\n        }\n    }\n\n    return conv;\n}\n\nfunction convolutionDirect(input, kernel, opt) {\n    var tmp = matrix2Array(input);\n    var inputData = tmp.data;\n    var options = Object.assign({normalize : false, divisor : 1, rows:tmp.rows, cols:tmp.cols}, opt);\n\n    var nRows, nCols;\n    if (options.rows&&options.cols) {\n        nRows = options.rows;\n        nCols = options.cols;\n    }\n    else {\n        throw new Error(\"Invalid number of rows or columns \" + nRows + \" \" + nCols)\n    }\n\n    var divisor = options.divisor;\n    var kHeight =  kernel.length;\n    var kWidth =  kernel[0].length;\n    var i, j, x, y, index, sum, kVal, row, col;\n    if (options.normalize) {\n        divisor = 0;\n        for (i = 0; i < kHeight; i++)\n            for (j = 0; j < kWidth; j++)\n                divisor += kernel[i][j];\n    }\n    if (divisor === 0) {\n        throw new RangeError('convolution: The divisor is equal to zero');\n    }\n\n    var output = new Array(nRows*nCols);\n\n    var hHeight = Math.floor(kHeight/2);\n    var hWidth = Math.floor(kWidth/2);\n\n    for (y = 0; y < nRows; y++) {\n        for (x = 0; x < nCols; x++) {\n            sum = 0;\n            for ( j = 0; j < kHeight; j++) {\n                for ( i = 0; i < kWidth; i++) {\n                    kVal = kernel[kHeight - j - 1][kWidth - i - 1];\n                    row = (y + j -hHeight + nRows) % nRows;\n                    col = (x + i - hWidth + nCols) % nCols;\n                    index = (row * nCols + col);\n                    sum += inputData[index] * kVal;\n                }\n            }\n            index = (y * nCols + x);\n            output[index]= sum / divisor;\n        }\n    }\n    return output;\n}\n\n\n\nfunction LoG(sigma, nPoints, options){\n    var factor = 1000;\n    if(options&&options.factor){\n        factor = options.factor;\n    }\n\n    var kernel = new Array(nPoints);\n    var i,j,tmp,y2,tmp2;\n\n    factor*=-1;//-1/(Math.PI*Math.pow(sigma,4));\n    var center = (nPoints-1)/2;\n    var sigma2 = 2*sigma*sigma;\n    for( i=0;i<nPoints;i++){\n        kernel[i]=new Array(nPoints);\n        y2 = (i-center)*(i-center);\n        for( j=0;j<nPoints;j++){\n            tmp = -((j-center)*(j-center)+y2)/sigma2;\n            kernel[i][j]=Math.round(factor*(1+tmp)*Math.exp(tmp));\n        }\n    }\n\n    return kernel;\n}\n\nfunction matrix2Array(input){\n    var inputData=input;\n    var nRows, nCols;\n    if(typeof input[0]!=\"number\"){\n        nRows = input.length;\n        nCols = input[0].length;\n        inputData = new Array(nRows*nCols);\n        for(var i=0;i<nRows;i++){\n            for(var j=0;j<nCols;j++){\n                inputData[i*nCols+j]=input[i][j];\n            }\n        }\n    }\n    else{\n        var tmp = Math.sqrt(input.length);\n        if(Number.isInteger(tmp)){\n            nRows=tmp;\n            nCols=tmp;\n        }\n    }\n\n    return {data:inputData,rows:nRows,cols:nCols};\n}\n\n\nmodule.exports = {\n    fft:convolutionFFT,\n    direct:convolutionDirect,\n    kernelFactory:{LoG:LoG},\n    matrix2Array:matrix2Array\n};"]},"metadata":{},"sourceType":"script"}