{"ast":null,"code":"/**\n * @typedef {('luma709'|'luma601'|'maximum'|'minimum'|'average'|'minmax'|'red'|'green'|'blue'|'cyan'|'magenta'|'yellow'|'black'|'hue'|'saturation'|'lightness')} GreyAlgorithm\n */\nexport const methods = {\n  luma709(red, green, blue) {\n    // sRGB\n    // return red * 0.2126 + green * 0.7152 + blue * 0.0722;\n    // Let's do a little trick ... in order not convert the integer to a double we do\n    // the multiplication with integer to reach a total of 32768 and then shift the bits\n    // of 15 to the right\n    // This does a Math.floor and may lead to small (max 1) difference\n    // Same result, > 10% faster on the full grey conversion\n    return red * 6966 + green * 23436 + blue * 2366 >> 15;\n  },\n\n  luma601(red, green, blue) {\n    // NTSC\n    // return this.red * 0.299 + green * 0.587 + blue * 0.114;\n    return red * 9798 + green * 19235 + blue * 3735 >> 15;\n  },\n\n  maximum(red, green, blue) {\n    return Math.max(red, green, blue);\n  },\n\n  minimum(red, green, blue) {\n    return Math.min(red, green, blue);\n  },\n\n  average(red, green, blue) {\n    return (red + green + blue) / 3 >> 0;\n  },\n\n  minmax(red, green, blue) {\n    return (Math.max(red, green, blue) + Math.min(red, green, blue)) / 2;\n  },\n\n  red(red) {\n    return red;\n  },\n\n  green(red, green) {\n    return green;\n  },\n\n  blue(red, green, blue) {\n    return blue;\n  },\n\n  cyan(red, green, blue, image) {\n    let black = methods.black(red, green, blue, image);\n    return (image.maxValue - red - black) / (1 - black / image.maxValue) >> 0;\n  },\n\n  magenta(red, green, blue, image) {\n    let black = methods.black(red, green, blue, image);\n    return (image.maxValue - green - black) / (1 - black / image.maxValue) >> 0;\n  },\n\n  yellow(red, green, blue, image) {\n    let black = methods.black(red, green, blue, image);\n    return (image.maxValue - blue - black) / (1 - black / image.maxValue) >> 0;\n  },\n\n  black(red, green, blue, image) {\n    return Math.min(image.maxValue - red, image.maxValue - green, image.maxValue - blue);\n  },\n\n  hue(red, green, blue, image) {\n    let min = methods.min(red, green, blue);\n    let max = methods.max(red, green, blue);\n\n    if (max === min) {\n      return 0;\n    }\n\n    let hue = 0;\n    let delta = max - min;\n\n    switch (max) {\n      case red:\n        hue = (green - blue) / delta + (green < blue ? 6 : 0);\n        break;\n\n      case green:\n        hue = (blue - red) / delta + 2;\n        break;\n\n      case blue:\n        hue = (red - green) / delta + 4;\n        break;\n\n      default:\n        throw new Error('unreachable');\n    }\n\n    return hue / 6 * image.maxValue >> 0;\n  },\n\n  saturation(red, green, blue, image) {\n    // from HSV model\n    let min = methods.min(red, green, blue);\n    let max = methods.max(red, green, blue);\n    let delta = max - min;\n    return max === 0 ? 0 : delta / max * image.maxValue;\n  },\n\n  lightness(red, green, blue) {\n    let min = methods.min(red, green, blue);\n    let max = methods.max(red, green, blue);\n    return (max + min) / 2;\n  }\n\n};\nObject.defineProperty(methods, 'luminosity', {\n  enumerable: false,\n  value: methods.lightness\n});\nObject.defineProperty(methods, 'luminance', {\n  enumerable: false,\n  value: methods.lightness\n});\nObject.defineProperty(methods, 'min', {\n  enumerable: false,\n  value: methods.minimum\n});\nObject.defineProperty(methods, 'max', {\n  enumerable: false,\n  value: methods.maximum\n});\nObject.defineProperty(methods, 'brightness', {\n  enumerable: false,\n  value: methods.maximum\n});\nexport const names = {};\nObject.keys(methods).forEach(name => {\n  names[name] = name;\n});","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/node_modules/image-js/src/image/transform/greyAlgorithms.js"],"names":["methods","luma709","red","green","blue","luma601","maximum","Math","max","minimum","min","average","minmax","cyan","image","black","maxValue","magenta","yellow","hue","delta","Error","saturation","lightness","Object","defineProperty","enumerable","value","names","keys","forEach","name"],"mappings":"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","sourcesContent":["/**\n * @typedef {('luma709'|'luma601'|'maximum'|'minimum'|'average'|'minmax'|'red'|'green'|'blue'|'cyan'|'magenta'|'yellow'|'black'|'hue'|'saturation'|'lightness')} GreyAlgorithm\n */\n\nexport const methods = {\n  luma709(red, green, blue) {\n    // sRGB\n    // return red * 0.2126 + green * 0.7152 + blue * 0.0722;\n    // Let's do a little trick ... in order not convert the integer to a double we do\n    // the multiplication with integer to reach a total of 32768 and then shift the bits\n    // of 15 to the right\n    // This does a Math.floor and may lead to small (max 1) difference\n    // Same result, > 10% faster on the full grey conversion\n    return (red * 6966 + green * 23436 + blue * 2366) >> 15;\n  },\n  luma601(red, green, blue) {\n    // NTSC\n    // return this.red * 0.299 + green * 0.587 + blue * 0.114;\n    return (red * 9798 + green * 19235 + blue * 3735) >> 15;\n  },\n  maximum(red, green, blue) {\n    return Math.max(red, green, blue);\n  },\n  minimum(red, green, blue) {\n    return Math.min(red, green, blue);\n  },\n  average(red, green, blue) {\n    return ((red + green + blue) / 3) >> 0;\n  },\n  minmax(red, green, blue) {\n    return (Math.max(red, green, blue) + Math.min(red, green, blue)) / 2;\n  },\n  red(red) {\n    return red;\n  },\n  green(red, green) {\n    return green;\n  },\n  blue(red, green, blue) {\n    return blue;\n  },\n  cyan(red, green, blue, image) {\n    let black = methods.black(red, green, blue, image);\n    return ((image.maxValue - red - black) / (1 - black / image.maxValue)) >> 0;\n  },\n  magenta(red, green, blue, image) {\n    let black = methods.black(red, green, blue, image);\n    return (\n      ((image.maxValue - green - black) / (1 - black / image.maxValue)) >> 0\n    );\n  },\n  yellow(red, green, blue, image) {\n    let black = methods.black(red, green, blue, image);\n    return (\n      ((image.maxValue - blue - black) / (1 - black / image.maxValue)) >> 0\n    );\n  },\n  black(red, green, blue, image) {\n    return Math.min(\n      image.maxValue - red,\n      image.maxValue - green,\n      image.maxValue - blue,\n    );\n  },\n  hue(red, green, blue, image) {\n    let min = methods.min(red, green, blue);\n    let max = methods.max(red, green, blue);\n    if (max === min) {\n      return 0;\n    }\n    let hue = 0;\n    let delta = max - min;\n\n    switch (max) {\n      case red:\n        hue = (green - blue) / delta + (green < blue ? 6 : 0);\n        break;\n      case green:\n        hue = (blue - red) / delta + 2;\n        break;\n      case blue:\n        hue = (red - green) / delta + 4;\n        break;\n      default:\n        throw new Error('unreachable');\n    }\n    return ((hue / 6) * image.maxValue) >> 0;\n  },\n  saturation(red, green, blue, image) {\n    // from HSV model\n    let min = methods.min(red, green, blue);\n    let max = methods.max(red, green, blue);\n    let delta = max - min;\n    return max === 0 ? 0 : (delta / max) * image.maxValue;\n  },\n  lightness(red, green, blue) {\n    let min = methods.min(red, green, blue);\n    let max = methods.max(red, green, blue);\n    return (max + min) / 2;\n  },\n};\n\nObject.defineProperty(methods, 'luminosity', {\n  enumerable: false,\n  value: methods.lightness,\n});\nObject.defineProperty(methods, 'luminance', {\n  enumerable: false,\n  value: methods.lightness,\n});\nObject.defineProperty(methods, 'min', {\n  enumerable: false,\n  value: methods.minimum,\n});\nObject.defineProperty(methods, 'max', {\n  enumerable: false,\n  value: methods.maximum,\n});\nObject.defineProperty(methods, 'brightness', {\n  enumerable: false,\n  value: methods.maximum,\n});\n\nexport const names = {};\nObject.keys(methods).forEach((name) => {\n  names[name] = name;\n});\n"]},"metadata":{},"sourceType":"module"}