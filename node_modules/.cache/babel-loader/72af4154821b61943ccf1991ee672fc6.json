{"ast":null,"code":"//these are gonna be the variables for our garbage collection\nvar drops = [];\nvar micro_Size = 5;\nlet newHeight = 0;\nexport let hoveredMicroPlasticData = {\n  mouseOver: false,\n  value: null\n};\nlet hoveredMicroPlastic = null;\n\nclass Drop {\n  constructor(p) {\n    this.START_HEIGHT = p.height * 0.56;\n    this.x = p.random(0, p.width);\n    this.y = p.random(this.START_HEIGHT, p.height);\n  }\n\n  show(p) {\n    p.noStroke();\n    p.fill(255);\n    this.size = p.random(5, micro_Size);\n    p.ellipse(this.x, this.y, this.size);\n\n    if (hoveredMicroPlasticData.mouseOver) {\n      p.fill(225, 225, 0, 70);\n    }\n  }\n\n  update(p) {\n    this.speed = this.speed = p.random(2, 4);\n    this.gravity = 1.05;\n    this.y = this.y + this.speed * this.gravity;\n\n    if (this.y > p.height) {\n      this.y = this.START_HEIGHT - newHeight;\n      this.gravity = 0;\n    }\n\n    if (p.mouseIsPressed && p.dist(p.mouseX, p.mouseY, this.x, this.y) < this.size + 5) {\n      hoveredMicroPlasticData.mouseOver = true;\n      hoveredMicroPlastic = this;\n    }\n  }\n\n}\n\nexport function setupMicroPlasticDrops(p) {\n  //\n  //set up plastic\n  //\n  for (var i = 0; i < 200; i++) {\n    drops[i] = new Drop(p);\n  }\n}\nexport function drawMicroPlasticDots(p, microGrowth2050, current_date, seaLevelRise) {\n  //we wil add a new height to the starting height to make our landscape rise and fall\n  // with the date and sea seaLevelRise data\n  var currentDate = current_date.getFullYear();\n  var index = currentDate - 1880;\n\n  if (index < 0) {\n    newHeight = 0;\n  }\n\n  if (currentDate > 2013) {\n    newHeight = seaLevelRise[2013 - 1880][1] * 3 + (currentDate - 2014) / 3;\n  } else {\n    newHeight = seaLevelRise[index][1] * 3;\n  } //calc microplastic\n  //\n\n\n  for (var i = 0; i < drops.length; i++) {\n    if (!hoveredMicroPlasticData.mouseOver) {\n      drops[i].update(p);\n    } else if (p.dist(p.mouseX, p.mouseY, hoveredMicroPlastic.x, hoveredMicroPlastic.y) > hoveredMicroPlastic.size + 5) {\n      hoveredMicroPlasticData.mouseOver = false;\n    }\n\n    drops[i].show(p);\n  }\n\n  if (microGrowth2050 != null) {\n    var newSize = -1 * (microGrowth2050[currentDate - 1950][1] - 367);\n    hoveredMicroPlasticData.value = newSize * (590000 / 78);\n    console.log(newSize * (590000 / 78));\n    newSize = newSize * 2 + 200; //add drops\n\n    if (newSize > drops.length) {\n      for (var j = drops.length; j < newSize; j++) {\n        drops[j] = new Drop(p);\n      }\n    } //remove drops\n\n\n    if (newSize < drops.length) {\n      var diff = drops.length - newSize;\n      drops = drops.splice(diff);\n    }\n  }\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/src/sketches/microPlastics.js"],"names":["drops","micro_Size","newHeight","hoveredMicroPlasticData","mouseOver","value","hoveredMicroPlastic","Drop","constructor","p","START_HEIGHT","height","x","random","width","y","show","noStroke","fill","size","ellipse","update","speed","gravity","mouseIsPressed","dist","mouseX","mouseY","setupMicroPlasticDrops","i","drawMicroPlasticDots","microGrowth2050","current_date","seaLevelRise","currentDate","getFullYear","index","length","newSize","console","log","j","diff","splice"],"mappings":"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","sourcesContent":["//these are gonna be the variables for our garbage collection\r\nvar drops = [];\r\nvar micro_Size = 5;\r\nlet newHeight = 0;\r\nexport let hoveredMicroPlasticData = { mouseOver: false, value: null };\r\nlet hoveredMicroPlastic = null;\r\n\r\nclass Drop {\r\n    constructor(p) {\r\n        this.START_HEIGHT = p.height * 0.56;\r\n        this.x = p.random(0, p.width);\r\n        this.y = p.random(this.START_HEIGHT, p.height);\r\n\r\n    }\r\n\r\n    show(p) {\r\n        p.noStroke();\r\n        p.fill(255);\r\n        this.size = p.random(5, micro_Size)\r\n\r\n        p.ellipse(\r\n            this.x,\r\n            this.y,\r\n            this.size\r\n        );\r\n\r\n        if (hoveredMicroPlasticData.mouseOver) {\r\n            p.fill(225, 225, 0, 70)\r\n        }\r\n    }\r\n\r\n    update(p) {\r\n        this.speed = this.speed = p.random(2, 4);\r\n        this.gravity = 1.05;\r\n        this.y = this.y + this.speed * this.gravity;\r\n\r\n        if (this.y > p.height) {\r\n            this.y = this.START_HEIGHT-newHeight;\r\n            this.gravity = 0;\r\n        }\r\n\r\n        if (p.mouseIsPressed && p.dist(p.mouseX, p.mouseY, this.x, this.y) < this.size+5) {\r\n            hoveredMicroPlasticData.mouseOver = true;\r\n            hoveredMicroPlastic = this;\r\n\r\n        }\r\n    }\r\n}\r\n\r\nexport function setupMicroPlasticDrops(p) {\r\n    //\r\n    //set up plastic\r\n    //\r\n    for (var i = 0; i < 200; i++) {\r\n        drops[i] = new Drop(p);\r\n    }\r\n}\r\n\r\nexport function drawMicroPlasticDots(p, microGrowth2050, current_date, seaLevelRise) {\r\n  //we wil add a new height to the starting height to make our landscape rise and fall\r\n  // with the date and sea seaLevelRise data\r\n\r\n  var currentDate = current_date.getFullYear();\r\n  var index = currentDate - 1880;\r\n\r\n  if (index<0){\r\n    newHeight = 0\r\n  }\r\n  if (currentDate>2013)\r\n  {\r\n    newHeight = seaLevelRise[(2013-1880)][1]*3+((currentDate-2014))/3\r\n  }\r\n  else{\r\n    newHeight = seaLevelRise[index][1]*3\r\n  }\r\n\r\n\r\n    //calc microplastic\r\n    //\r\n\r\n    for (var i = 0; i < drops.length; i++) {\r\n\r\n      if (!hoveredMicroPlasticData.mouseOver) {\r\n        drops[i].update(p);\r\n      }\r\n      else if (p.dist(p.mouseX, p.mouseY, hoveredMicroPlastic.x, hoveredMicroPlastic.y) > hoveredMicroPlastic.size+5) {\r\n          hoveredMicroPlasticData.mouseOver = false;\r\n      }\r\n        drops[i].show(p);\r\n\r\n    }\r\n\r\n    if (microGrowth2050 != null) {\r\n\r\n        var newSize = -1 * (microGrowth2050[currentDate - 1950][1] - 367);\r\n\r\n        hoveredMicroPlasticData.value = newSize*(590000/78)\r\n        console.log(newSize*(590000/78));\r\n        newSize = newSize * 2 + 200;\r\n        //add drops\r\n\r\n\r\n        if (newSize > drops.length) {\r\n            for (var j = drops.length; j < newSize; j++) {\r\n                drops[j] = new Drop(p);\r\n            }\r\n        }\r\n        //remove drops\r\n        if (newSize < drops.length) {\r\n            var diff = drops.length - newSize;\r\n            drops = drops.splice(diff);\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}