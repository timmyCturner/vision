{"ast":null,"code":"import React from 'react';\nimport axios from 'axios'; // used for API stuff\n\nconst {\n  Image\n} = require('image-js');\n\nexport default function plastic(p) {\n  let canvas;\n  let context; //these are gonna be the variables for our garbage collection\n\n  let plastic_array_2050;\n  let current_plastic_values;\n  let plastic_image_array = new Array(p.floor(200));\n  var image; //these are all variables for our wave function\n\n  let xspacing = 16; // Distance between each horizontal location\n\n  let w; // Width of entire wave\n\n  let theta = 0.15; // Start angle at 0\n\n  let amplitude = 25.0; // Height of wave\n\n  let period = 200.0; // How many pixels before the wave repeats\n\n  let dx = 2; // Value for incrementing x\n\n  let yvalues; // Using an array to store height values for the wave\n\n  let backvalues;\n  let back = 2; // back offset\n\n  p.preload = () => {\n    let i = 0; //plastic_image_array[i] = p.loadImage('plastic_images/bottle1.png');\n    //console.log(plastic_image_array[i]);\n    //p.loadType('jpg')\n    //image = p.loadImage('./bottle1.png')\n    //image = p.loadImage('./logo.png');\n    //console.log(image););\n\n    execute();\n\n    async function execute() {\n      image = await Image.load('plastic_images/bottle1.png');\n      console.log(image);\n      console.log('HERE');\n      /*let grey = image\r\n        .grey() // convert the image to greyscale.\r\n        .resize({ width: 600 }) // resize the image, forcing a width of 200 pixels. The height is computed automatically to preserve the aspect ratio.\r\n        .rotate(30); // rotate the image clockwise by 30 degrees.\r\n      return grey.save('bottle1.png');*/\n    }\n\n    console.log(image);\n  };\n\n  p.setup = () => {\n    canvas = p.createCanvas(600, 300); //set up wave\n\n    w = p.width + 16;\n    dx = 2 * Math.PI / period * xspacing;\n    yvalues = new Array(p.floor(w / xspacing));\n    backvalues = new Array(p.floor(w / xspacing)); //set up plastic\n    //load plastic images into Array\n  };\n\n  p.draw = () => {\n    p.background('blue'); //p.drawPlastic();\n    //image = p.loadImage('./logo.png');\n    //console.log(image);\n\n    p.calcWave();\n    p.renderWave();\n    p.backWave();\n  }; //\n  //\n  //\n  //hear lies al information on how to create plastic\n  //\n  //\n  //\n\n\n  p.drawPlastic = () => {\n    p.showPlasticBottle();\n  };\n\n  p.showPlasticBottle = () => {\n    let i = 1;\n    p.noStroke(); //console.log(image);\n  };\n\n  p.calcPlastic = () => {\n    //console.log(temp_array)\n    if (plastic_array_2050 != null) {\n      for (let i = 0; i < plastic_array_2050.length; i++) {\n        var amount = parseFloat(plastic_array_2050[i].station); // + parseFloat(temp_array[i*8].land))/2);\n        //console.log(typeof average);\n\n        current_plastic_values[i] = 400 - amount; //console.log(average);\n      } //console.log(typeof temp_array[200]);\n\n    }\n  }; //\n  //\n  //\n  //hear lies al information on how to create a wave\n  //\n  //\n  //\n\n\n  p.calcWave = () => {\n    // Increment theta (try different values for\n    // 'angular velocity' here)\n    theta += 0.02; // For every x value, calculate a y value with sine function\n\n    let x = theta;\n\n    for (let i = 0; i < yvalues.length; i++) {\n      yvalues[i] = Math.sin(x) * amplitude;\n      backvalues[i] = Math.sin(x + back) * amplitude;\n      x += dx;\n    }\n  };\n\n  p.renderWave = () => {\n    p.noStroke();\n    p.fill(37, 207, 122); // A simple way to draw the wave with an ellipse at each location\n\n    for (let x = 0; x < yvalues.length; x++) {\n      var waveHeight = 4 * p.height / 8 + yvalues[x];\n      p.ellipse(x * xspacing, p.height, 64, waveHeight);\n    }\n  };\n\n  p.backWave = () => {\n    p.noStroke();\n    p.fill(19, 149, 244); // A simple way to draw the wave with an ellipse at each location\n\n    for (let x = 0; x < backvalues.length; x++) {\n      var waveHeight = 4 * p.height / 8 + backvalues[x];\n      p.ellipse(x * xspacing, p.height, 64, waveHeight);\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/src/sketches/plastic.js"],"names":["React","axios","Image","require","plastic","p","canvas","context","plastic_array_2050","current_plastic_values","plastic_image_array","Array","floor","image","xspacing","w","theta","amplitude","period","dx","yvalues","backvalues","back","preload","i","execute","load","console","log","setup","createCanvas","width","Math","PI","draw","background","calcWave","renderWave","backWave","drawPlastic","showPlasticBottle","noStroke","calcPlastic","length","amount","parseFloat","station","x","sin","fill","waveHeight","height","ellipse"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport axios from 'axios'; // used for API stuff\r\n\r\nconst { Image } = require('image-js');\r\n\r\nexport default function plastic(p) {\r\n\r\n  let canvas;\r\n  let context;\r\n\r\n  //these are gonna be the variables for our garbage collection\r\n  let plastic_array_2050;\r\n  let current_plastic_values;\r\n  let plastic_image_array = new Array(p.floor(200));\r\n  var image;\r\n\r\n  //these are all variables for our wave function\r\n  let xspacing = 16; // Distance between each horizontal location\r\n  let w; // Width of entire wave\r\n  let theta = 0.15; // Start angle at 0\r\n  let amplitude = 25.0; // Height of wave\r\n  let period = 200.0; // How many pixels before the wave repeats\r\n  let dx=2; // Value for incrementing x\r\n  let yvalues; // Using an array to store height values for the wave\r\n  let backvalues;\r\n  let back = 2 // back offset\r\n\r\n  p.preload = () => {\r\n    let i = 0;\r\n\r\n    //plastic_image_array[i] = p.loadImage('plastic_images/bottle1.png');\r\n    //console.log(plastic_image_array[i]);\r\n    //p.loadType('jpg')\r\n    //image = p.loadImage('./bottle1.png')\r\n\r\n\r\n    //image = p.loadImage('./logo.png');\r\n    //console.log(image););\r\n    execute()\r\n\r\n    async function execute() {\r\n      image = await Image.load('plastic_images/bottle1.png');\r\n      console.log(image);\r\n      console.log('HERE');\r\n    /*let grey = image\r\n      .grey() // convert the image to greyscale.\r\n      .resize({ width: 600 }) // resize the image, forcing a width of 200 pixels. The height is computed automatically to preserve the aspect ratio.\r\n      .rotate(30); // rotate the image clockwise by 30 degrees.\r\n    return grey.save('bottle1.png');*/\r\n    }\r\n    console.log(image);\r\n\r\n\r\n\r\n  }\r\n  p.setup = () => {\r\n    canvas = p.createCanvas(600, 300);\r\n    //set up wave\r\n    w = p.width + 16;\r\n    dx = (2*Math.PI / period) * xspacing;\r\n    yvalues = new Array(p.floor(w / xspacing));\r\n    backvalues = new Array(p.floor(w / xspacing));\r\n\r\n\r\n    //set up plastic\r\n\r\n    //load plastic images into Array\r\n\r\n\r\n  }\r\n  p.draw = () => {\r\n    p.background('blue');\r\n\r\n    //p.drawPlastic();\r\n    //image = p.loadImage('./logo.png');\r\n    //console.log(image);\r\n    p.calcWave();\r\n    p.renderWave();\r\n    p.backWave();\r\n  }\r\n  //\r\n  //\r\n  //\r\n  //hear lies al information on how to create plastic\r\n  //\r\n  //\r\n  //\r\n  p.drawPlastic = () => {\r\n    p.showPlasticBottle()\r\n  }\r\n\r\n  p.showPlasticBottle = () => {\r\n    let i = 1;\r\n\r\n    p.noStroke();\r\n    //console.log(image);\r\n\r\n\r\n\r\n\r\n  }\r\n  p.calcPlastic= () => {\r\n\r\n    //console.log(temp_array)\r\n    if (plastic_array_2050 != null){\r\n      for (let i = 0; i < (plastic_array_2050.length); i++) {\r\n\r\n        var amount = parseFloat(plastic_array_2050[i].station)// + parseFloat(temp_array[i*8].land))/2);\r\n        //console.log(typeof average);\r\n        current_plastic_values[i] = 400-amount;\r\n        //console.log(average);\r\n      }\r\n      //console.log(typeof temp_array[200]);\r\n    }\r\n  }\r\n  //\r\n  //\r\n  //\r\n  //hear lies al information on how to create a wave\r\n  //\r\n  //\r\n  //\r\n  p.calcWave= () =>  {\r\n    // Increment theta (try different values for\r\n    // 'angular velocity' here)\r\n    theta += 0.02;\r\n\r\n    // For every x value, calculate a y value with sine function\r\n    let x = theta;\r\n    for (let i = 0; i < yvalues.length; i++) {\r\n\r\n      yvalues[i] = Math.sin(x) * amplitude;\r\n      backvalues[i] = Math.sin(x+back) * amplitude;\r\n      x += dx;\r\n    }\r\n  }\r\n  p.renderWave = () => {\r\n    p.noStroke();\r\n    p.fill(37, 207, 122);\r\n    // A simple way to draw the wave with an ellipse at each location\r\n    for (let x = 0; x < yvalues.length; x++) {\r\n      var waveHeight = 4*p.height / 8 + yvalues[x]\r\n      p.ellipse((x) * xspacing, p.height, 64,waveHeight);\r\n\r\n    }\r\n  }\r\n  p.backWave = () => {\r\n    p.noStroke();\r\n    p.fill(19, 149, 244);\r\n    // A simple way to draw the wave with an ellipse at each location\r\n    for (let x = 0; x < backvalues.length; x++) {\r\n      var waveHeight = 4*p.height / 8 + backvalues[x]\r\n      p.ellipse((x) * xspacing, p.height, 64,waveHeight);\r\n\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}