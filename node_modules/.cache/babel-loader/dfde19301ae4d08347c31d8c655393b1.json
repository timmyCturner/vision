{"ast":null,"code":"export default function plastic(p) {\n  let canvas; //these are gonna be the variables for our garbage collection\n\n  let plastic_array_2050;\n  let current_plastic_values; //these are all variables for our wave function\n\n  let xspacing = 16; // Distance between each horizontal location\n\n  let w; // Width of entire wave\n\n  let theta = 0.15; // Start angle at 0\n\n  let amplitude = 25.0; // Height of wave\n\n  let period = 200.0; // How many pixels before the wave repeats\n\n  let dx = 2; // Value for incrementing x\n\n  let yvalues; // Using an array to store height values for the wave\n\n  let backvalues;\n  let back = 2; // back offset\n\n  p.setup = () => {\n    canvas = p.createCanvas(600, 300);\n    w = p.width + 16;\n    dx = 2 * Math.PI / period * xspacing;\n    yvalues = new Array(p.floor(w / xspacing));\n    backvalues = new Array(p.floor(w / xspacing));\n    plastic_array_2050 = new Array(p.floor(200));\n  };\n\n  p.draw = () => {\n    p.background('blue');\n    p.calcWave();\n    p.renderWave();\n    p.backWave();\n  }; //\n  //\n  //\n  //hear lies al information on how to create a garbage\n  //\n  //\n  //\n\n\n  p.calcPlastic = () => {\n    //console.log(temp_array)\n    if (plastic_array_2050 != null) {\n      for (let i = 0; i < plastic_array_2050.length; i++) {\n        console.log(typeof parseFloat(plastic_array_2050[i * 8]));\n        var amount = parseFloat(plastic_array_2050[i].station); // + parseFloat(temp_array[i*8].land))/2);\n        //console.log(typeof average);\n\n        current_plastic_values[i] = 400 - amount; //console.log(average);\n      } //console.log(typeof temp_array[200]);\n\n    }\n  }; //\n  //\n  //\n  //hear lies al information on how to create a wave\n  //\n  //\n  //\n\n\n  p.calcWave = () => {\n    // Increment theta (try different values for\n    // 'angular velocity' here)\n    theta += 0.02; // For every x value, calculate a y value with sine function\n\n    let x = theta;\n\n    for (let i = 0; i < yvalues.length; i++) {\n      yvalues[i] = Math.sin(x) * amplitude;\n      backvalues[i] = Math.sin(x + back) * amplitude;\n      x += dx;\n    }\n  };\n\n  p.renderWave = () => {\n    p.noStroke();\n    p.fill(37, 207, 122); // A simple way to draw the wave with an ellipse at each location\n\n    for (let x = 0; x < yvalues.length; x++) {\n      var waveHeight = 4 * p.height / 8 + yvalues[x];\n      p.ellipse(x * xspacing, p.height, 64, waveHeight);\n    }\n  };\n\n  p.backWave = () => {\n    p.noStroke();\n    p.fill(19, 149, 244); // A simple way to draw the wave with an ellipse at each location\n\n    for (let x = 0; x < backvalues.length; x++) {\n      var waveHeight = 4 * p.height / 8 + backvalues[x];\n      p.ellipse(x * xspacing, p.height, 64, waveHeight);\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/src/sketches/plastic.js"],"names":["plastic","p","canvas","plastic_array_2050","current_plastic_values","xspacing","w","theta","amplitude","period","dx","yvalues","backvalues","back","setup","createCanvas","width","Math","PI","Array","floor","draw","background","calcWave","renderWave","backWave","calcPlastic","i","length","console","log","parseFloat","amount","station","x","sin","noStroke","fill","waveHeight","height","ellipse"],"mappings":"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","sourcesContent":["\r\nexport default function plastic(p) {\r\n\r\n  let canvas;\r\n  //these are gonna be the variables for our garbage collection\r\n  let plastic_array_2050;\r\n  let current_plastic_values;\r\n  //these are all variables for our wave function\r\n  let xspacing = 16; // Distance between each horizontal location\r\n  let w; // Width of entire wave\r\n  let theta = 0.15; // Start angle at 0\r\n  let amplitude = 25.0; // Height of wave\r\n  let period = 200.0; // How many pixels before the wave repeats\r\n  let dx=2; // Value for incrementing x\r\n  let yvalues; // Using an array to store height values for the wave\r\n  let backvalues;\r\n  let back = 2 // back offset\r\n\r\n  p.setup = () => {\r\n    canvas = p.createCanvas(600, 300);\r\n    w = p.width + 16;\r\n    dx = (2*Math.PI / period) * xspacing;\r\n    yvalues = new Array(p.floor(w / xspacing));\r\n    backvalues = new Array(p.floor(w / xspacing));\r\n    plastic_array_2050 = new Array(p.floor(200));\r\n  }\r\n  p.draw = () => {\r\n    p.background('blue');\r\n    p.calcWave();\r\n    p.renderWave();\r\n    p.backWave();\r\n  }\r\n  //\r\n  //\r\n  //\r\n  //hear lies al information on how to create a garbage\r\n  //\r\n  //\r\n  //\r\n  p.calcPlastic= () => {\r\n\r\n    //console.log(temp_array)\r\n    if (plastic_array_2050 != null){\r\n      for (let i = 0; i < (plastic_array_2050.length); i++) {\r\n        console.log(typeof parseFloat(plastic_array_2050[i*8]));\r\n        var amount = parseFloat(plastic_array_2050[i].station)// + parseFloat(temp_array[i*8].land))/2);\r\n        //console.log(typeof average);\r\n        current_plastic_values[i] = 400-amount;\r\n        //console.log(average);\r\n      }\r\n      //console.log(typeof temp_array[200]);\r\n    }\r\n  }\r\n  //\r\n  //\r\n  //\r\n  //hear lies al information on how to create a wave\r\n  //\r\n  //\r\n  //\r\n  p.calcWave= () =>  {\r\n    // Increment theta (try different values for\r\n    // 'angular velocity' here)\r\n    theta += 0.02;\r\n\r\n    // For every x value, calculate a y value with sine function\r\n    let x = theta;\r\n    for (let i = 0; i < yvalues.length; i++) {\r\n\r\n      yvalues[i] = Math.sin(x) * amplitude;\r\n      backvalues[i] = Math.sin(x+back) * amplitude;\r\n      x += dx;\r\n    }\r\n  }\r\n  p.renderWave = () => {\r\n    p.noStroke();\r\n    p.fill(37, 207, 122);\r\n    // A simple way to draw the wave with an ellipse at each location\r\n    for (let x = 0; x < yvalues.length; x++) {\r\n      var waveHeight = 4*p.height / 8 + yvalues[x]\r\n      p.ellipse((x) * xspacing, p.height, 64,waveHeight);\r\n\r\n    }\r\n  }\r\n  p.backWave = () => {\r\n    p.noStroke();\r\n    p.fill(19, 149, 244);\r\n    // A simple way to draw the wave with an ellipse at each location\r\n    for (let x = 0; x < backvalues.length; x++) {\r\n      var waveHeight = 4*p.height / 8 + backvalues[x]\r\n      p.ellipse((x) * xspacing, p.height, 64,waveHeight);\r\n\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}