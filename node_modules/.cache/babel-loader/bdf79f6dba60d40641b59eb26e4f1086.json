{"ast":null,"code":"import { black } from \"color-name\";\nexport function drawGuide(p) {\n  const maxWidth = window.screen.availWidth - (window.outerWidth - window.innerWidth);\n  const width_ratio = p.windowWidth / maxWidth;\n  const strokeWeight = 5; // font boldness\n\n  const rightPadding = 80;\n  const leftPadding = 80; // check if text box would go beyond window width\n\n  const topPadding = 80;\n  const bottomPadding = 150;\n  const textSize = 26 * width_ratio; // scales with window width\n\n  const textBoxWidth = p.width - rightPadding - leftPadding; // scales with window width\n\n  const textBoxHeight = p.height - topPadding - bottomPadding; // scales with window height\n\n  const fillColor = p.color(255, 255, 255);\n  fillColor.setAlpha(200);\n  p.noStroke();\n  p.fill(fillColor);\n  p.rect(leftPadding, topPadding, textBoxWidth, textBoxHeight);\n  p.noFill();\n  p.stroke(black);\n  p.strokeWeight(strokeWeight);\n  p.rect(leftPadding, topPadding, textBoxWidth, textBoxHeight);\n  p.fill(0);\n  p.strokeWeight(0.5);\n  p.textAlign(p.LEFT);\n  p.textSize(textSize);\n  createText(\"Interact with moving objects on the visualization to display value representation of pollutants corresponding with the current period in time.\" + \"\\n\\nSky Color: The color of the sky is based off carbon dioxide data, darkening as CO2 levels in the atmosphere increase.\" + \"\\n\\nOcean Color: The color of the ocean is based off ocean pollution data, darkening as levels in the ocean increase.\" + \"\\n\\nSun Size: The sun increases and decreases in size based on global temperature averages - larger means hotter, smaller means cooler.\" + \"\\n\\nSmog: The grey smog clouds increase and decrease in density, size, and number based off of nitrous oxide levels in the atmosphere.\" + \"\\n\\nOcean Level: The sea level rises or descends based off sea level data\" + \"\\n\\nMicroplastics: The small white dots drifting downward through the ocean represent microplastics, tiny plastic particulates polluting the oceans. They increase and decrease in number based on microplastic levels in the oceans.\" + \"\\n\\nMacroplastics: The large brown and grey shapes on the ocean surface represent macroplastics, larger plastic objects polluting the oceans. They increase and decrease in number based on macroplastic levels in the oceans.\" + \"\\n\\nBubbles: The bubbles rising up through the ocean represent methane entering the atmosphere, and increase and decrease in number accordingly.\");\n  p.noStroke();\n  /**\r\n   * Create wrapped text box\r\n   *\r\n   * @param {*} text Text to create\r\n   * @param {*} yoffset Optional parameter; offset from top to move text, otherwise 0 by default\r\n   */\n\n  function createText(text, yoffset) {\n    if (!yoffset) yoffset = 0;\n    p.text(text, leftPadding + strokeWeight, // x-offset\n    topPadding + textSize - strokeWeight * 2 + yoffset, // y-offset\n    p.width - leftPadding - rightPadding - strokeWeight * 2, // x-wrap\n    p.height - bottomPadding - topPadding - strokeWeight * 2); // y-wrap\n  }\n}\nexport function drawLegend(p, text, value) {\n  const maxWidth = window.screen.availWidth - (window.outerWidth - window.innerWidth);\n  const width_ratio = p.windowWidth / maxWidth;\n  const strokeWeight = 5; // font boldness\n\n  const bottomPadding = 3;\n  const maxChars = 66;\n  const numTextWraps = 1 + Math.ceil(text.length / maxChars); // add 1 for value representation\n\n  const textSize = 20 * width_ratio; // scales with window width\n\n  const textBoxWidth = 625 * width_ratio; // scales with window width\n\n  const textBoxHeight = strokeWeight * numTextWraps + textSize * numTextWraps + bottomPadding; // scales with window height\n\n  const leftMargin = p.mouseX + textBoxWidth + 20 > p.windowWidth ? -textBoxWidth - 20 : 20; // check if text box would go beyond window width\n\n  const fillColor = p.color(255, 255, 255);\n  const wrappedText = text.replace( // wrap text around 66 chars maximum\n  /(?![^\\n]{1,66}$)([^\\n]{1,66})\\s/g, \"$1\\n\");\n  fillColor.setAlpha(200);\n  p.noStroke();\n  p.fill(fillColor);\n  p.rect(leftMargin + p.mouseX, p.mouseY, textBoxWidth, textBoxHeight);\n  p.noFill();\n  p.stroke(black);\n  p.strokeWeight(strokeWeight);\n  p.rect(leftMargin + p.mouseX, p.mouseY, textBoxWidth, textBoxHeight);\n  p.fill(0);\n  p.strokeWeight(0.5);\n  p.textAlign(p.LEFT);\n  p.textSize(textSize);\n\n  if (value) {\n    p.text(wrappedText, leftMargin + strokeWeight + p.mouseX, p.mouseY + textSize);\n    p.text(value, leftMargin + strokeWeight + p.mouseX, p.mouseY + (bottomPadding + textSize) * numTextWraps);\n  }\n\n  p.noStroke();\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/src/sketches/legend.js"],"names":["black","drawGuide","p","maxWidth","window","screen","availWidth","outerWidth","innerWidth","width_ratio","windowWidth","strokeWeight","rightPadding","leftPadding","topPadding","bottomPadding","textSize","textBoxWidth","width","textBoxHeight","height","fillColor","color","setAlpha","noStroke","fill","rect","noFill","stroke","textAlign","LEFT","createText","text","yoffset","drawLegend","value","maxChars","numTextWraps","Math","ceil","length","leftMargin","mouseX","wrappedText","replace","mouseY"],"mappings":"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","sourcesContent":["import { black } from \"color-name\";\r\n\r\nexport function drawGuide(p) {\r\n    const maxWidth =\r\n        window.screen.availWidth - (window.outerWidth - window.innerWidth);\r\n    const width_ratio = p.windowWidth / maxWidth;\r\n\r\n    const strokeWeight = 5; // font boldness\r\n\r\n    const rightPadding = 80;\r\n    const leftPadding = 80; // check if text box would go beyond window width\r\n    const topPadding = 80;\r\n    const bottomPadding = 150;\r\n\r\n    const textSize = 26 * width_ratio; // scales with window width\r\n    const textBoxWidth = p.width - rightPadding - leftPadding; // scales with window width\r\n    const textBoxHeight = p.height - topPadding - bottomPadding; // scales with window height\r\n\r\n    const fillColor = p.color(255, 255, 255);\r\n\r\n    fillColor.setAlpha(200);\r\n    p.noStroke();\r\n    p.fill(fillColor);\r\n    p.rect(leftPadding, topPadding, textBoxWidth, textBoxHeight);\r\n\r\n    p.noFill();\r\n    p.stroke(black);\r\n    p.strokeWeight(strokeWeight);\r\n    p.rect(leftPadding, topPadding, textBoxWidth, textBoxHeight);\r\n\r\n    p.fill(0);\r\n    p.strokeWeight(0.5);\r\n    p.textAlign(p.LEFT);\r\n\r\n    p.textSize(textSize);\r\n\r\n    createText(\r\n        \"Interact with moving objects on the visualization to display value representation of pollutants corresponding with the current period in time.\" +\r\n            \"\\n\\nSky Color: The color of the sky is based off carbon dioxide data, darkening as CO2 levels in the atmosphere increase.\" +\r\n            \"\\n\\nOcean Color: The color of the ocean is based off ocean pollution data, darkening as levels in the ocean increase.\" +\r\n            \"\\n\\nSun Size: The sun increases and decreases in size based on global temperature averages - larger means hotter, smaller means cooler.\" +\r\n            \"\\n\\nSmog: The grey smog clouds increase and decrease in density, size, and number based off of nitrous oxide levels in the atmosphere.\" +\r\n            \"\\n\\nOcean Level: The sea level rises or descends based off sea level data\" +\r\n            \"\\n\\nMicroplastics: The small white dots drifting downward through the ocean represent microplastics, tiny plastic particulates polluting the oceans. They increase and decrease in number based on microplastic levels in the oceans.\" +\r\n            \"\\n\\nMacroplastics: The large brown and grey shapes on the ocean surface represent macroplastics, larger plastic objects polluting the oceans. They increase and decrease in number based on macroplastic levels in the oceans.\" +\r\n            \"\\n\\nBubbles: The bubbles rising up through the ocean represent methane entering the atmosphere, and increase and decrease in number accordingly.\"\r\n    );\r\n\r\n    p.noStroke();\r\n\r\n    /**\r\n     * Create wrapped text box\r\n     *\r\n     * @param {*} text Text to create\r\n     * @param {*} yoffset Optional parameter; offset from top to move text, otherwise 0 by default\r\n     */\r\n    function createText(text, yoffset) {\r\n        if (!yoffset) yoffset = 0;\r\n        p.text(\r\n            text,\r\n            leftPadding + strokeWeight, // x-offset\r\n            topPadding + textSize - strokeWeight * 2 + yoffset, // y-offset\r\n            p.width - leftPadding - rightPadding - strokeWeight * 2, // x-wrap\r\n            p.height - bottomPadding - topPadding - strokeWeight * 2\r\n        ); // y-wrap\r\n    }\r\n}\r\n\r\nexport function drawLegend(p, text, value) {\r\n    const maxWidth =\r\n        window.screen.availWidth - (window.outerWidth - window.innerWidth);\r\n    const width_ratio = p.windowWidth / maxWidth;\r\n\r\n    const strokeWeight = 5; // font boldness\r\n    const bottomPadding = 3;\r\n    const maxChars = 66;\r\n    const numTextWraps = 1 + Math.ceil(text.length / maxChars); // add 1 for value representation\r\n\r\n    const textSize = 20 * width_ratio; // scales with window width\r\n    const textBoxWidth = 625 * width_ratio; // scales with window width\r\n    const textBoxHeight =\r\n        strokeWeight * numTextWraps + textSize * numTextWraps + bottomPadding; // scales with window height\r\n\r\n    const leftMargin =\r\n        p.mouseX + textBoxWidth + 20 > p.windowWidth ? -textBoxWidth - 20 : 20; // check if text box would go beyond window width\r\n\r\n    const fillColor = p.color(255, 255, 255);\r\n\r\n    const wrappedText = text.replace(\r\n        // wrap text around 66 chars maximum\r\n        /(?![^\\n]{1,66}$)([^\\n]{1,66})\\s/g,\r\n        \"$1\\n\"\r\n    );\r\n\r\n    fillColor.setAlpha(200);\r\n    p.noStroke();\r\n    p.fill(fillColor);\r\n    p.rect(leftMargin + p.mouseX, p.mouseY, textBoxWidth, textBoxHeight);\r\n\r\n    p.noFill();\r\n    p.stroke(black);\r\n    p.strokeWeight(strokeWeight);\r\n    p.rect(leftMargin + p.mouseX, p.mouseY, textBoxWidth, textBoxHeight);\r\n\r\n    p.fill(0);\r\n    p.strokeWeight(0.5);\r\n    p.textAlign(p.LEFT);\r\n\r\n    p.textSize(textSize);\r\n\r\n    if (value) {\r\n        p.text(\r\n            wrappedText,\r\n            leftMargin + strokeWeight + p.mouseX,\r\n            p.mouseY + textSize\r\n        );\r\n        p.text(\r\n            value,\r\n            leftMargin + strokeWeight + p.mouseX,\r\n            p.mouseY + (bottomPadding + textSize) * numTextWraps\r\n        );\r\n    }\r\n\r\n    p.noStroke();\r\n}\r\n"]},"metadata":{},"sourceType":"module"}