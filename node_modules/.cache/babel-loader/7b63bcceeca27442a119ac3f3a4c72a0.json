{"ast":null,"code":"const INIT_NUM_BUBBLES = 30; // always starts with 30 bubbles\n\nlet bubbles = []; // holds Bubble objects\n\n/**\r\n * Class for bubbles that float up from seabed on display\r\n */\n\nclass Bubble {\n  /**\r\n   * Constructor for bubbles\r\n   * \r\n   * @param {*} p p5 ptr\r\n   * @param {*} xstart Starting x-position\r\n   * @param {*} yspeed Speed of bubble rising to top\r\n   * @param {*} size Size of bubble\r\n   */\n  constructor(p, xstart, yspeed, size) {\n    // class for bubble objects\n    this.yspeed = yspeed;\n    this.x = xstart; // starting x-position of bubbles\n\n    this.y = p.random(p.height, p.height * 1.5); // starting y-position of bubbles under height\n\n    this.degree = 0;\n    /**\r\n     * Display bubble on sketch\r\n     */\n\n    this.display = function () {\n      p.fill(255, 255, 255, 50);\n      p.ellipse(this.x, this.y, size);\n      p.fill(255, 255, 255, 180);\n      p.ellipse(this.x + 0.2 * size, this.y - 0.2 * size, 0.2 * size); // bubble detail\n    };\n    /**\r\n     * Behavior for bubble movement\r\n     */\n\n\n    this.move = function () {\n      this.x += p.cos(p.radians(this.degree)); // base x-shifts on cosine waves\n\n      this.y += this.yspeed; // bubble movement speed\n\n      if (this.y < p.height * 0.63) {\n        this.y = p.height * 1.2;\n      }\n\n      this.degree += p.random(0.0, 1.0);\n    };\n    /**\r\n     * Set bubble speed corresponding to data\r\n     * \r\n     * @param {*} new_speed Re-initialize bubble speed\r\n     */\n\n\n    this.setSpeed = function (new_speed) {\n      this.yspeed = new_speed;\n    };\n  }\n\n}\n/**\r\n * Set up methane bubbles on canvas\r\n * \r\n * @param {*} p p5 ptr\r\n */\n\n\nexport function setupMethaneBubbles(p, methaneData) {\n  // initialize at beginning with bubbles from starting date\n  // const AVG_START = methaneData.arr[0].average;\n  // const AVG_END = methaneData.arr[methaneData.arr.length - 1].average;\n  // const AVG_DIFF = AVG_END - AVG_START; // diff btwn curr avg and start avg\n  for (let i = 0; i < INIT_NUM_BUBBLES; i++) {\n    // initialize the bubbles\n    bubbles[i] = new Bubble(p, p.random(0, p.width), p.random(-1.5, -1), p.random(10, 20));\n  }\n}\n/**\r\n * Draw methane bubbles on sketch\r\n * \r\n * @param {*} p p5 ptr\r\n * @param {*} methaneData Object containing map and arr\r\n * @param {*} currentDate Current date stored in state\r\n */\n\nexport function drawMethaneBubbles(p, methaneData, currentDate) {\n  // create the bubbles and call their methods\n  // make more bubbles and modify speed\n  let yyyy = new Intl.DateTimeFormat('en', {\n    year: 'numeric'\n  }).format(currentDate);\n  let mm = new Intl.DateTimeFormat('en', {\n    month: '2-digit'\n  }).format(currentDate);\n  let dd = \"01\";\n  let date = `${yyyy}-${mm}-${dd}`;\n  const AVG_START = methaneData.arr[0].average;\n  const DATE_START = methaneData.arr[0].date;\n\n  for (let i = 0; i < bubbles.length; i++) {\n    bubbles[i].move();\n    bubbles[i].display();\n  } // update bubble here\n\n\n  if (methaneData.map.get(date)) {\n    const AVG_CURRENT = methaneData.map.get(date);\n    const AVG_DIFF = AVG_CURRENT - AVG_START; // diff btwn curr avg and start avg\n\n    const AVG_RATIO = AVG_START / AVG_CURRENT;\n    const NEW_SIZE = parseInt(AVG_DIFF + INIT_NUM_BUBBLES); // console.log(`Found date for ${date}\\nlength: ${bubbles.length}\\nNEW_SIZE: ${NEW_SIZE}`)\n\n    if (NEW_SIZE > bubbles.length) {\n      for (let j = bubbles.length; j < NEW_SIZE; j++) {\n        bubbles[j] = new Bubble(p, p.random(0, p.width), p.random(-2 / AVG_RATIO * 2, -1.5 / AVG_RATIO * 2), p.random(10, 20));\n      }\n    }\n\n    if (NEW_SIZE < bubbles.length) {\n      let diff = bubbles.length - NEW_SIZE;\n      bubbles = bubbles.splice(diff);\n    }\n  } else {\n    // console.log(`Could not find date for ${date}`)\n    let yyyy = DATE_START.substring(0, 4);\n    let mm = DATE_START.substring(5, DATE_START.length).padStart(2, '0');\n    let dd = \"01\";\n    let date = new Date(`${yyyy}-${mm}-${dd}`); // use last known date (make sure to set first date to earliest and vice versa)\n    // update bubble here (could be < lower bound or > upper bound)\n\n    if (date >= currentDate) {\n      bubbles = bubbles.splice(0, INIT_NUM_BUBBLES);\n\n      for (let i = 0; i < INIT_NUM_BUBBLES; i++) {\n        bubbles[i].setSpeed(p.random(-1.5, -1));\n      }\n    }\n  }\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/src/sketches/methaneBubbles.js"],"names":["INIT_NUM_BUBBLES","bubbles","Bubble","constructor","p","xstart","yspeed","size","x","y","random","height","degree","display","fill","ellipse","move","cos","radians","setSpeed","new_speed","setupMethaneBubbles","methaneData","i","width","drawMethaneBubbles","currentDate","yyyy","Intl","DateTimeFormat","year","format","mm","month","dd","date","AVG_START","arr","average","DATE_START","length","map","get","AVG_CURRENT","AVG_DIFF","AVG_RATIO","NEW_SIZE","parseInt","j","diff","splice","substring","padStart","Date"],"mappings":"AAAA,MAAMA,gBAAgB,GAAG,EAAzB,C,CAA6B;;AAC7B,IAAIC,OAAO,GAAG,EAAd,C,CAAkB;;AAElB;;;;AAGA,MAAMC,MAAN,CAAa;AACT;;;;;;;;AAQAC,EAAAA,WAAW,CAACC,CAAD,EAAIC,MAAJ,EAAYC,MAAZ,EAAoBC,IAApB,EAA0B;AAAE;AACnC,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKE,CAAL,GAASH,MAAT,CAFiC,CAEhB;;AACjB,SAAKI,CAAL,GAASL,CAAC,CAACM,MAAF,CAASN,CAAC,CAACO,MAAX,EAAmBP,CAAC,CAACO,MAAF,GAAW,GAA9B,CAAT,CAHiC,CAGY;;AAC7C,SAAKC,MAAL,GAAc,CAAd;AAEA;;;;AAGA,SAAKC,OAAL,GAAe,YAAY;AACvBT,MAAAA,CAAC,CAACU,IAAF,CAAO,GAAP,EAAY,GAAZ,EAAiB,GAAjB,EAAsB,EAAtB;AACAV,MAAAA,CAAC,CAACW,OAAF,CAAU,KAAKP,CAAf,EAAkB,KAAKC,CAAvB,EAA0BF,IAA1B;AACAH,MAAAA,CAAC,CAACU,IAAF,CAAO,GAAP,EAAY,GAAZ,EAAiB,GAAjB,EAAsB,GAAtB;AACAV,MAAAA,CAAC,CAACW,OAAF,CAAU,KAAKP,CAAL,GAAS,MAAMD,IAAzB,EAA+B,KAAKE,CAAL,GAAS,MAAMF,IAA9C,EAAoD,MAAMA,IAA1D,EAJuB,CAI0C;AACpE,KALD;AAOA;;;;;AAGA,SAAKS,IAAL,GAAY,YAAY;AACpB,WAAKR,CAAL,IAAUJ,CAAC,CAACa,GAAF,CAAMb,CAAC,CAACc,OAAF,CAAU,KAAKN,MAAf,CAAN,CAAV,CADoB,CACqB;;AACzC,WAAKH,CAAL,IAAU,KAAKH,MAAf,CAFoB,CAEG;;AACvB,UAAI,KAAKG,CAAL,GAASL,CAAC,CAACO,MAAF,GAAW,IAAxB,EAA8B;AAC1B,aAAKF,CAAL,GAASL,CAAC,CAACO,MAAF,GAAW,GAApB;AACH;;AACD,WAAKC,MAAL,IAAeR,CAAC,CAACM,MAAF,CAAS,GAAT,EAAc,GAAd,CAAf;AACH,KAPD;AASA;;;;;;;AAKA,SAAKS,QAAL,GAAgB,UAAUC,SAAV,EAAqB;AACjC,WAAKd,MAAL,GAAcc,SAAd;AACH,KAFD;AAGH;;AA7CQ;AAgDb;;;;;;;AAKA,OAAO,SAASC,mBAAT,CAA6BjB,CAA7B,EAAgCkB,WAAhC,EAA6C;AAChD;AACA;AACA;AACA;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGvB,gBAApB,EAAsCuB,CAAC,EAAvC,EAA2C;AAAE;AACzCtB,IAAAA,OAAO,CAACsB,CAAD,CAAP,GAAa,IAAIrB,MAAJ,CAAWE,CAAX,EACTA,CAAC,CAACM,MAAF,CAAS,CAAT,EAAYN,CAAC,CAACoB,KAAd,CADS,EAETpB,CAAC,CAACM,MAAF,CAAS,CAAC,GAAV,EAAe,CAAC,CAAhB,CAFS,EAGTN,CAAC,CAACM,MAAF,CAAS,EAAT,EAAa,EAAb,CAHS,CAAb;AAKH;AAEJ;AAED;;;;;;;;AAOA,OAAO,SAASe,kBAAT,CAA4BrB,CAA5B,EAA+BkB,WAA/B,EAA4CI,WAA5C,EAAyD;AAAE;AAC9D;AAEA,MAAIC,IAAI,GAAG,IAAIC,IAAI,CAACC,cAAT,CAAwB,IAAxB,EAA8B;AAAEC,IAAAA,IAAI,EAAE;AAAR,GAA9B,EAAmDC,MAAnD,CAA0DL,WAA1D,CAAX;AACA,MAAIM,EAAE,GAAG,IAAIJ,IAAI,CAACC,cAAT,CAAwB,IAAxB,EAA8B;AAAEI,IAAAA,KAAK,EAAE;AAAT,GAA9B,EAAoDF,MAApD,CAA2DL,WAA3D,CAAT;AACA,MAAIQ,EAAE,GAAG,IAAT;AACA,MAAIC,IAAI,GAAI,GAAER,IAAK,IAAGK,EAAG,IAAGE,EAAG,EAA/B;AACA,QAAME,SAAS,GAAGd,WAAW,CAACe,GAAZ,CAAgB,CAAhB,EAAmBC,OAArC;AACA,QAAMC,UAAU,GAAGjB,WAAW,CAACe,GAAZ,CAAgB,CAAhB,EAAmBF,IAAtC;;AAEA,OAAK,IAAIZ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGtB,OAAO,CAACuC,MAA5B,EAAoCjB,CAAC,EAArC,EAAyC;AACrCtB,IAAAA,OAAO,CAACsB,CAAD,CAAP,CAAWP,IAAX;AACAf,IAAAA,OAAO,CAACsB,CAAD,CAAP,CAAWV,OAAX;AACH,GAb2D,CAe5D;;;AACA,MAAIS,WAAW,CAACmB,GAAZ,CAAgBC,GAAhB,CAAoBP,IAApB,CAAJ,EAA+B;AAC3B,UAAMQ,WAAW,GAAGrB,WAAW,CAACmB,GAAZ,CAAgBC,GAAhB,CAAoBP,IAApB,CAApB;AACA,UAAMS,QAAQ,GAAGD,WAAW,GAAGP,SAA/B,CAF2B,CAEe;;AAC1C,UAAMS,SAAS,GAAGT,SAAS,GAAGO,WAA9B;AACA,UAAMG,QAAQ,GAAGC,QAAQ,CAACH,QAAQ,GAAG5C,gBAAZ,CAAzB,CAJ2B,CAK3B;;AAEA,QAAI8C,QAAQ,GAAG7C,OAAO,CAACuC,MAAvB,EAA+B;AAC3B,WAAK,IAAIQ,CAAC,GAAG/C,OAAO,CAACuC,MAArB,EAA6BQ,CAAC,GAAGF,QAAjC,EAA2CE,CAAC,EAA5C,EAAgD;AAC5C/C,QAAAA,OAAO,CAAC+C,CAAD,CAAP,GAAa,IAAI9C,MAAJ,CAAWE,CAAX,EACTA,CAAC,CAACM,MAAF,CAAS,CAAT,EAAYN,CAAC,CAACoB,KAAd,CADS,EAETpB,CAAC,CAACM,MAAF,CAAS,CAAC,CAAD,GAAKmC,SAAL,GAAiB,CAA1B,EAA6B,CAAC,GAAD,GAAOA,SAAP,GAAmB,CAAhD,CAFS,EAGTzC,CAAC,CAACM,MAAF,CAAS,EAAT,EAAa,EAAb,CAHS,CAAb;AAIH;AACJ;;AAED,QAAIoC,QAAQ,GAAG7C,OAAO,CAACuC,MAAvB,EAA+B;AAC3B,UAAIS,IAAI,GAAGhD,OAAO,CAACuC,MAAR,GAAiBM,QAA5B;AACA7C,MAAAA,OAAO,GAAGA,OAAO,CAACiD,MAAR,CAAeD,IAAf,CAAV;AACH;AACJ,GApBD,MAqBK;AACD;AACA,QAAItB,IAAI,GAAGY,UAAU,CAACY,SAAX,CAAqB,CAArB,EAAwB,CAAxB,CAAX;AACA,QAAInB,EAAE,GAAGO,UAAU,CAACY,SAAX,CAAqB,CAArB,EAAwBZ,UAAU,CAACC,MAAnC,EAA2CY,QAA3C,CAAoD,CAApD,EAAuD,GAAvD,CAAT;AACA,QAAIlB,EAAE,GAAG,IAAT;AACA,QAAIC,IAAI,GAAG,IAAIkB,IAAJ,CAAU,GAAE1B,IAAK,IAAGK,EAAG,IAAGE,EAAG,EAA7B,CAAX,CALC,CAMD;AACA;;AACA,QAAIC,IAAI,IAAIT,WAAZ,EAAyB;AACrBzB,MAAAA,OAAO,GAAGA,OAAO,CAACiD,MAAR,CAAe,CAAf,EAAkBlD,gBAAlB,CAAV;;AACA,WAAK,IAAIuB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGvB,gBAApB,EAAsCuB,CAAC,EAAvC,EAA2C;AACvCtB,QAAAA,OAAO,CAACsB,CAAD,CAAP,CAAWJ,QAAX,CAAoBf,CAAC,CAACM,MAAF,CAAS,CAAC,GAAV,EAAe,CAAC,CAAhB,CAApB;AACH;AACJ;AACJ;AAEJ","sourcesContent":["const INIT_NUM_BUBBLES = 30; // always starts with 30 bubbles\r\nlet bubbles = []; // holds Bubble objects\r\n\r\n/**\r\n * Class for bubbles that float up from seabed on display\r\n */\r\nclass Bubble {\r\n    /**\r\n     * Constructor for bubbles\r\n     * \r\n     * @param {*} p p5 ptr\r\n     * @param {*} xstart Starting x-position\r\n     * @param {*} yspeed Speed of bubble rising to top\r\n     * @param {*} size Size of bubble\r\n     */\r\n    constructor(p, xstart, yspeed, size) { // class for bubble objects\r\n        this.yspeed = yspeed;\r\n        this.x = xstart; // starting x-position of bubbles\r\n        this.y = p.random(p.height, p.height * 1.5); // starting y-position of bubbles under height\r\n        this.degree = 0;\r\n\r\n        /**\r\n         * Display bubble on sketch\r\n         */\r\n        this.display = function () {\r\n            p.fill(255, 255, 255, 50);\r\n            p.ellipse(this.x, this.y, size);\r\n            p.fill(255, 255, 255, 180);\r\n            p.ellipse(this.x + 0.2 * size, this.y - 0.2 * size, 0.2 * size); // bubble detail\r\n        };\r\n\r\n        /**\r\n         * Behavior for bubble movement\r\n         */\r\n        this.move = function () {\r\n            this.x += p.cos(p.radians(this.degree)); // base x-shifts on cosine waves\r\n            this.y += this.yspeed; // bubble movement speed\r\n            if (this.y < p.height * 0.63) {\r\n                this.y = p.height * 1.2;\r\n            }\r\n            this.degree += p.random(0.0, 1.0);\r\n        };\r\n\r\n        /**\r\n         * Set bubble speed corresponding to data\r\n         * \r\n         * @param {*} new_speed Re-initialize bubble speed\r\n         */\r\n        this.setSpeed = function (new_speed) {\r\n            this.yspeed = new_speed;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Set up methane bubbles on canvas\r\n * \r\n * @param {*} p p5 ptr\r\n */\r\nexport function setupMethaneBubbles(p, methaneData) {\r\n    // initialize at beginning with bubbles from starting date\r\n    // const AVG_START = methaneData.arr[0].average;\r\n    // const AVG_END = methaneData.arr[methaneData.arr.length - 1].average;\r\n    // const AVG_DIFF = AVG_END - AVG_START; // diff btwn curr avg and start avg\r\n    \r\n    for (let i = 0; i < INIT_NUM_BUBBLES; i++) { // initialize the bubbles\r\n        bubbles[i] = new Bubble(p,\r\n            p.random(0, p.width),\r\n            p.random(-1.5, -1),\r\n            p.random(10, 20)\r\n        );\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Draw methane bubbles on sketch\r\n * \r\n * @param {*} p p5 ptr\r\n * @param {*} methaneData Object containing map and arr\r\n * @param {*} currentDate Current date stored in state\r\n */\r\nexport function drawMethaneBubbles(p, methaneData, currentDate) { // create the bubbles and call their methods\r\n    // make more bubbles and modify speed\r\n\r\n    let yyyy = new Intl.DateTimeFormat('en', { year: 'numeric' }).format(currentDate);\r\n    let mm = new Intl.DateTimeFormat('en', { month: '2-digit' }).format(currentDate);\r\n    let dd = \"01\"\r\n    let date = `${yyyy}-${mm}-${dd}`\r\n    const AVG_START = methaneData.arr[0].average;\r\n    const DATE_START = methaneData.arr[0].date;\r\n\r\n    for (let i = 0; i < bubbles.length; i++) {\r\n        bubbles[i].move();\r\n        bubbles[i].display();\r\n    }\r\n\r\n    // update bubble here\r\n    if (methaneData.map.get(date)) {\r\n        const AVG_CURRENT = methaneData.map.get(date);\r\n        const AVG_DIFF = AVG_CURRENT - AVG_START; // diff btwn curr avg and start avg\r\n        const AVG_RATIO = AVG_START / AVG_CURRENT;\r\n        const NEW_SIZE = parseInt(AVG_DIFF + INIT_NUM_BUBBLES);\r\n        // console.log(`Found date for ${date}\\nlength: ${bubbles.length}\\nNEW_SIZE: ${NEW_SIZE}`)\r\n\r\n        if (NEW_SIZE > bubbles.length) {\r\n            for (let j = bubbles.length; j < NEW_SIZE; j++) {\r\n                bubbles[j] = new Bubble(p,\r\n                    p.random(0, p.width),\r\n                    p.random(-2 / AVG_RATIO * 2, -1.5 / AVG_RATIO * 2),\r\n                    p.random(10, 20))\r\n            }\r\n        }\r\n\r\n        if (NEW_SIZE < bubbles.length) {\r\n            let diff = bubbles.length - NEW_SIZE;\r\n            bubbles = bubbles.splice(diff);\r\n        }\r\n    }\r\n    else {\r\n        // console.log(`Could not find date for ${date}`)\r\n        let yyyy = DATE_START.substring(0, 4);\r\n        let mm = DATE_START.substring(5, DATE_START.length).padStart(2, '0');\r\n        let dd = \"01\"\r\n        let date = new Date(`${yyyy}-${mm}-${dd}`);\r\n        // use last known date (make sure to set first date to earliest and vice versa)\r\n        // update bubble here (could be < lower bound or > upper bound)\r\n        if (date >= currentDate) {\r\n            bubbles = bubbles.splice(0, INIT_NUM_BUBBLES);\r\n            for (let i = 0; i < INIT_NUM_BUBBLES; i++) {\r\n                bubbles[i].setSpeed(p.random(-1.5, -1));\r\n            }\r\n        }\r\n    }\r\n    \r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}