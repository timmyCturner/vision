{"ast":null,"code":"/**\n * Rounds all the x and y values of an array of points\n * @param {Array<Array<number>>} points\n * @return {Array<Array<number>>} modified input value\n * @private\n */\nexport function round(points) {\n  for (let i = 0; i < points.length; i++) {\n    points[i][0] = Math.round(points[i][0]);\n    points[i][1] = Math.round(points[i][1]);\n  }\n\n  return points;\n}\n/**\n * Calculates a new point that is the difference p1 - p2\n * @param {Array<number>} p1\n * @param {Array<number>} p2\n * @return {Array<number>}\n * @private\n */\n\nexport function difference(p1, p2) {\n  return [p1[0] - p2[0], p1[1] - p2[1]];\n}\n/**\n * Normalize a point\n * @param {Array<number>} p\n * @return {Array<number>}\n * @private\n */\n\nexport function normalize(p) {\n  let length = Math.sqrt(p[0] ** 2 + p[1] ** 2);\n  return [p[0] / length, p[1] / length];\n}\n/**\n * We rotate an array of points\n * @param {number} radians\n * @param {Array<Array<number>>} srcPoints\n * @param {Array<Array<number>>} destPoints\n * @return {Array<Array<number>>}\n * @private\n */\n\nexport function rotate(radians, srcPoints, destPoints) {\n  if (destPoints === undefined) destPoints = new Array(srcPoints.length);\n  let cos = Math.cos(radians);\n  let sin = Math.sin(radians);\n\n  for (let i = 0; i < destPoints.length; ++i) {\n    destPoints[i] = [cos * srcPoints[i][0] - sin * srcPoints[i][1], sin * srcPoints[i][0] + cos * srcPoints[i][1]];\n  }\n\n  return destPoints;\n}\n/**\n * Dot products of 2 points assuming vectors starting from (0,0)\n * @param {Array<number>} p1\n * @param {Array<number>} p2\n * @return {number}\n * @private\n */\n\nexport function dot(p1, p2) {\n  return p1[0] * p2[0] + p1[1] * p2[1];\n}\n/**\n * Returns the angle between 3 points. The first one is a common point\n * @param {Array<number>} origin\n * @param {Array<number>} p1\n * @param {Array<number>} p2\n * @return {number}\n * @private\n */\n\nexport function angle(origin, p1, p2) {\n  let v1 = normalize(difference(p1, origin));\n  let v2 = normalize(difference(p2, origin));\n  let dotProduct = dot(v1, v2); // TODO this code is not correct because it may yield the opposite angle\n\n  return Math.acos(dotProduct);\n}\n/**\n * Returns the 4 points of an horizontal rectangle that includes all the points\n * @param {Array<Array<number>>} points\n * @return {Array<Array<number>>}\n * @private\n */\n\nexport function boundary(points) {\n  let minMaxValues = minMax(points);\n  let xMin = minMaxValues[0][0];\n  let yMin = minMaxValues[0][1];\n  let xMax = minMaxValues[1][0];\n  let yMax = minMaxValues[1][1];\n  return [[xMin, yMin], [xMax, yMin], [xMax, yMax], [xMin, yMax]];\n}\n/**\n * Returns the perimeter represented by the points (a polygon)\n * @param {Array<Array<number>>} points\n */\n\nexport function perimeter(vertices) {\n  let total = 0;\n\n  for (let i = 0; i < vertices.length; i++) {\n    let fromX = vertices[i][0];\n    let fromY = vertices[i][1];\n    let toX = vertices[i === vertices.length - 1 ? 0 : i + 1][0];\n    let toY = vertices[i === vertices.length - 1 ? 0 : i + 1][1];\n    total += Math.sqrt((toX - fromX) ** 2 + (toY - fromY) ** 2);\n  }\n\n  return total;\n}\n/**\n * Returns the surface represented by the points (a polygon)\n * @param {Array<Array<number>>} points\n */\n\nexport function surface(vertices) {\n  let total = 0;\n\n  for (let i = 0; i < vertices.length; i++) {\n    let addX = vertices[i][0];\n    let addY = vertices[i === vertices.length - 1 ? 0 : i + 1][1];\n    let subX = vertices[i === vertices.length - 1 ? 0 : i + 1][0];\n    let subY = vertices[i][1];\n    total += addX * addY * 0.5;\n    total -= subX * subY * 0.5;\n  }\n\n  return Math.abs(total);\n}\n/**\n * Returns 2 points with minimal and maximal XY\n * @param {Array<Array<number>>} points\n * @return {Array<Array<number>>}\n * @private\n */\n\nexport function minMax(points) {\n  let xMin = +Infinity;\n  let yMin = +Infinity;\n  let xMax = -Infinity;\n  let yMax = -Infinity;\n\n  for (let i = 0; i < points.length; i++) {\n    if (points[i][0] < xMin) xMin = points[i][0];\n    if (points[i][0] > xMax) xMax = points[i][0];\n    if (points[i][1] < yMin) yMin = points[i][1];\n    if (points[i][1] > yMax) yMax = points[i][1];\n  }\n\n  return [[xMin, yMin], [xMax, yMax]];\n}\n/**\n * Moves the minX, minY to 0,0\n * All the points will be positive after this move\n * @param {Array<Array<number>>} srcPoints\n * @param {Array<Array<number>>} destPoints\n * @return {Array<Array<number>>}\n * @private\n */\n\nexport function moveToZeroZero(srcPoints, destPoints) {\n  if (destPoints === undefined) {\n    destPoints = new Array(srcPoints.length).fill(0).map(() => []);\n  }\n\n  let minMaxValues = minMax(srcPoints);\n  let xMin = minMaxValues[0][0];\n  let yMin = minMaxValues[0][1];\n\n  for (let i = 0; i < srcPoints.length; i++) {\n    destPoints[i][0] = srcPoints[i][0] - xMin;\n    destPoints[i][1] = srcPoints[i][1] - yMin;\n  }\n\n  return destPoints;\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/node_modules/image-js/src/util/points.js"],"names":["round","points","i","length","Math","difference","p1","p2","normalize","p","sqrt","rotate","radians","srcPoints","destPoints","undefined","Array","cos","sin","dot","angle","origin","v1","v2","dotProduct","acos","boundary","minMaxValues","minMax","xMin","yMin","xMax","yMax","perimeter","vertices","total","fromX","fromY","toX","toY","surface","addX","addY","subX","subY","abs","Infinity","moveToZeroZero","fill","map"],"mappings":"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","sourcesContent":["/**\n * Rounds all the x and y values of an array of points\n * @param {Array<Array<number>>} points\n * @return {Array<Array<number>>} modified input value\n * @private\n */\nexport function round(points) {\n  for (let i = 0; i < points.length; i++) {\n    points[i][0] = Math.round(points[i][0]);\n    points[i][1] = Math.round(points[i][1]);\n  }\n  return points;\n}\n\n/**\n * Calculates a new point that is the difference p1 - p2\n * @param {Array<number>} p1\n * @param {Array<number>} p2\n * @return {Array<number>}\n * @private\n */\nexport function difference(p1, p2) {\n  return [p1[0] - p2[0], p1[1] - p2[1]];\n}\n\n/**\n * Normalize a point\n * @param {Array<number>} p\n * @return {Array<number>}\n * @private\n */\nexport function normalize(p) {\n  let length = Math.sqrt(p[0] ** 2 + p[1] ** 2);\n  return [p[0] / length, p[1] / length];\n}\n\n/**\n * We rotate an array of points\n * @param {number} radians\n * @param {Array<Array<number>>} srcPoints\n * @param {Array<Array<number>>} destPoints\n * @return {Array<Array<number>>}\n * @private\n */\nexport function rotate(radians, srcPoints, destPoints) {\n  if (destPoints === undefined) destPoints = new Array(srcPoints.length);\n  let cos = Math.cos(radians);\n  let sin = Math.sin(radians);\n  for (let i = 0; i < destPoints.length; ++i) {\n    destPoints[i] = [\n      cos * srcPoints[i][0] - sin * srcPoints[i][1],\n      sin * srcPoints[i][0] + cos * srcPoints[i][1],\n    ];\n  }\n  return destPoints;\n}\n\n/**\n * Dot products of 2 points assuming vectors starting from (0,0)\n * @param {Array<number>} p1\n * @param {Array<number>} p2\n * @return {number}\n * @private\n */\nexport function dot(p1, p2) {\n  return p1[0] * p2[0] + p1[1] * p2[1];\n}\n\n/**\n * Returns the angle between 3 points. The first one is a common point\n * @param {Array<number>} origin\n * @param {Array<number>} p1\n * @param {Array<number>} p2\n * @return {number}\n * @private\n */\nexport function angle(origin, p1, p2) {\n  let v1 = normalize(difference(p1, origin));\n  let v2 = normalize(difference(p2, origin));\n  let dotProduct = dot(v1, v2);\n  // TODO this code is not correct because it may yield the opposite angle\n  return Math.acos(dotProduct);\n}\n\n/**\n * Returns the 4 points of an horizontal rectangle that includes all the points\n * @param {Array<Array<number>>} points\n * @return {Array<Array<number>>}\n * @private\n */\nexport function boundary(points) {\n  let minMaxValues = minMax(points);\n  let xMin = minMaxValues[0][0];\n  let yMin = minMaxValues[0][1];\n  let xMax = minMaxValues[1][0];\n  let yMax = minMaxValues[1][1];\n  return [\n    [xMin, yMin],\n    [xMax, yMin],\n    [xMax, yMax],\n    [xMin, yMax],\n  ];\n}\n\n/**\n * Returns the perimeter represented by the points (a polygon)\n * @param {Array<Array<number>>} points\n */\nexport function perimeter(vertices) {\n  let total = 0;\n  for (let i = 0; i < vertices.length; i++) {\n    let fromX = vertices[i][0];\n    let fromY = vertices[i][1];\n    let toX = vertices[i === vertices.length - 1 ? 0 : i + 1][0];\n    let toY = vertices[i === vertices.length - 1 ? 0 : i + 1][1];\n    total += Math.sqrt((toX - fromX) ** 2 + (toY - fromY) ** 2);\n  }\n  return total;\n}\n\n/**\n * Returns the surface represented by the points (a polygon)\n * @param {Array<Array<number>>} points\n */\nexport function surface(vertices) {\n  let total = 0;\n\n  for (let i = 0; i < vertices.length; i++) {\n    let addX = vertices[i][0];\n    let addY = vertices[i === vertices.length - 1 ? 0 : i + 1][1];\n    let subX = vertices[i === vertices.length - 1 ? 0 : i + 1][0];\n    let subY = vertices[i][1];\n\n    total += addX * addY * 0.5;\n    total -= subX * subY * 0.5;\n  }\n\n  return Math.abs(total);\n}\n\n/**\n * Returns 2 points with minimal and maximal XY\n * @param {Array<Array<number>>} points\n * @return {Array<Array<number>>}\n * @private\n */\nexport function minMax(points) {\n  let xMin = +Infinity;\n  let yMin = +Infinity;\n  let xMax = -Infinity;\n  let yMax = -Infinity;\n  for (let i = 0; i < points.length; i++) {\n    if (points[i][0] < xMin) xMin = points[i][0];\n    if (points[i][0] > xMax) xMax = points[i][0];\n    if (points[i][1] < yMin) yMin = points[i][1];\n    if (points[i][1] > yMax) yMax = points[i][1];\n  }\n  return [\n    [xMin, yMin],\n    [xMax, yMax],\n  ];\n}\n\n/**\n * Moves the minX, minY to 0,0\n * All the points will be positive after this move\n * @param {Array<Array<number>>} srcPoints\n * @param {Array<Array<number>>} destPoints\n * @return {Array<Array<number>>}\n * @private\n */\nexport function moveToZeroZero(srcPoints, destPoints) {\n  if (destPoints === undefined) {\n    destPoints = new Array(srcPoints.length).fill(0).map(() => []);\n  }\n  let minMaxValues = minMax(srcPoints);\n  let xMin = minMaxValues[0][0];\n  let yMin = minMaxValues[0][1];\n  for (let i = 0; i < srcPoints.length; i++) {\n    destPoints[i][0] = srcPoints[i][0] - xMin;\n    destPoints[i][1] = srcPoints[i][1] - yMin;\n  }\n  return destPoints;\n}\n"]},"metadata":{},"sourceType":"module"}