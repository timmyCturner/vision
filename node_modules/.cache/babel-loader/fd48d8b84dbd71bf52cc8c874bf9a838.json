{"ast":null,"code":"import { basicGarbage } from \"./garbageShapes\"; //these are gonna be the variables for our garbage collection\n\nvar macro_plastic = [];\n\nclass Plastic {\n  constructor(p, index) {\n    this.START_HEIGHT = p.height * 0.56;\n    var ending_height = this.START_HEIGHT - index / 15; // var width = this.START_HEIGHT + index / 10;\n\n    this.x = p.random(\n    /*width*/\n    0, p.width);\n    this.y = p.random(this.START_HEIGHT, ending_height);\n    this.color = p.random(0, 255);\n    this.size = p.random(12, 20);\n  }\n\n  show(p) {\n    p.noStroke();\n    p.fill(this.color);\n    p.ellipse(this.x, this.y, this.size, this.size); //basicGarbage(this.x,this.y,this.size,this.size);\n  }\n\n}\n\nexport function setupMacroPlastics(p) {\n  //\n  //set up plastic\n  //\n  for (var i = 0; i < 200; i++) {\n    macro_plastic[i] = new Plastic(p, i);\n  }\n}\nexport function drawMacroPlastics(p, macroGrowth2050, current_date) {\n  //calc microplastic\n  //\n  var currentDate = current_date.getFullYear(); // console.log(currentDate);\n  //p.background(230, 230, 250);\n  //console.log(microGrowth2050);\n  // console.log(current_date);\n\n  for (var i = 0; i < macro_plastic.length; i++) {\n    macro_plastic[i].show(p);\n  }\n\n  if (macroGrowth2050 != null) {\n    var newSize = -1 * (macroGrowth2050[currentDate - 1950][1] - 367);\n    newSize = newSize * 5 + 200; // console.log(newSize);\n    //add drops\n\n    if (newSize > macro_plastic.length) {\n      for (var j = macro_plastic.length; j < newSize; j++) {\n        macro_plastic[j] = new Plastic(p, j);\n      }\n    } //remove drops\n\n\n    if (newSize < macro_plastic.length) {\n      var diff = macro_plastic.length - newSize;\n      macro_plastic = macro_plastic.splice(0, diff);\n    }\n  }\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/src/sketches/macroPlastics.js"],"names":["basicGarbage","macro_plastic","Plastic","constructor","p","index","START_HEIGHT","height","ending_height","x","random","width","y","color","size","show","noStroke","fill","ellipse","setupMacroPlastics","i","drawMacroPlastics","macroGrowth2050","current_date","currentDate","getFullYear","length","newSize","j","diff","splice"],"mappings":"AAAA,SAASA,YAAT,QAA6B,iBAA7B,C,CACA;;AACA,IAAIC,aAAa,GAAG,EAApB;;AAEA,MAAMC,OAAN,CAAc;AACVC,EAAAA,WAAW,CAACC,CAAD,EAAIC,KAAJ,EAAW;AAClB,SAAKC,YAAL,GAAoBF,CAAC,CAACG,MAAF,GAAW,IAA/B;AACA,QAAIC,aAAa,GAAG,KAAKF,YAAL,GAAoBD,KAAK,GAAG,EAAhD,CAFkB,CAGlB;;AACA,SAAKI,CAAL,GAASL,CAAC,CAACM,MAAF;AAAS;AAAU,KAAnB,EAAsBN,CAAC,CAACO,KAAxB,CAAT;AACA,SAAKC,CAAL,GAASR,CAAC,CAACM,MAAF,CAAS,KAAKJ,YAAd,EAA4BE,aAA5B,CAAT;AACA,SAAKK,KAAL,GAAaT,CAAC,CAACM,MAAF,CAAS,CAAT,EAAY,GAAZ,CAAb;AACA,SAAKI,IAAL,GAAYV,CAAC,CAACM,MAAF,CAAS,EAAT,EAAa,EAAb,CAAZ;AACH;;AAEDK,EAAAA,IAAI,CAACX,CAAD,EAAI;AACJA,IAAAA,CAAC,CAACY,QAAF;AACAZ,IAAAA,CAAC,CAACa,IAAF,CAAO,KAAKJ,KAAZ;AACAT,IAAAA,CAAC,CAACc,OAAF,CAAU,KAAKT,CAAf,EAAkB,KAAKG,CAAvB,EAA0B,KAAKE,IAA/B,EAAqC,KAAKA,IAA1C,EAHI,CAIJ;AACH;;AAhBS;;AAmBd,OAAO,SAASK,kBAAT,CAA4Bf,CAA5B,EAA+B;AAClC;AACA;AACA;AACA,OAAK,IAAIgB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,GAApB,EAAyBA,CAAC,EAA1B,EAA8B;AAC1BnB,IAAAA,aAAa,CAACmB,CAAD,CAAb,GAAmB,IAAIlB,OAAJ,CAAYE,CAAZ,EAAegB,CAAf,CAAnB;AACH;AACJ;AAED,OAAO,SAASC,iBAAT,CAA2BjB,CAA3B,EAA8BkB,eAA9B,EAA+CC,YAA/C,EAA6D;AAChE;AACA;AACA,MAAIC,WAAW,GAAGD,YAAY,CAACE,WAAb,EAAlB,CAHgE,CAIhE;AACA;AACA;AACA;;AAEA,OAAK,IAAIL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGnB,aAAa,CAACyB,MAAlC,EAA0CN,CAAC,EAA3C,EAA+C;AAC3CnB,IAAAA,aAAa,CAACmB,CAAD,CAAb,CAAiBL,IAAjB,CAAsBX,CAAtB;AACH;;AAED,MAAIkB,eAAe,IAAI,IAAvB,EAA6B;AACzB,QAAIK,OAAO,GAAG,CAAC,CAAD,IAAML,eAAe,CAACE,WAAW,GAAG,IAAf,CAAf,CAAoC,CAApC,IAAyC,GAA/C,CAAd;AACAG,IAAAA,OAAO,GAAGA,OAAO,GAAG,CAAV,GAAc,GAAxB,CAFyB,CAGzB;AACA;;AACA,QAAIA,OAAO,GAAG1B,aAAa,CAACyB,MAA5B,EAAoC;AAChC,WAAK,IAAIE,CAAC,GAAG3B,aAAa,CAACyB,MAA3B,EAAmCE,CAAC,GAAGD,OAAvC,EAAgDC,CAAC,EAAjD,EAAqD;AACjD3B,QAAAA,aAAa,CAAC2B,CAAD,CAAb,GAAmB,IAAI1B,OAAJ,CAAYE,CAAZ,EAAewB,CAAf,CAAnB;AACH;AACJ,KATwB,CAUzB;;;AACA,QAAID,OAAO,GAAG1B,aAAa,CAACyB,MAA5B,EAAoC;AAChC,UAAIG,IAAI,GAAG5B,aAAa,CAACyB,MAAd,GAAuBC,OAAlC;AACA1B,MAAAA,aAAa,GAAGA,aAAa,CAAC6B,MAAd,CAAqB,CAArB,EAAwBD,IAAxB,CAAhB;AACH;AACJ;AACJ","sourcesContent":["import { basicGarbage } from \"./garbageShapes\";\r\n//these are gonna be the variables for our garbage collection\r\nvar macro_plastic = [];\r\n\r\nclass Plastic {\r\n    constructor(p, index) {\r\n        this.START_HEIGHT = p.height * 0.56;\r\n        var ending_height = this.START_HEIGHT - index / 15;\r\n        // var width = this.START_HEIGHT + index / 10;\r\n        this.x = p.random(/*width*/ 0, p.width);\r\n        this.y = p.random(this.START_HEIGHT, ending_height);\r\n        this.color = p.random(0, 255);\r\n        this.size = p.random(12, 20);\r\n    }\r\n\r\n    show(p) {\r\n        p.noStroke();\r\n        p.fill(this.color);\r\n        p.ellipse(this.x, this.y, this.size, this.size);\r\n        //basicGarbage(this.x,this.y,this.size,this.size);\r\n    }\r\n}\r\n\r\nexport function setupMacroPlastics(p) {\r\n    //\r\n    //set up plastic\r\n    //\r\n    for (var i = 0; i < 200; i++) {\r\n        macro_plastic[i] = new Plastic(p, i);\r\n    }\r\n}\r\n\r\nexport function drawMacroPlastics(p, macroGrowth2050, current_date) {\r\n    //calc microplastic\r\n    //\r\n    var currentDate = current_date.getFullYear();\r\n    // console.log(currentDate);\r\n    //p.background(230, 230, 250);\r\n    //console.log(microGrowth2050);\r\n    // console.log(current_date);\r\n\r\n    for (var i = 0; i < macro_plastic.length; i++) {\r\n        macro_plastic[i].show(p);\r\n    }\r\n\r\n    if (macroGrowth2050 != null) {\r\n        var newSize = -1 * (macroGrowth2050[currentDate - 1950][1] - 367);\r\n        newSize = newSize * 5 + 200;\r\n        // console.log(newSize);\r\n        //add drops\r\n        if (newSize > macro_plastic.length) {\r\n            for (var j = macro_plastic.length; j < newSize; j++) {\r\n                macro_plastic[j] = new Plastic(p, j);\r\n            }\r\n        }\r\n        //remove drops\r\n        if (newSize < macro_plastic.length) {\r\n            var diff = macro_plastic.length - newSize;\r\n            macro_plastic = macro_plastic.splice(0, diff);\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}