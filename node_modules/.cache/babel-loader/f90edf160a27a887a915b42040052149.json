{"ast":null,"code":"export default function microPlastic(p) {\n  let canvas; //these are gonna be the variables for our garbage collection\n\n  var drops = [];\n  var microGrowth2050_array; //these are all variables for our wave function\n\n  let xspacing = 16; // Distance between each horizontal location\n\n  let w; // Width of entire wave\n\n  let theta = 0.15; // Start angle at 0\n\n  let amplitude = 25.0; // Height of wave\n\n  let period = 200.0; // How many pixels before the wave repeats\n\n  let dx = 2; // Value for incrementing x\n\n  let yvalues; // Using an array to store height values for the wave\n\n  let backvalues;\n  let back = 2; // back offset\n\n  p.setup = () => {\n    canvas = p.createCanvas(600, 600); //set up wave\n\n    w = p.width + 16;\n    dx = 2 * Math.PI / period * xspacing;\n    yvalues = new Array(p.floor(w / xspacing));\n    backvalues = new Array(p.floor(w / xspacing)); //\n    //set up plastic\n    //\n\n    for (var i = 0; i < 200; i++) {\n      drops[i] = new Drop();\n    }\n  };\n\n  p.draw = () => {\n    p.background('blue'); //do wave\n\n    p.calcWave();\n    p.renderWave();\n    p.backWave();\n    p.rect(0, p.height - 200, p.width, 200); //calc microplastic\n    //\n    //p.background(230, 230, 250);\n\n    for (var i = 0; i < drops.length; i++) {\n      drops[i].update();\n      drops[i].show();\n    }\n  };\n\n  class Drop {\n    constructor() {\n      this.x = p.random(0, p.width);\n      this.y = p.random(0, p.height);\n    }\n\n    show() {\n      p.noStroke();\n      p.fill(255);\n      p.ellipse(this.x, this.y, p.random(3, 5), p.random(5, 10));\n    }\n\n    update() {\n      this.speed = this.speed = p.random(2, 4);\n      ;\n      this.gravity = 1.05;\n      this.y = this.y + this.speed * this.gravity;\n\n      if (this.y > p.height) {\n        this.y = 250;\n        this.gravity = 0;\n      }\n    }\n\n  } //\n  //\n  //\n  //hear lies al information on how to create a wave\n  //\n  //\n  //\n\n\n  p.calcWave = () => {\n    // Increment theta (try different values for\n    // 'angular velocity' here)\n    theta += 0.02; // For every x value, calculate a y value with sine function\n\n    let x = theta;\n\n    for (let i = 0; i < yvalues.length; i++) {\n      yvalues[i] = Math.sin(x) * amplitude;\n      backvalues[i] = Math.sin(x + back) * amplitude;\n      x += dx;\n    }\n  };\n\n  p.renderWave = () => {\n    p.noStroke();\n    p.fill(37, 207, 122); // A simple way to draw the wave with an ellipse at each location\n\n    for (let x = 0; x < yvalues.length; x++) {\n      var waveHeight = p.height / 2 + yvalues[x];\n      p.ellipse(x * xspacing, 3 * p.height / 5, 64, waveHeight);\n    }\n  };\n\n  p.backWave = () => {\n    p.noStroke();\n    p.fill(19, 149, 244); // A simple way to draw the wave with an ellipse at each location\n\n    for (let x = 0; x < backvalues.length; x++) {\n      var waveHeight = p.height / 2 + backvalues[x];\n      p.ellipse(x * xspacing, 3 * p.height / 5, 64, waveHeight);\n    }\n  };\n\n  p.myCustomRedrawAccordingToNewPropsHandler = newProps => {\n    if (canvas) {//Make sure the canvas has been created\n      //console.log('customProp');\n      //console.log(newProps.tempArray.tempData);\n    }\n\n    console.log(newProps);\n    microGrowth2050_array = newProps.microGrowth2050.microGrowth2050;\n  };\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/src/sketches/microPlastic.js"],"names":["microPlastic","p","canvas","drops","microGrowth2050_array","xspacing","w","theta","amplitude","period","dx","yvalues","backvalues","back","setup","createCanvas","width","Math","PI","Array","floor","i","Drop","draw","background","calcWave","renderWave","backWave","rect","height","length","update","show","constructor","x","random","y","noStroke","fill","ellipse","speed","gravity","sin","waveHeight","myCustomRedrawAccordingToNewPropsHandler","newProps","console","log","microGrowth2050"],"mappings":"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","sourcesContent":["\r\n\r\nexport default function microPlastic(p) {\r\n\r\n  let canvas;\r\n\r\n  //these are gonna be the variables for our garbage collection\r\n  var drops = []\r\n  var microGrowth2050_array;\r\n  //these are all variables for our wave function\r\n  let xspacing = 16; // Distance between each horizontal location\r\n  let w; // Width of entire wave\r\n  let theta = 0.15; // Start angle at 0\r\n  let amplitude = 25.0; // Height of wave\r\n  let period = 200.0; // How many pixels before the wave repeats\r\n  let dx=2; // Value for incrementing x\r\n  let yvalues; // Using an array to store height values for the wave\r\n  let backvalues;\r\n  let back = 2 // back offset\r\n\r\n\r\n\r\n  p.setup = () => {\r\n    canvas = p.createCanvas(600, 600);\r\n    //set up wave\r\n    w = p.width + 16;\r\n    dx = (2*Math.PI / period) * xspacing;\r\n    yvalues = new Array(p.floor(w / xspacing));\r\n    backvalues = new Array(p.floor(w / xspacing));\r\n    //\r\n    //set up plastic\r\n    //\r\n      for(var i = 0; i < 200; i++) {\r\n          drops[i] = new Drop();\r\n      }\r\n    }\r\n\r\n  p.draw = () => {\r\n    p.background('blue');\r\n\r\n    //do wave\r\n    p.calcWave();\r\n    p.renderWave();\r\n    p.backWave();\r\n    p.rect(0,p.height-200,p.width,200)\r\n    //calc microplastic\r\n    //\r\n    //p.background(230, 230, 250);\r\n    for (var i = 0; i < drops.length; i++) {\r\n      drops[i].update();\r\n      drops[i].show();\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  class Drop{\r\n\r\n    constructor(){\r\n      this.x = p.random(0, p.width);\r\n      this.y = p.random(0,p.height);\r\n    }\r\n\r\n\r\n    show() {\r\n      p.noStroke();\r\n      p.fill(255);\r\n      p.ellipse(this.x, this.y, p.random(3, 5), p.random(5, 10));\r\n    }\r\n    update() {\r\n      this.speed = this.speed = p.random(2, 4);;\r\n      this.gravity = 1.05;\r\n      this.y = this.y + this.speed*this.gravity;\r\n\r\n      if (this.y > p.height) {\r\n        this.y = 250;\r\n        this.gravity = 0;\r\n        }\r\n      }\r\n    }\r\n\r\n\r\n  //\r\n  //\r\n  //\r\n  //hear lies al information on how to create a wave\r\n  //\r\n  //\r\n  //\r\n  p.calcWave= () =>  {\r\n    // Increment theta (try different values for\r\n    // 'angular velocity' here)\r\n    theta += 0.02;\r\n    // For every x value, calculate a y value with sine function\r\n    let x = theta;\r\n    for (let i = 0; i < yvalues.length; i++) {\r\n\r\n      yvalues[i] = Math.sin(x) * amplitude;\r\n      backvalues[i] = Math.sin(x+back) * amplitude;\r\n      x += dx;\r\n    }\r\n  }\r\n  p.renderWave = () => {\r\n    p.noStroke();\r\n    p.fill(37, 207, 122);\r\n    // A simple way to draw the wave with an ellipse at each location\r\n    for (let x = 0; x < yvalues.length; x++) {\r\n      var waveHeight = p.height / 2 + yvalues[x]\r\n      p.ellipse((x) * xspacing, 3*p.height/5, 64, waveHeight);\r\n\r\n    }\r\n  }\r\n  p.backWave = () => {\r\n    p.noStroke();\r\n    p.fill(19, 149, 244);\r\n    // A simple way to draw the wave with an ellipse at each location\r\n    for (let x = 0; x < backvalues.length; x++) {\r\n      var waveHeight = p.height / 2 + backvalues[x]\r\n      p.ellipse((x) * xspacing, 3*p.height/5, 64,waveHeight);\r\n\r\n    }\r\n  }\r\n\r\n\r\n  p.myCustomRedrawAccordingToNewPropsHandler = (newProps) => {\r\n    if(canvas){ //Make sure the canvas has been created\r\n      //console.log('customProp');\r\n\r\n      //console.log(newProps.tempArray.tempData);\r\n\r\n    }\r\n    console.log(newProps);\r\n    microGrowth2050_array = newProps.microGrowth2050.microGrowth2050\r\n  }\r\n\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}