{"ast":null,"code":"let smogClouds = [];\nlet originalData = null;\nconst initial_clouds = 4;\nlet extra_clouds = 0;\nlet color;\nexport let hoveredSmogData = {\n  mouseOver: false,\n  value: null\n};\nlet hoveredSmog = null;\n\nclass SmogCloud {\n  constructor(p, todayData, initial) {\n    let diff = 0;\n\n    if (!todayData || !initial) {\n      this.todayData = undefined;\n      this.oldData = undefined;\n    } else {\n      this.todayData = todayData;\n      this.oldData = initial;\n      diff = Math.round(todayData.average - initial.average);\n    }\n\n    this.xVelocity = p.random(-2, 2); //cloud movement velocity\n\n    this.x = p.random(50, p.width);\n    this.y = p.random(50, 200);\n    this.width = p.random(100 + diff, 300 + diff);\n    this.height = p.random(50 + diff, 100 + diff);\n    this.smogBubbles = [];\n    this.opacity = p.random(50, 200);\n    this.addLimit = 0;\n\n    for (let x = 0; x < 25; x++) {\n      this.smogBubbles[x] = new SmogBubble(p, this.width, this.height, diff, diff);\n    }\n\n    this.display = function (todayData) {\n      this.oldData = this.todayData;\n      this.todayData = todayData;\n\n      if (this.todayData === undefined) {\n        this.todayData = this.oldData;\n      } // console.log(\"Displaying smog cloud\");\n\n\n      if (this.oldData) {\n        p.noStroke();\n        let cloudColor = p.color(color);\n        cloudColor.setAlpha(this.opacity);\n        p.fill(cloudColor);\n        this.width += (parseFloat(this.todayData.average) - parseFloat(this.oldData.average)) * 2;\n        this.height += (parseFloat(this.todayData.average) - parseFloat(this.oldData.average)) * 2;\n\n        if (hoveredSmogData.mouseOver) {\n          p.fill(225, 225, 0, 70);\n        }\n\n        p.ellipse(this.x, this.y, this.width, this.height);\n        p.beginShape();\n\n        for (let x = 0; x < this.smogBubbles.length; x++) {\n          cloudColor.setAlpha(this.smogBubbles[x].opacity);\n          p.fill(cloudColor);\n          this.smogBubbles[x].rx += (this.todayData.average - this.oldData.average) * 2;\n          this.smogBubbles[x].ry += (this.todayData.average - this.oldData.average) * 2; //this.smogBubbles[x].rxVelocity += (this.todayData.average - this.oldData.average)\n          //this.smogBubbles[x].ryVelocity += (this.todayData.average - this.oldData.average)\n\n          if (hoveredSmogData.mouseOver) {\n            p.fill(225, 225, 0, 70);\n          }\n\n          this.smogBubbles[x].display(this.x, this.y);\n        }\n      }\n\n      p.endShape(p.CLOSE);\n    };\n\n    this.move = function () {\n      if (this.oldData) {\n        this.addlimit += (parseFloat(this.todayData.average) - parseFloat(this.oldData.average)) * 10;\n\n        for (let x = 0; x < this.smogBubbles.length; x++) {\n          if (Math.abs(this.smogBubbles[x].xOffset) > this.width / 2 - 10 + this.addLimit / 3) {\n            this.smogBubbles[x].xVelocity *= -1;\n          }\n\n          if (Math.abs(this.smogBubbles[x].yOffset) > this.height / 2 - 10 + this.addLimit / 3) {\n            this.smogBubbles[x].yVelocity *= -1;\n          }\n\n          if (Math.abs(this.smogBubbles[x].xOffset) > this.width / 2 + this.addLimit + 10 || Math.abs(this.smogBubbles[x].yOffset) > this.height / 2 + this.addLimit / 3 + 10) {\n            this.smogBubbles[x].xOffset = p.random((this.width / 2 + this.addLimit) * -1, this.width / 2);\n            this.smogBubbles[x].yOffset = p.random((this.height / 2 + this.addLimit) * -1, this.height / 2);\n          }\n\n          if (this.smogBubbles[x].rx < 70 + this.addLimit || this.smogBubbles[x].rx > 150 + this.addLimit) {\n            this.smogBubbles[x].rxVelocity *= -1;\n          }\n\n          if (this.smogBubbles[x].ry < 70 + this.addLimit || this.smogBubbles[x].ry > 150 + this.addLimit) {\n            this.smogBubbles[x].ryVelocity *= -1;\n          }\n\n          this.smogBubbles[x].xOffset += this.smogBubbles[x].xVelocity;\n          this.smogBubbles[x].yOffset += this.smogBubbles[x].yVelocity;\n          this.smogBubbles[x].rx += this.smogBubbles[x].rxVelocity;\n          this.smogBubbles[x].ry += this.smogBubbles[x].ryVelocity;\n          this.smogBubbles[x].move();\n        }\n      }\n\n      if (this.x > p.width + 50) {\n        this.x = -50;\n      } else if (this.x < -50) {\n        this.x = p.width - 100;\n      }\n\n      this.x += this.xVelocity;\n    };\n  }\n\n}\n\nclass SmogBubble {\n  constructor(p, xlimit, ylimit, wMod, hMod) {\n    this.opacity = p.random(50, 200);\n    this.xVelocity = p.random(0.3, 0.7);\n    this.yVelocity = p.random(0.3, 0.7);\n    this.xOffset = p.random(xlimit / 2 * -1, xlimit / 2);\n    this.yOffset = p.random(ylimit / 2 * -1, ylimit / 2);\n    this.rx = p.random(70 + wMod, 150 + wMod);\n    this.ry = p.random(70 + hMod, 150 + hMod);\n    this.rxVelocity = p.random(0.1, 0.5);\n    this.ryVelocity = p.random(0.1, 0.5);\n    this.size = this.rx;\n    this.x = 0;\n    this.y = 0;\n\n    this.display = function (x, y) {\n      this.x = x + this.xOffset;\n      this.y = y + this.yOffset;\n      p.ellipse(x + this.xOffset, y + this.yOffset, this.rx, this.ry);\n      p.curveVertex(x + this.xOffset, y + this.yOffset);\n    };\n\n    this.move = function () {\n      // check if mouse is pressed and within range of bubble\n      //console.log(this.size);\n      if (p.mouseIsPressed && p.dist(p.mouseX, p.mouseY, this.x, this.y) < this.size / 2 + 20) {\n        hoveredSmogData.mouseOver = true;\n        hoveredSmog = this;\n      }\n    };\n  }\n\n}\n\nexport function setupSmogClouds(p, nitrousData, currentDate) {\n  if (!nitrousData) {\n    for (let i = 0; i < initial_clouds; i++) {\n      smogClouds[i] = new SmogCloud(p, null, null);\n    }\n  } else {\n    let currIndex = 33 + (currentDate.getFullYear() - 2004) * 12 + currentDate.getMonth();\n\n    for (let i = 0; i < nitrousData[0].average / 10; i++) {\n      smogClouds[i] = new SmogCloud(p, nitrousData[currIndex], nitrousData[0]);\n    }\n  }\n}\nexport function drawSmogClouds(p, nitrousData, currentDate) {\n  color = 255 - (currentDate.getFullYear() - 1950) * 2;\n\n  if (nitrousData) {\n    let currIndex = 33 + (currentDate.getFullYear() - 2004) * 12 + currentDate.getMonth();\n\n    if (originalData == null && nitrousData != null) {\n      originalData = nitrousData[0];\n    } else if (nitrousData && currIndex > 0 && currIndex < nitrousData.length) {\n      let diff = Math.round((nitrousData[currIndex].average - originalData.average) / 10) - extra_clouds - 1; //console.log(diff);\n\n      if (diff > 0) {\n        for (let x = 0; x < diff; x++) {\n          smogClouds[smogClouds.length] = new SmogCloud(p, nitrousData[currIndex], originalData);\n          extra_clouds++; // console.log(\"Extra cloud created\");\n        }\n      } else if (diff < 0 && extra_clouds > 0) {\n        // console.log(\"Diff: \"+diff);\n        let slice = smogClouds.length + diff;\n        extra_clouds -= smogClouds.length - slice; // console.log(\"Extra clouds: \"+ extra_clouds);\n        // console.log(\"Length \"+ smogClouds.length);\n        // console.log(\"Slice \" + slice)\n\n        smogClouds = smogClouds.slice(0, slice);\n      }\n    }\n\n    if (currIndex >= 0) {\n      if (currIndex < nitrousData.length) {\n        //console.log(nitrousData[currIndex]);\n        hoveredSmogData.value = nitrousData[currIndex].average;\n      } else {\n        hoveredSmogData.value = nitrousData[nitrousData.length - 1].average;\n      }\n\n      for (var i = 0; i < smogClouds.length; i++) {\n        if (!hoveredSmogData.mouseOver) {\n          smogClouds[i].move(p);\n        } else if (p.dist(p.mouseX, p.mouseY, hoveredSmog.x, hoveredSmog.y) > hoveredSmog.size / 2 + 20) {\n          hoveredSmogData.mouseOver = false;\n        }\n\n        smogClouds[i].display(nitrousData[currIndex]);\n      }\n    } else {\n      hoveredSmogData.value = nitrousData[0].average;\n\n      for (var j = 0; j < smogClouds.length; j++) {\n        if (!hoveredSmogData.mouseOver) {\n          smogClouds[j].move(p);\n        } else if (p.dist(p.mouseX, p.mouseY, hoveredSmog.x, hoveredSmog.y) > hoveredSmog.size / 2 + 20) {\n          hoveredSmogData.mouseOver = false;\n        }\n\n        smogClouds[j].display(nitrousData[0]);\n      }\n    }\n  }\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/src/sketches/smogClouds.js"],"names":["smogClouds","originalData","initial_clouds","extra_clouds","color","hoveredSmogData","mouseOver","value","hoveredSmog","SmogCloud","constructor","p","todayData","initial","diff","undefined","oldData","Math","round","average","xVelocity","random","x","width","y","height","smogBubbles","opacity","addLimit","SmogBubble","display","noStroke","cloudColor","setAlpha","fill","parseFloat","ellipse","beginShape","length","rx","ry","endShape","CLOSE","move","addlimit","abs","xOffset","yOffset","yVelocity","rxVelocity","ryVelocity","xlimit","ylimit","wMod","hMod","size","curveVertex","mouseIsPressed","dist","mouseX","mouseY","setupSmogClouds","nitrousData","currentDate","i","currIndex","getFullYear","getMonth","drawSmogClouds","slice","j"],"mappings":"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","sourcesContent":["let smogClouds = [];\r\nlet originalData = null;\r\nconst initial_clouds = 4;\r\nlet extra_clouds = 0;\r\nlet color;\r\nexport let hoveredSmogData = { mouseOver: false, value: null };\r\nlet hoveredSmog = null;\r\n\r\nclass SmogCloud {\r\n    constructor(p, todayData, initial) {\r\n        let diff = 0;\r\n        if(!todayData || !initial) {\r\n            this.todayData = undefined;\r\n            this.oldData = undefined\r\n        }\r\n        else {\r\n            this.todayData = todayData;\r\n            this.oldData = initial;\r\n            diff = Math.round(((todayData.average - initial.average)))\r\n        }\r\n\r\n\r\n\r\n        this.xVelocity = p.random(-2, 2); //cloud movement velocity\r\n        this.x = p.random(50, p.width);\r\n        this.y = p.random(50, 200);\r\n        this.width = p.random(100 + diff, 300 + diff);\r\n        this.height = p.random(50 + diff, 100 + diff);\r\n        this.smogBubbles = [];\r\n        this.opacity = p.random(50, 200);\r\n        this.addLimit = 0;\r\n\r\n        for (let x = 0; x < 25; x++) {\r\n            this.smogBubbles[x] = new SmogBubble(p, this.width, this.height, diff, diff);\r\n        }\r\n\r\n        this.display = function (todayData) {\r\n            this.oldData = this.todayData\r\n            this.todayData = todayData;\r\n            if(this.todayData === undefined) {\r\n                this.todayData = this.oldData;\r\n            }\r\n            // console.log(\"Displaying smog cloud\");\r\n\r\n            if(this.oldData) {\r\n                p.noStroke();\r\n                let cloudColor = p.color(color);\r\n                cloudColor.setAlpha(this.opacity);\r\n                p.fill(cloudColor);\r\n\r\n                this.width += (parseFloat(this.todayData.average) - parseFloat(this.oldData.average))*2\r\n                this.height += (parseFloat(this.todayData.average) - parseFloat(this.oldData.average))*2\r\n                if (hoveredSmogData.mouseOver) {\r\n                    p.fill(225, 225, 0, 70)\r\n                }\r\n                p.ellipse(this.x, this.y, this.width, this.height);\r\n                p.beginShape();\r\n                for (let x = 0; x < this.smogBubbles.length; x++) {\r\n                    cloudColor.setAlpha(this.smogBubbles[x].opacity);\r\n                    p.fill(cloudColor);\r\n                    this.smogBubbles[x].rx += (this.todayData.average - this.oldData.average)*2\r\n                    this.smogBubbles[x].ry += (this.todayData.average - this.oldData.average)*2\r\n\r\n                    //this.smogBubbles[x].rxVelocity += (this.todayData.average - this.oldData.average)\r\n                    //this.smogBubbles[x].ryVelocity += (this.todayData.average - this.oldData.average)\r\n                    if (hoveredSmogData.mouseOver) {\r\n                        p.fill(225, 225, 0, 70)\r\n                    }\r\n                    this.smogBubbles[x].display(this.x,this.y)\r\n                }\r\n            }\r\n            p.endShape(p.CLOSE);\r\n        };\r\n\r\n        this.move = function () {\r\n            if(this.oldData) {\r\n                this.addlimit += (parseFloat(this.todayData.average) - parseFloat(this.oldData.average))* 10;\r\n                for (let x = 0; x < this.smogBubbles.length; x++) {\r\n                    if (Math.abs(this.smogBubbles[x].xOffset) > this.width / 2 - 10 + this.addLimit/3) {\r\n                        this.smogBubbles[x].xVelocity *= -1;\r\n\r\n                    }\r\n                    if (Math.abs(this.smogBubbles[x].yOffset) > this.height / 2 - 10 + this.addLimit/3) {\r\n                        this.smogBubbles[x].yVelocity *= -1;\r\n\r\n                    }\r\n                    if(Math.abs(this.smogBubbles[x].xOffset) > this.width / 2 + this.addLimit + 10 || Math.abs(this.smogBubbles[x].yOffset) > this.height / 2 + this.addLimit/3 + 10) {\r\n                        this.smogBubbles[x].xOffset = p.random((this.width / 2 + this.addLimit) * -1, this.width / 2);\r\n                        this.smogBubbles[x].yOffset = p.random((this.height / 2 + this.addLimit) * -1, this.height / 2);\r\n\r\n                    }\r\n                    if (this.smogBubbles[x].rx < 70 + this.addLimit || this.smogBubbles[x].rx > 150 + this.addLimit) {\r\n                        this.smogBubbles[x].rxVelocity *= -1;\r\n                    }\r\n                    if (this.smogBubbles[x].ry < 70 + this.addLimit || this.smogBubbles[x].ry > 150 + this.addLimit) {\r\n                        this.smogBubbles[x].ryVelocity *= -1;\r\n                    }\r\n\r\n                    this.smogBubbles[x].xOffset += this.smogBubbles[x].xVelocity;\r\n                    this.smogBubbles[x].yOffset += this.smogBubbles[x].yVelocity;\r\n\r\n                    this.smogBubbles[x].rx += this.smogBubbles[x].rxVelocity;\r\n                    this.smogBubbles[x].ry += this.smogBubbles[x].ryVelocity;\r\n\r\n                    this.smogBubbles[x].move()\r\n                }\r\n            }\r\n            if (this.x > p.width + 50) {\r\n                this.x = -50;\r\n            } else if (this.x < -50) {\r\n                this.x = p.width - 100;\r\n            }\r\n            this.x += this.xVelocity;\r\n        };\r\n    }\r\n}\r\n\r\nclass SmogBubble {\r\n    constructor(p, xlimit, ylimit, wMod, hMod) {\r\n        this.opacity = p.random(50, 200);\r\n        this.xVelocity = p.random(0.3, 0.7);\r\n        this.yVelocity = p.random(0.3, 0.7);\r\n        this.xOffset = p.random((xlimit / 2) * -1, xlimit / 2);\r\n        this.yOffset = p.random((ylimit / 2) * -1, ylimit / 2);\r\n        this.rx = p.random(70 + wMod, 150 + wMod);\r\n        this.ry = p.random(70+ hMod, 150 + hMod);\r\n\r\n        this.rxVelocity = p.random(0.1, 0.5);\r\n        this.ryVelocity = p.random(0.1, 0.5);\r\n\r\n        this.size = this.rx\r\n        this.x = 0\r\n        this.y = 0\r\n\r\n    this.display = function (x,y) {\r\n      this.x = x + this.xOffset\r\n      this.y = y + this.yOffset\r\n      p.ellipse(\r\n          x + this.xOffset,\r\n          y + this.yOffset,\r\n          this.rx,\r\n          this.ry\r\n      );\r\n      p.curveVertex(\r\n          x + this.xOffset,\r\n          y + this.yOffset\r\n      );\r\n    }\r\n    this.move = function(){// check if mouse is pressed and within range of bubble\r\n      //console.log(this.size);\r\n      if (p.mouseIsPressed && p.dist(p.mouseX, p.mouseY, this.x, this.y) < this.size / 2 + 20) {\r\n          hoveredSmogData.mouseOver = true;\r\n          hoveredSmog = this;\r\n\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function setupSmogClouds(p, nitrousData, currentDate) {\r\n\r\n    if(!nitrousData) {\r\n        for (let i = 0; i < initial_clouds; i++) {\r\n            smogClouds[i] = new SmogCloud(p, null, null);\r\n        }\r\n    }\r\n    else {\r\n        let currIndex = 33 + ((currentDate.getFullYear() - 2004) * 12) + currentDate.getMonth()\r\n        for(let i = 0; i < nitrousData[0].average / 10; i++) {\r\n            smogClouds[i] = new SmogCloud(p, nitrousData[currIndex], nitrousData[0]);\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport function drawSmogClouds(p, nitrousData, currentDate) {\r\n\r\n    color = 255 - (currentDate.getFullYear() - 1950) * 2;\r\n\r\n    if (nitrousData) {\r\n\r\n        let currIndex = 33 + ((currentDate.getFullYear() - 2004) * 12) + currentDate.getMonth()\r\n\r\n        if(originalData == null && nitrousData != null) {\r\n            originalData = nitrousData[0];\r\n\r\n        }\r\n\r\n        else if(nitrousData && currIndex > 0 && currIndex < nitrousData.length) {\r\n            let diff = Math.round(((nitrousData[currIndex].average - originalData.average)/10)) - extra_clouds -1;\r\n            //console.log(diff);\r\n\r\n            if(diff > 0) {\r\n                for(let x = 0 ; x < diff; x++) {\r\n                    smogClouds[smogClouds.length] = new SmogCloud(p, nitrousData[currIndex], originalData);\r\n                    extra_clouds++;\r\n                    // console.log(\"Extra cloud created\");\r\n                }\r\n            }\r\n            else if(diff < 0 && extra_clouds > 0) {\r\n                // console.log(\"Diff: \"+diff);\r\n                let slice = smogClouds.length + diff;\r\n                extra_clouds -= (smogClouds.length - slice);\r\n                // console.log(\"Extra clouds: \"+ extra_clouds);\r\n                // console.log(\"Length \"+ smogClouds.length);\r\n                // console.log(\"Slice \" + slice)\r\n                smogClouds = smogClouds.slice(0, slice);\r\n            }\r\n        }\r\n\r\n        if(currIndex >= 0 ) {\r\n          if (currIndex < nitrousData.length){\r\n            //console.log(nitrousData[currIndex]);\r\n            hoveredSmogData.value = nitrousData[currIndex].average\r\n          }\r\n          else {\r\n            hoveredSmogData.value = nitrousData[nitrousData.length-1].average\r\n          }\r\n\r\n            for (var i = 0; i < smogClouds.length; i++) {\r\n              if (!hoveredSmogData.mouseOver) {\r\n\r\n                smogClouds[i].move(p);\r\n              }\r\n              else if (p.dist(p.mouseX, p.mouseY, hoveredSmog.x, hoveredSmog.y) > hoveredSmog.size / 2 + 20) {\r\n                  hoveredSmogData.mouseOver = false;\r\n              }\r\n\r\n                smogClouds[i].display(nitrousData[currIndex]);\r\n            }\r\n        }\r\n        else {\r\n            hoveredSmogData.value = nitrousData[0].average\r\n\r\n            for(var j = 0; j < smogClouds.length; j++) {\r\n              if (!hoveredSmogData.mouseOver) {\r\n\r\n                smogClouds[j].move(p);\r\n              }\r\n              else if (p.dist(p.mouseX, p.mouseY, hoveredSmog.x, hoveredSmog.y) > hoveredSmog.size / 2 + 20) {\r\n                  hoveredSmogData.mouseOver = false;\r\n              }\r\n\r\n                smogClouds[j].display(nitrousData[0]);\r\n            }\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}