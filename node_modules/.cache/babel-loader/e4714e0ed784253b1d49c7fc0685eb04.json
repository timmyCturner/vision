{"ast":null,"code":"import convolution from '../operator/convolution';\n/**\n * Direction of a gradient filter\n * @typedef {('x'|'y'|'xy')} GradientDirection\n */\n\n/**\n * @memberof Image\n * @instance\n * @param {object} [options]\n * @param {GradientDirection} [options.direction]\n * @param {Array<Array<number>>} [options.kernelX]\n * @param {Array<Array<number>>} [options.kernelY]\n * @param {string} [options.border='copy']\n * @param {*} [options.channels]\n * @param {number} [options.bitDepth=this.bitDepth] Specify the bitDepth of the resulting image\n * @return {Image}\n */\n\nexport default function gradientFilter(options = {}) {\n  let {\n    direction = 'xy',\n    border = 'copy',\n    kernelX,\n    kernelY,\n    channels,\n    bitDepth = this.bitDepth\n  } = options;\n  this.checkProcessable('gradientFilter', {\n    bitDepth: [8, 16]\n  });\n\n  switch (direction) {\n    case 'x':\n      if (!kernelX) throw new Error('kernelX option is missing');\n      return convolution.call(this, kernelX, {\n        channels: channels,\n        border: border,\n        bitDepth\n      });\n\n    case 'y':\n      if (!kernelY) throw new Error('kernelY option is missing');\n      return convolution.call(this, kernelY, {\n        channels: channels,\n        border: border,\n        bitDepth\n      });\n\n    case 'xy':\n      {\n        if (!kernelX) throw new Error('kernelX option is missing');\n        if (!kernelY) throw new Error('kernelY option is missing');\n        const gX = convolution.call(this, kernelX, {\n          channels: channels,\n          border: border,\n          bitDepth: 32\n        });\n        const gY = convolution.call(this, kernelY, {\n          channels: channels,\n          border: border,\n          bitDepth: 32\n        });\n        return gX.hypotenuse(gY, {\n          bitDepth,\n          channels: channels\n        });\n      }\n\n    default:\n      throw new Error(`Unknown parameter direction: ${direction}`);\n  }\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/node_modules/image-js/src/image/filter/gradientFilter.js"],"names":["convolution","gradientFilter","options","direction","border","kernelX","kernelY","channels","bitDepth","checkProcessable","Error","call","gX","gY","hypotenuse"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,yBAAxB;AAEA;;;;;AAKA;;;;;;;;;;;;;AAYA,eAAe,SAASC,cAAT,CAAwBC,OAAO,GAAG,EAAlC,EAAsC;AACnD,MAAI;AACFC,IAAAA,SAAS,GAAG,IADV;AAEFC,IAAAA,MAAM,GAAG,MAFP;AAGFC,IAAAA,OAHE;AAIFC,IAAAA,OAJE;AAKFC,IAAAA,QALE;AAMFC,IAAAA,QAAQ,GAAG,KAAKA;AANd,MAOAN,OAPJ;AASA,OAAKO,gBAAL,CAAsB,gBAAtB,EAAwC;AACtCD,IAAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,EAAJ;AAD4B,GAAxC;;AAIA,UAAQL,SAAR;AACE,SAAK,GAAL;AACE,UAAI,CAACE,OAAL,EAAc,MAAM,IAAIK,KAAJ,CAAU,2BAAV,CAAN;AACd,aAAOV,WAAW,CAACW,IAAZ,CAAiB,IAAjB,EAAuBN,OAAvB,EAAgC;AACrCE,QAAAA,QAAQ,EAAEA,QAD2B;AAErCH,QAAAA,MAAM,EAAEA,MAF6B;AAGrCI,QAAAA;AAHqC,OAAhC,CAAP;;AAKF,SAAK,GAAL;AACE,UAAI,CAACF,OAAL,EAAc,MAAM,IAAII,KAAJ,CAAU,2BAAV,CAAN;AACd,aAAOV,WAAW,CAACW,IAAZ,CAAiB,IAAjB,EAAuBL,OAAvB,EAAgC;AACrCC,QAAAA,QAAQ,EAAEA,QAD2B;AAErCH,QAAAA,MAAM,EAAEA,MAF6B;AAGrCI,QAAAA;AAHqC,OAAhC,CAAP;;AAKF,SAAK,IAAL;AAAW;AACT,YAAI,CAACH,OAAL,EAAc,MAAM,IAAIK,KAAJ,CAAU,2BAAV,CAAN;AACd,YAAI,CAACJ,OAAL,EAAc,MAAM,IAAII,KAAJ,CAAU,2BAAV,CAAN;AACd,cAAME,EAAE,GAAGZ,WAAW,CAACW,IAAZ,CAAiB,IAAjB,EAAuBN,OAAvB,EAAgC;AACzCE,UAAAA,QAAQ,EAAEA,QAD+B;AAEzCH,UAAAA,MAAM,EAAEA,MAFiC;AAGzCI,UAAAA,QAAQ,EAAE;AAH+B,SAAhC,CAAX;AAKA,cAAMK,EAAE,GAAGb,WAAW,CAACW,IAAZ,CAAiB,IAAjB,EAAuBL,OAAvB,EAAgC;AACzCC,UAAAA,QAAQ,EAAEA,QAD+B;AAEzCH,UAAAA,MAAM,EAAEA,MAFiC;AAGzCI,UAAAA,QAAQ,EAAE;AAH+B,SAAhC,CAAX;AAKA,eAAOI,EAAE,CAACE,UAAH,CAAcD,EAAd,EAAkB;AAAEL,UAAAA,QAAF;AAAYD,UAAAA,QAAQ,EAAEA;AAAtB,SAAlB,CAAP;AACD;;AACD;AACE,YAAM,IAAIG,KAAJ,CAAW,gCAA+BP,SAAU,EAApD,CAAN;AA/BJ;AAiCD","sourcesContent":["import convolution from '../operator/convolution';\n\n/**\n * Direction of a gradient filter\n * @typedef {('x'|'y'|'xy')} GradientDirection\n */\n\n/**\n * @memberof Image\n * @instance\n * @param {object} [options]\n * @param {GradientDirection} [options.direction]\n * @param {Array<Array<number>>} [options.kernelX]\n * @param {Array<Array<number>>} [options.kernelY]\n * @param {string} [options.border='copy']\n * @param {*} [options.channels]\n * @param {number} [options.bitDepth=this.bitDepth] Specify the bitDepth of the resulting image\n * @return {Image}\n */\nexport default function gradientFilter(options = {}) {\n  let {\n    direction = 'xy',\n    border = 'copy',\n    kernelX,\n    kernelY,\n    channels,\n    bitDepth = this.bitDepth,\n  } = options;\n\n  this.checkProcessable('gradientFilter', {\n    bitDepth: [8, 16],\n  });\n\n  switch (direction) {\n    case 'x':\n      if (!kernelX) throw new Error('kernelX option is missing');\n      return convolution.call(this, kernelX, {\n        channels: channels,\n        border: border,\n        bitDepth,\n      });\n    case 'y':\n      if (!kernelY) throw new Error('kernelY option is missing');\n      return convolution.call(this, kernelY, {\n        channels: channels,\n        border: border,\n        bitDepth,\n      });\n    case 'xy': {\n      if (!kernelX) throw new Error('kernelX option is missing');\n      if (!kernelY) throw new Error('kernelY option is missing');\n      const gX = convolution.call(this, kernelX, {\n        channels: channels,\n        border: border,\n        bitDepth: 32,\n      });\n      const gY = convolution.call(this, kernelY, {\n        channels: channels,\n        border: border,\n        bitDepth: 32,\n      });\n      return gX.hypotenuse(gY, { bitDepth, channels: channels });\n    }\n    default:\n      throw new Error(`Unknown parameter direction: ${direction}`);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}