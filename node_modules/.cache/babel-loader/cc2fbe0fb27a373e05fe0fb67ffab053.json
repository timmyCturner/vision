{"ast":null,"code":"//var yvalues;\n//var size_index = 0;\nexport let hoveredSunData = {\n  mouseOver: false,\n  value: null\n};\nvar currentY_value = 0;\nlet hoveredSun = null;\nlet sunObject = null;\n\nclass Sun {\n  /**\r\n   * Constructor for bubbles\r\n   *\r\n   * @param {*} p p5 ptr\r\n   */\n  constructor(p) {\n    // class for bubble objects\n    this.x = p.width / 2;\n    this.y = p.height / 2;\n    this.size = currentY_value * 100;\n    /**\r\n     * Display bubble on sketch\r\n     */\n\n    this.display = function (p, currentDate, temperatureData) {\n      //console.log(currentY_value);\n      var color = changeSunColor(p, currentDate, {\n        r: 232,\n        g: 152,\n        b: 98\n      }, {\n        r: 200,\n        g: 100,\n        b: 90\n      }, temperatureData);\n      p.fill(color);\n      p.ellipse(this.x, this.y, //yvalues[size_index] * 50,\n      //yvalues[size_index] * 50\n      currentY_value * 100);\n\n      if (hoveredSunData.mouseOver) {\n        p.fill(225, 225, 0, 70);\n        p.ellipse(this.x, this.y, currentY_value * 100);\n      }\n    };\n    /**\r\n     * Behavior for bubble movement\r\n     */\n\n\n    this.move = function () {\n      // check if mouse is pressed and within range of bubble\n      //console.log(this.x);\n      if (p.mouseIsPressed && p.dist(p.mouseX, p.mouseY, this.x, this.y) < this.size) {\n        //get the sun above the ocean\n        if (p.mouseY < p.height / 2) {\n          hoveredSunData.mouseOver = true;\n          hoveredSun = this;\n        }\n      }\n    };\n  }\n\n}\n\nexport function setUpSun(p, temperatureData, current_date) {\n  calcSun(temperatureData, current_date);\n  sunObject = new Sun(p);\n}\nexport function drawSun(p, temperatureData, current_date) {\n  calcSun(temperatureData, current_date); //changeY(current_date);\n  //console.log(temperatureData);\n\n  createSun(p, temperatureData, currentDate);\n}\n\nfunction calcSun(temperatureData, current_date) {\n  if (temperatureData != null) {\n    //get current date based on scroller\n    //get year\n    var currentDate = current_date.getFullYear();\n    /*if (currentDate === 2020) {\r\n        currentDate = 2015;\r\n    }*/\n\n    var index = (currentDate - 1880) * temperatureData.length / 140 - 100;\n    var i = Math.round(index);\n    var average = 0;\n\n    for (var count = 0; count < 100; count++) {\n      average = average + parseFloat(temperatureData[i + count].station);\n    } //console.log(i);\n    // console.log(average);\n\n\n    currentY_value = average / 50 + 2;\n    hoveredSunData.value = currentY_value.toFixed(2) - 2; //yvalues[i] = average + 1;\n\n    /*for (let i = 0; i < temperatureData.length / 8; i++) {\r\n        var average = parseFloat(temperatureData[i * 8].station); // + parseFloat(temperatureData[i * 8].land)) / 2);\r\n        yvalues[i] = average + 1;\r\n    }*/\n  }\n}\n/*function changeY ()  {\r\n    if (size_index === yvalues.length) size_index = 0;\r\n\r\n    size_index += 1;\r\n};*/\n\n\nfunction createSun(p, temperatureData, currentDate) {\n  if (temperatureData != null) {\n    if (!hoveredSunData.mouseOver) {\n      sunObject.move();\n    } else if (p.mouseY > p.height / 2) {\n      hoveredSunData.mouseOver = false;\n    } else if (p.dist(p.mouseX, p.mouseY, hoveredSun.x, hoveredSun.y) > hoveredSun.size) {\n      hoveredSunData.mouseOver = false;\n    }\n\n    sunObject.display(p, currentDate, temperatureData);\n  }\n}\n\nfunction changeSunColor(p, currentDate, startColor, endColor, temperatureData) {\n  var currentYear = currentDate.getFullYear();\n  var index = (currentYear - 1880) * temperatureData.length / 140 - 100;\n  var i = Math.round(index);\n  var average = 0;\n\n  for (var count = 0; count < 100; count++) {\n    average = average + parseFloat(temperatureData[i + count].station);\n  } //console.log(i);\n  //smallest is 0 largest is 115\n\n\n  average = average + 3;\n  var rGap = (startColor.r - endColor.r) / 115;\n  var gGap = (startColor.g - endColor.g) / 115;\n  var bGap = (startColor.b - endColor.b) / 115; // code body moved outside (above) statement block\n\n  var rIndex = startColor.r - (rGap * average | 0);\n  var gIndex = startColor.g - (gGap * average | 0);\n  var bIndex = startColor.b - (bGap * average | 0);\n  return {\n    r: rIndex,\n    g: gIndex,\n    b: bIndex\n  };\n  return endColor;\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/src/sketches/sun.js"],"names":["hoveredSunData","mouseOver","value","currentY_value","hoveredSun","sunObject","Sun","constructor","p","x","width","y","height","size","display","currentDate","temperatureData","color","changeSunColor","r","g","b","fill","ellipse","move","mouseIsPressed","dist","mouseX","mouseY","setUpSun","current_date","calcSun","drawSun","createSun","getFullYear","index","length","i","Math","round","average","count","parseFloat","station","toFixed","startColor","endColor","currentYear","rGap","gGap","bGap","rIndex","gIndex","bIndex"],"mappings":"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","sourcesContent":["//var yvalues;\r\n//var size_index = 0;\r\nexport let hoveredSunData = { mouseOver: false, value: null };\r\nvar currentY_value = 0;\r\nlet hoveredSun = null;\r\nlet sunObject = null;\r\n\r\nclass Sun {\r\n    /**\r\n     * Constructor for bubbles\r\n     *\r\n     * @param {*} p p5 ptr\r\n     */\r\n    constructor(p) { // class for bubble objects\r\n        this.x = p.width / 2\r\n        this.y = p.height / 2\r\n        this.size = currentY_value * 100\r\n        /**\r\n         * Display bubble on sketch\r\n         */\r\n        this.display = function (p,currentDate,temperatureData) {\r\n          //console.log(currentY_value);\r\n          var color = changeSunColor(p,currentDate,{r:232, g:152, b:98},{r:200, g:100, b:90},temperatureData)\r\n          p.fill(color);\r\n\r\n          p.ellipse(\r\n              this.x,\r\n              this.y,\r\n              //yvalues[size_index] * 50,\r\n              //yvalues[size_index] * 50\r\n\r\n              currentY_value * 100\r\n          );\r\n            if (hoveredSunData.mouseOver) {\r\n                p.fill(225, 225, 0, 70)\r\n                p.ellipse(this.x, this.y, currentY_value*100);\r\n            }\r\n\r\n        };\r\n\r\n        /**\r\n         * Behavior for bubble movement\r\n         */\r\n        this.move = function () {\r\n            // check if mouse is pressed and within range of bubble\r\n            //console.log(this.x);\r\n            if (p.mouseIsPressed && p.dist(p.mouseX, p.mouseY, this.x, this.y) < this.size ) {\r\n              //get the sun above the ocean\r\n              if (p.mouseY<(p.height/2)){\r\n                hoveredSunData.mouseOver = true;\r\n                hoveredSun = this;\r\n              }\r\n\r\n            }\r\n        };\r\n    }\r\n}\r\n\r\nexport function setUpSun(p, temperatureData, current_date) {\r\n\r\n  calcSun(temperatureData, current_date);\r\n  sunObject = new Sun(p)\r\n}\r\n\r\nexport function drawSun(p, temperatureData, current_date) {\r\n    calcSun(temperatureData, current_date);\r\n    //changeY(current_date);\r\n    //console.log(temperatureData);\r\n    createSun(p, temperatureData, currentDate);\r\n}\r\n\r\nfunction calcSun(temperatureData, current_date) {\r\n    if (temperatureData != null) {\r\n        //get current date based on scroller\r\n        //get year\r\n        var currentDate = current_date.getFullYear();\r\n        /*if (currentDate === 2020) {\r\n            currentDate = 2015;\r\n        }*/\r\n        var index = ((currentDate - 1880) * temperatureData.length) / 140 - 100;\r\n\r\n        var i = Math.round(index);\r\n        var average = 0;\r\n        for (var count = 0; count < 100; count++) {\r\n            average = average + parseFloat(temperatureData[i + count].station);\r\n        }\r\n        //console.log(i);\r\n        // console.log(average);\r\n        currentY_value = average / 50 + 2;\r\n        hoveredSunData.value = currentY_value.toFixed(2) - 2;\r\n        //yvalues[i] = average + 1;\r\n        /*for (let i = 0; i < temperatureData.length / 8; i++) {\r\n            var average = parseFloat(temperatureData[i * 8].station); // + parseFloat(temperatureData[i * 8].land)) / 2);\r\n            yvalues[i] = average + 1;\r\n        }*/\r\n    }\r\n}\r\n\r\n/*function changeY ()  {\r\n    if (size_index === yvalues.length) size_index = 0;\r\n\r\n    size_index += 1;\r\n};*/\r\n\r\nfunction createSun(p, temperatureData,currentDate) {\r\n    if (temperatureData != null) {\r\n\r\n      if (!hoveredSunData.mouseOver) {\r\n          sunObject.move();\r\n      }\r\n      else if (p.mouseY>(p.height/2)){\r\n        hoveredSunData.mouseOver = false;\r\n\r\n      }\r\n      else if (p.dist(p.mouseX, p.mouseY, hoveredSun.x, hoveredSun.y) > hoveredSun.size) {\r\n          hoveredSunData.mouseOver = false;\r\n      }\r\n        sunObject.display(p,currentDate,temperatureData);\r\n\r\n    }\r\n}\r\n\r\nfunction changeSunColor(p, currentDate ,startColor, endColor, temperatureData ) {\r\n\r\n    var currentYear = currentDate.getFullYear();\r\n\r\n    var index = ((currentYear - 1880) * temperatureData.length) / 140 - 100;\r\n\r\n    var i = Math.round(index);\r\n    var average = 0;\r\n    for (var count = 0; count < 100; count++) {\r\n        average = average + parseFloat(temperatureData[i + count].station);\r\n    }\r\n    //console.log(i);\r\n    //smallest is 0 largest is 115\r\n    average = average + 3\r\n\r\n    var rGap = (startColor.r-endColor.r)/ 115;\r\n    var gGap = (startColor.g-endColor.g)/ 115;\r\n    var bGap = (startColor.b-endColor.b)/ 115;\r\n\r\n     // code body moved outside (above) statement block\r\n     var rIndex = startColor.r - ((rGap * average) | 0);\r\n     var gIndex = startColor.g - ((gGap * average) | 0);\r\n     var bIndex = startColor.b - ((bGap * average) | 0);\r\n\r\n     return {r:rIndex, g:gIndex, b:bIndex}\r\n\r\n\r\n    return endColor\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}