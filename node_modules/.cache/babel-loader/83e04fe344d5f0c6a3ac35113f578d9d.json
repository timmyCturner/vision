{"ast":null,"code":"// http://homepages.inf.ed.ac.uk/rbf/HIPR2/log.htm\nexport function laplacianOfGaussian(sigma, nPoints, factor) {\n  let kernel = new Array(nPoints);\n  let i, j, x2, y2;\n\n  if (!factor) {\n    factor = 100;\n  }\n\n  factor *= -1; // -480/(Math.PI*Math.pow(sigma,4));\n\n  let center = (nPoints - 1) / 2;\n  let sigma2 = 2 * sigma * sigma;\n\n  for (i = 0; i < nPoints; i++) {\n    kernel[i] = new Array(nPoints);\n    y2 = (i - center) * (i - center);\n\n    for (j = 0; j < nPoints; j++) {\n      x2 = (j - center) * (j - center);\n      kernel[i][j] = Math.round(factor * (1 - (x2 + y2) / sigma2) * Math.exp(-(x2 + y2) / sigma2));\n    }\n  }\n\n  return kernel;\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/node_modules/image-js/src/kernel/laplacianOfGaussian.js"],"names":["laplacianOfGaussian","sigma","nPoints","factor","kernel","Array","i","j","x2","y2","center","sigma2","Math","round","exp"],"mappings":"AAAA;AAEA,OAAO,SAASA,mBAAT,CAA6BC,KAA7B,EAAoCC,OAApC,EAA6CC,MAA7C,EAAqD;AAC1D,MAAIC,MAAM,GAAG,IAAIC,KAAJ,CAAUH,OAAV,CAAb;AACA,MAAII,CAAJ,EAAOC,CAAP,EAAUC,EAAV,EAAcC,EAAd;;AACA,MAAI,CAACN,MAAL,EAAa;AACXA,IAAAA,MAAM,GAAG,GAAT;AACD;;AACDA,EAAAA,MAAM,IAAI,CAAC,CAAX,CAN0D,CAM5C;;AACd,MAAIO,MAAM,GAAG,CAACR,OAAO,GAAG,CAAX,IAAgB,CAA7B;AACA,MAAIS,MAAM,GAAG,IAAIV,KAAJ,GAAYA,KAAzB;;AACA,OAAKK,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGJ,OAAhB,EAAyBI,CAAC,EAA1B,EAA8B;AAC5BF,IAAAA,MAAM,CAACE,CAAD,CAAN,GAAY,IAAID,KAAJ,CAAUH,OAAV,CAAZ;AACAO,IAAAA,EAAE,GAAG,CAACH,CAAC,GAAGI,MAAL,KAAgBJ,CAAC,GAAGI,MAApB,CAAL;;AACA,SAAKH,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGL,OAAhB,EAAyBK,CAAC,EAA1B,EAA8B;AAC5BC,MAAAA,EAAE,GAAG,CAACD,CAAC,GAAGG,MAAL,KAAgBH,CAAC,GAAGG,MAApB,CAAL;AACAN,MAAAA,MAAM,CAACE,CAAD,CAAN,CAAUC,CAAV,IAAeK,IAAI,CAACC,KAAL,CACbV,MAAM,IAAI,IAAI,CAACK,EAAE,GAAGC,EAAN,IAAYE,MAApB,CAAN,GAAoCC,IAAI,CAACE,GAAL,CAAS,EAAEN,EAAE,GAAGC,EAAP,IAAaE,MAAtB,CADvB,CAAf;AAGD;AACF;;AAED,SAAOP,MAAP;AACD","sourcesContent":["// http://homepages.inf.ed.ac.uk/rbf/HIPR2/log.htm\n\nexport function laplacianOfGaussian(sigma, nPoints, factor) {\n  let kernel = new Array(nPoints);\n  let i, j, x2, y2;\n  if (!factor) {\n    factor = 100;\n  }\n  factor *= -1; // -480/(Math.PI*Math.pow(sigma,4));\n  let center = (nPoints - 1) / 2;\n  let sigma2 = 2 * sigma * sigma;\n  for (i = 0; i < nPoints; i++) {\n    kernel[i] = new Array(nPoints);\n    y2 = (i - center) * (i - center);\n    for (j = 0; j < nPoints; j++) {\n      x2 = (j - center) * (j - center);\n      kernel[i][j] = Math.round(\n        factor * (1 - (x2 + y2) / sigma2) * Math.exp(-(x2 + y2) / sigma2),\n      );\n    }\n  }\n\n  return kernel;\n}\n"]},"metadata":{},"sourceType":"module"}