{"ast":null,"code":"import getImageParameters from '../internal/getImageParameters';\nimport { getOutputImageOrInPlace } from '../internal/getOutputImage';\n/**\n * Inserts an image within another image.\n * @memberof Image\n * @instance\n * @param {Image} toInsert The image to insert. Out of boundary pixel will be ignored.\n * @param {object} [options]\n * @param {number} [options.x=0] x offset\n * @param {number} [options.y=0] y offset\n * @param {boolean} [options.inPlace=false] - If true modifies the image. If false the insertion is performed on a copy of the image.\n * @return {Image} The modified image or the new image.\n */\n\nexport default function insert(toInsert, options = {}) {\n  const parameters = getImageParameters(toInsert);\n  this.checkProcessable('insert', parameters);\n  let {\n    x = 0,\n    y = 0\n  } = options;\n  const out = getOutputImageOrInPlace(this, options, {\n    copy: true\n  });\n  const maxY = Math.min(out.height, y + toInsert.height);\n  const maxX = Math.min(out.width, x + toInsert.width);\n\n  if (out.bitDepth === 1) {\n    for (let j = y; j < maxY; j++) {\n      for (let i = x; i < maxX; i++) {\n        const val = toInsert.getBitXY(i - x, j - y);\n        if (val) out.setBitXY(i, j);else out.clearBitXY(i, j);\n      }\n    }\n  } else {\n    for (let j = y; j < maxY; j++) {\n      for (let i = x; i < maxX; i++) {\n        out.setPixelXY(i, j, toInsert.getPixelXY(i - x, j - y));\n      }\n    }\n  }\n\n  return out;\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/node_modules/image-js/src/image/transform/insert.js"],"names":["getImageParameters","getOutputImageOrInPlace","insert","toInsert","options","parameters","checkProcessable","x","y","out","copy","maxY","Math","min","height","maxX","width","bitDepth","j","i","val","getBitXY","setBitXY","clearBitXY","setPixelXY","getPixelXY"],"mappings":"AAAA,OAAOA,kBAAP,MAA+B,gCAA/B;AACA,SAASC,uBAAT,QAAwC,4BAAxC;AAEA;;;;;;;;;;;;AAWA,eAAe,SAASC,MAAT,CAAgBC,QAAhB,EAA0BC,OAAO,GAAG,EAApC,EAAwC;AACrD,QAAMC,UAAU,GAAGL,kBAAkB,CAACG,QAAD,CAArC;AACA,OAAKG,gBAAL,CAAsB,QAAtB,EAAgCD,UAAhC;AACA,MAAI;AAAEE,IAAAA,CAAC,GAAG,CAAN;AAASC,IAAAA,CAAC,GAAG;AAAb,MAAmBJ,OAAvB;AAEA,QAAMK,GAAG,GAAGR,uBAAuB,CAAC,IAAD,EAAOG,OAAP,EAAgB;AAAEM,IAAAA,IAAI,EAAE;AAAR,GAAhB,CAAnC;AACA,QAAMC,IAAI,GAAGC,IAAI,CAACC,GAAL,CAASJ,GAAG,CAACK,MAAb,EAAqBN,CAAC,GAAGL,QAAQ,CAACW,MAAlC,CAAb;AACA,QAAMC,IAAI,GAAGH,IAAI,CAACC,GAAL,CAASJ,GAAG,CAACO,KAAb,EAAoBT,CAAC,GAAGJ,QAAQ,CAACa,KAAjC,CAAb;;AACA,MAAIP,GAAG,CAACQ,QAAJ,KAAiB,CAArB,EAAwB;AACtB,SAAK,IAAIC,CAAC,GAAGV,CAAb,EAAgBU,CAAC,GAAGP,IAApB,EAA0BO,CAAC,EAA3B,EAA+B;AAC7B,WAAK,IAAIC,CAAC,GAAGZ,CAAb,EAAgBY,CAAC,GAAGJ,IAApB,EAA0BI,CAAC,EAA3B,EAA+B;AAC7B,cAAMC,GAAG,GAAGjB,QAAQ,CAACkB,QAAT,CAAkBF,CAAC,GAAGZ,CAAtB,EAAyBW,CAAC,GAAGV,CAA7B,CAAZ;AACA,YAAIY,GAAJ,EAASX,GAAG,CAACa,QAAJ,CAAaH,CAAb,EAAgBD,CAAhB,EAAT,KACKT,GAAG,CAACc,UAAJ,CAAeJ,CAAf,EAAkBD,CAAlB;AACN;AACF;AACF,GARD,MAQO;AACL,SAAK,IAAIA,CAAC,GAAGV,CAAb,EAAgBU,CAAC,GAAGP,IAApB,EAA0BO,CAAC,EAA3B,EAA+B;AAC7B,WAAK,IAAIC,CAAC,GAAGZ,CAAb,EAAgBY,CAAC,GAAGJ,IAApB,EAA0BI,CAAC,EAA3B,EAA+B;AAC7BV,QAAAA,GAAG,CAACe,UAAJ,CAAeL,CAAf,EAAkBD,CAAlB,EAAqBf,QAAQ,CAACsB,UAAT,CAAoBN,CAAC,GAAGZ,CAAxB,EAA2BW,CAAC,GAAGV,CAA/B,CAArB;AACD;AACF;AACF;;AAED,SAAOC,GAAP;AACD","sourcesContent":["import getImageParameters from '../internal/getImageParameters';\nimport { getOutputImageOrInPlace } from '../internal/getOutputImage';\n\n/**\n * Inserts an image within another image.\n * @memberof Image\n * @instance\n * @param {Image} toInsert The image to insert. Out of boundary pixel will be ignored.\n * @param {object} [options]\n * @param {number} [options.x=0] x offset\n * @param {number} [options.y=0] y offset\n * @param {boolean} [options.inPlace=false] - If true modifies the image. If false the insertion is performed on a copy of the image.\n * @return {Image} The modified image or the new image.\n */\nexport default function insert(toInsert, options = {}) {\n  const parameters = getImageParameters(toInsert);\n  this.checkProcessable('insert', parameters);\n  let { x = 0, y = 0 } = options;\n\n  const out = getOutputImageOrInPlace(this, options, { copy: true });\n  const maxY = Math.min(out.height, y + toInsert.height);\n  const maxX = Math.min(out.width, x + toInsert.width);\n  if (out.bitDepth === 1) {\n    for (let j = y; j < maxY; j++) {\n      for (let i = x; i < maxX; i++) {\n        const val = toInsert.getBitXY(i - x, j - y);\n        if (val) out.setBitXY(i, j);\n        else out.clearBitXY(i, j);\n      }\n    }\n  } else {\n    for (let j = y; j < maxY; j++) {\n      for (let i = x; i < maxX; i++) {\n        out.setPixelXY(i, j, toInsert.getPixelXY(i - x, j - y));\n      }\n    }\n  }\n\n  return out;\n}\n"]},"metadata":{},"sourceType":"module"}