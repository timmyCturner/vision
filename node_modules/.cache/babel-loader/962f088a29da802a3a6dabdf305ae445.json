{"ast":null,"code":"export default function microPlastic(p) {\n  let canvas; //these are gonna be the variables for our garbage collection\n\n  var drops = [];\n  let y_particle_index = 0;\n  let x_particle_index = 0; //these are all variables for our wave function\n\n  let xspacing = 16; // Distance between each horizontal location\n\n  let w; // Width of entire wave\n\n  let theta = 0.15; // Start angle at 0\n\n  let amplitude = 25.0; // Height of wave\n\n  let period = 200.0; // How many pixels before the wave repeats\n\n  let dx = 2; // Value for incrementing x\n\n  let yvalues; // Using an array to store height values for the wave\n\n  let backvalues;\n  let back = 2; // back offset\n\n  var drop = [];\n\n  p.setup = () => {\n    canvas = p.createCanvas(600, 300); //set up wave\n\n    w = p.width + 16;\n    dx = 2 * Math.PI / period * xspacing;\n    yvalues = new Array(p.floor(w / xspacing));\n    backvalues = new Array(p.floor(w / xspacing)); //\n    //set up plastic\n    //\n\n    for (var i = 0; i < 200; i++) {\n      drops[i] = new p.drop();\n      /*\r\n      Promise.all([\r\n      new Promise((resolve) => {song = loadSound(\"tears mstr 2.mp3\", resolve)})\r\n      ]).then(() => {\r\n      song.amp(1);\r\n      song.play();\r\n      });;\r\n      */\n      //load plastic images into Array\n    }\n  };\n\n  p.draw = () => {\n    p.background('blue'); //do wave\n\n    p.calcWave();\n    p.renderWave();\n    p.backWave(); //calc microplastic\n    //\n\n    p.background(230, 230, 250);\n\n    for (var i = 0; i < drops.length; i++) {\n      drops[i].fall();\n      drops[i].show();\n    }\n  };\n\n  p.drop = () => {\n    this.x = 0 + x_particle_index;\n    this.y = 0 + y_particle_index;\n\n    this.show = function () {\n      p.noStroke();\n      p.fill(255);\n      p.ellipse(this.x, this.y, 2, 3);\n    };\n\n    this.update = function () {\n      this.speed = 5;\n      this.gravity = 1.05;\n      this.y = this.y + this.speed * this.gravity;\n\n      if (this.y > p.height) {\n        this.y = 0 + y_particle_index;\n        y_particle_index += 1;\n        this.gravity = 0;\n      }\n    };\n  }; //\n  //\n  //\n  //hear lies al information on how to create a wave\n  //\n  //\n  //\n\n\n  p.calcWave = () => {\n    // Increment theta (try different values for\n    // 'angular velocity' here)\n    theta += 0.02; // For every x value, calculate a y value with sine function\n\n    let x = theta;\n\n    for (let i = 0; i < yvalues.length; i++) {\n      yvalues[i] = Math.sin(x) * amplitude;\n      backvalues[i] = Math.sin(x + back) * amplitude;\n      x += dx;\n    }\n  };\n\n  p.renderWave = () => {\n    p.noStroke();\n    p.fill(37, 207, 122); // A simple way to draw the wave with an ellipse at each location\n\n    for (let x = 0; x < yvalues.length; x++) {\n      var waveHeight = 4 * p.height / 8 + yvalues[x];\n      p.ellipse(x * xspacing, p.height, 64, waveHeight);\n    }\n  };\n\n  p.backWave = () => {\n    p.noStroke();\n    p.fill(19, 149, 244); // A simple way to draw the wave with an ellipse at each location\n\n    for (let x = 0; x < backvalues.length; x++) {\n      var waveHeight = 4 * p.height / 8 + backvalues[x];\n      p.ellipse(x * xspacing, p.height, 64, waveHeight);\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/src/sketches/microPlastic.js"],"names":["microPlastic","p","canvas","drops","y_particle_index","x_particle_index","xspacing","w","theta","amplitude","period","dx","yvalues","backvalues","back","drop","setup","createCanvas","width","Math","PI","Array","floor","i","draw","background","calcWave","renderWave","backWave","length","fall","show","x","y","noStroke","fill","ellipse","update","speed","gravity","height","sin","waveHeight"],"mappings":"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","sourcesContent":["\r\n\r\nexport default function microPlastic(p) {\r\n\r\n  let canvas;\r\n\r\n  //these are gonna be the variables for our garbage collection\r\n  var drops = [];\r\n  let y_particle_index=0\r\n  let x_particle_index=0\r\n  //these are all variables for our wave function\r\n  let xspacing = 16; // Distance between each horizontal location\r\n  let w; // Width of entire wave\r\n  let theta = 0.15; // Start angle at 0\r\n  let amplitude = 25.0; // Height of wave\r\n  let period = 200.0; // How many pixels before the wave repeats\r\n  let dx=2; // Value for incrementing x\r\n  let yvalues; // Using an array to store height values for the wave\r\n  let backvalues;\r\n  let back = 2 // back offset\r\n\r\n  var drop = []\r\n\r\n\r\n\r\n\r\n\r\n\r\n  p.setup = () => {\r\n    canvas = p.createCanvas(600, 300);\r\n    //set up wave\r\n    w = p.width + 16;\r\n    dx = (2*Math.PI / period) * xspacing;\r\n    yvalues = new Array(p.floor(w / xspacing));\r\n    backvalues = new Array(p.floor(w / xspacing));\r\n    //\r\n    //set up plastic\r\n    //\r\n\r\n\r\n    for (var i = 0; i < 200; i++) {\r\n      drops[i] = new p.drop()\r\n      /*\r\n    Promise.all([\r\n      new Promise((resolve) => {song = loadSound(\"tears mstr 2.mp3\", resolve)})\r\n    ]).then(() => {\r\n      song.amp(1);\r\n    \tsong.play();\r\n    });;\r\n    */\r\n\r\n    //load plastic images into Array\r\n\r\n    }\r\n  }\r\n  p.draw = () => {\r\n    p.background('blue');\r\n\r\n    //do wave\r\n    p.calcWave();\r\n    p.renderWave();\r\n    p.backWave();\r\n    //calc microplastic\r\n    //\r\n    p.background(230, 230, 250);\r\n    for (var i = 0; i < drops.length; i++) {\r\n      drops[i].fall();\r\n      drops[i].show();\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  p.drop = () =>{\r\n    this.x = 0 + x_particle_index\r\n    this.y = 0 + y_particle_index;\r\n\r\n    this.show = function() {\r\n      p.noStroke();\r\n      p.fill(255);\r\n      p.ellipse(this.x, this.y, 2, 3);\r\n    }\r\n    this.update = function() {\r\n      this.speed = 5;\r\n      this.gravity = 1.05;\r\n      this.y = this.y + this.speed*this.gravity;\r\n\r\n      if (this.y > p.height) {\r\n        this.y = 0 + y_particle_index;\r\n        y_particle_index+=1\r\n        this.gravity = 0;\r\n        }\r\n      }\r\n    }\r\n\r\n\r\n  //\r\n  //\r\n  //\r\n  //hear lies al information on how to create a wave\r\n  //\r\n  //\r\n  //\r\n  p.calcWave= () =>  {\r\n    // Increment theta (try different values for\r\n    // 'angular velocity' here)\r\n    theta += 0.02;\r\n    // For every x value, calculate a y value with sine function\r\n    let x = theta;\r\n    for (let i = 0; i < yvalues.length; i++) {\r\n\r\n      yvalues[i] = Math.sin(x) * amplitude;\r\n      backvalues[i] = Math.sin(x+back) * amplitude;\r\n      x += dx;\r\n    }\r\n  }\r\n  p.renderWave = () => {\r\n    p.noStroke();\r\n    p.fill(37, 207, 122);\r\n    // A simple way to draw the wave with an ellipse at each location\r\n    for (let x = 0; x < yvalues.length; x++) {\r\n      var waveHeight = 4*p.height / 8 + yvalues[x]\r\n      p.ellipse((x) * xspacing, p.height, 64,waveHeight);\r\n\r\n    }\r\n  }\r\n  p.backWave = () => {\r\n    p.noStroke();\r\n    p.fill(19, 149, 244);\r\n    // A simple way to draw the wave with an ellipse at each location\r\n    for (let x = 0; x < backvalues.length; x++) {\r\n      var waveHeight = 4*p.height / 8 + backvalues[x]\r\n      p.ellipse((x) * xspacing, p.height, 64,waveHeight);\r\n\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}