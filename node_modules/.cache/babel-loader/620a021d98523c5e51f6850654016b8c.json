{"ast":null,"code":"import Image from '../Image';\nimport rotateFree from './rotateFree';\n/**\n * Rotates an image.\n * @memberof Image\n * @instance\n * @param {number} angle - Angle of the rotation in degrees\n * @param {object} [options]\n * @param {InterpolationAlgorithm} [options.interpolation='nearestNeighbor'] - Interpolation algorithm to use if `angle` is not a multiple of 90\n * @return {Image} The new rotated image\n */\n\nexport function rotate(angle, options) {\n  if (typeof angle !== 'number') {\n    throw new TypeError('angle must be a number');\n  }\n\n  if (angle < 0) {\n    angle = Math.ceil(-angle / 360) * 360 + angle;\n  }\n\n  switch (angle % 360) {\n    case 0:\n      return this.clone();\n\n    case 90:\n      return rotateRight.call(this);\n\n    case 180:\n      return rotate180.call(this);\n\n    case 270:\n      return rotateLeft.call(this);\n\n    default:\n      return rotateFree.call(this, angle, options);\n  }\n}\n/**\n * Rotates an image counter-clockwise\n * @memberof Image\n * @instance\n * @return {Image} The new rotated image\n */\n\nexport function rotateLeft() {\n  const newImage = Image.createFrom(this, {\n    width: this.height,\n    height: this.width\n  });\n  const newMaxHeight = newImage.height - 1;\n\n  for (let i = 0; i < this.height; i++) {\n    for (let j = 0; j < this.width; j++) {\n      for (let k = 0; k < this.channels; k++) {\n        newImage.setValueXY(i, newMaxHeight - j, k, this.getValueXY(j, i, k));\n      }\n    }\n  }\n\n  return newImage;\n}\n/**\n * Rotates an image clockwise\n * @memberof Image\n * @instance\n * @return {Image} The new rotated image\n */\n\nexport function rotateRight() {\n  const newImage = Image.createFrom(this, {\n    width: this.height,\n    height: this.width\n  });\n  const newMaxWidth = newImage.width - 1;\n\n  for (let i = 0; i < this.height; i++) {\n    for (let j = 0; j < this.width; j++) {\n      for (let k = 0; k < this.channels; k++) {\n        newImage.setValueXY(newMaxWidth - i, j, k, this.getValueXY(j, i, k));\n      }\n    }\n  }\n\n  return newImage;\n}\n\nfunction rotate180() {\n  const newImage = Image.createFrom(this);\n  const newMaxWidth = newImage.width - 1;\n  const newMaxHeight = newImage.height - 1;\n\n  for (let i = 0; i < this.height; i++) {\n    for (let j = 0; j < this.width; j++) {\n      for (let k = 0; k < this.channels; k++) {\n        newImage.setValueXY(newMaxWidth - j, newMaxHeight - i, k, this.getValueXY(j, i, k));\n      }\n    }\n  }\n\n  return newImage;\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/node_modules/image-js/src/image/transform/rotate.js"],"names":["Image","rotateFree","rotate","angle","options","TypeError","Math","ceil","clone","rotateRight","call","rotate180","rotateLeft","newImage","createFrom","width","height","newMaxHeight","i","j","k","channels","setValueXY","getValueXY","newMaxWidth"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,UAAlB;AAEA,OAAOC,UAAP,MAAuB,cAAvB;AAEA;;;;;;;;;;AASA,OAAO,SAASC,MAAT,CAAgBC,KAAhB,EAAuBC,OAAvB,EAAgC;AACrC,MAAI,OAAOD,KAAP,KAAiB,QAArB,EAA+B;AAC7B,UAAM,IAAIE,SAAJ,CAAc,wBAAd,CAAN;AACD;;AAED,MAAIF,KAAK,GAAG,CAAZ,EAAe;AACbA,IAAAA,KAAK,GAAGG,IAAI,CAACC,IAAL,CAAU,CAACJ,KAAD,GAAS,GAAnB,IAA0B,GAA1B,GAAgCA,KAAxC;AACD;;AAED,UAAQA,KAAK,GAAG,GAAhB;AACE,SAAK,CAAL;AACE,aAAO,KAAKK,KAAL,EAAP;;AACF,SAAK,EAAL;AACE,aAAOC,WAAW,CAACC,IAAZ,CAAiB,IAAjB,CAAP;;AACF,SAAK,GAAL;AACE,aAAOC,SAAS,CAACD,IAAV,CAAe,IAAf,CAAP;;AACF,SAAK,GAAL;AACE,aAAOE,UAAU,CAACF,IAAX,CAAgB,IAAhB,CAAP;;AACF;AACE,aAAOT,UAAU,CAACS,IAAX,CAAgB,IAAhB,EAAsBP,KAAtB,EAA6BC,OAA7B,CAAP;AAVJ;AAYD;AAED;;;;;;;AAMA,OAAO,SAASQ,UAAT,GAAsB;AAC3B,QAAMC,QAAQ,GAAGb,KAAK,CAACc,UAAN,CAAiB,IAAjB,EAAuB;AACtCC,IAAAA,KAAK,EAAE,KAAKC,MAD0B;AAEtCA,IAAAA,MAAM,EAAE,KAAKD;AAFyB,GAAvB,CAAjB;AAIA,QAAME,YAAY,GAAGJ,QAAQ,CAACG,MAAT,GAAkB,CAAvC;;AACA,OAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKF,MAAzB,EAAiCE,CAAC,EAAlC,EAAsC;AACpC,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKJ,KAAzB,EAAgCI,CAAC,EAAjC,EAAqC;AACnC,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,QAAzB,EAAmCD,CAAC,EAApC,EAAwC;AACtCP,QAAAA,QAAQ,CAACS,UAAT,CAAoBJ,CAApB,EAAuBD,YAAY,GAAGE,CAAtC,EAAyCC,CAAzC,EAA4C,KAAKG,UAAL,CAAgBJ,CAAhB,EAAmBD,CAAnB,EAAsBE,CAAtB,CAA5C;AACD;AACF;AACF;;AACD,SAAOP,QAAP;AACD;AAED;;;;;;;AAOA,OAAO,SAASJ,WAAT,GAAuB;AAC5B,QAAMI,QAAQ,GAAGb,KAAK,CAACc,UAAN,CAAiB,IAAjB,EAAuB;AACtCC,IAAAA,KAAK,EAAE,KAAKC,MAD0B;AAEtCA,IAAAA,MAAM,EAAE,KAAKD;AAFyB,GAAvB,CAAjB;AAIA,QAAMS,WAAW,GAAGX,QAAQ,CAACE,KAAT,GAAiB,CAArC;;AACA,OAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKF,MAAzB,EAAiCE,CAAC,EAAlC,EAAsC;AACpC,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKJ,KAAzB,EAAgCI,CAAC,EAAjC,EAAqC;AACnC,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,QAAzB,EAAmCD,CAAC,EAApC,EAAwC;AACtCP,QAAAA,QAAQ,CAACS,UAAT,CAAoBE,WAAW,GAAGN,CAAlC,EAAqCC,CAArC,EAAwCC,CAAxC,EAA2C,KAAKG,UAAL,CAAgBJ,CAAhB,EAAmBD,CAAnB,EAAsBE,CAAtB,CAA3C;AACD;AACF;AACF;;AACD,SAAOP,QAAP;AACD;;AAED,SAASF,SAAT,GAAqB;AACnB,QAAME,QAAQ,GAAGb,KAAK,CAACc,UAAN,CAAiB,IAAjB,CAAjB;AACA,QAAMU,WAAW,GAAGX,QAAQ,CAACE,KAAT,GAAiB,CAArC;AACA,QAAME,YAAY,GAAGJ,QAAQ,CAACG,MAAT,GAAkB,CAAvC;;AACA,OAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKF,MAAzB,EAAiCE,CAAC,EAAlC,EAAsC;AACpC,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKJ,KAAzB,EAAgCI,CAAC,EAAjC,EAAqC;AACnC,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,QAAzB,EAAmCD,CAAC,EAApC,EAAwC;AACtCP,QAAAA,QAAQ,CAACS,UAAT,CACEE,WAAW,GAAGL,CADhB,EAEEF,YAAY,GAAGC,CAFjB,EAGEE,CAHF,EAIE,KAAKG,UAAL,CAAgBJ,CAAhB,EAAmBD,CAAnB,EAAsBE,CAAtB,CAJF;AAMD;AACF;AACF;;AACD,SAAOP,QAAP;AACD","sourcesContent":["import Image from '../Image';\n\nimport rotateFree from './rotateFree';\n\n/**\n * Rotates an image.\n * @memberof Image\n * @instance\n * @param {number} angle - Angle of the rotation in degrees\n * @param {object} [options]\n * @param {InterpolationAlgorithm} [options.interpolation='nearestNeighbor'] - Interpolation algorithm to use if `angle` is not a multiple of 90\n * @return {Image} The new rotated image\n */\nexport function rotate(angle, options) {\n  if (typeof angle !== 'number') {\n    throw new TypeError('angle must be a number');\n  }\n\n  if (angle < 0) {\n    angle = Math.ceil(-angle / 360) * 360 + angle;\n  }\n\n  switch (angle % 360) {\n    case 0:\n      return this.clone();\n    case 90:\n      return rotateRight.call(this);\n    case 180:\n      return rotate180.call(this);\n    case 270:\n      return rotateLeft.call(this);\n    default:\n      return rotateFree.call(this, angle, options);\n  }\n}\n\n/**\n * Rotates an image counter-clockwise\n * @memberof Image\n * @instance\n * @return {Image} The new rotated image\n */\nexport function rotateLeft() {\n  const newImage = Image.createFrom(this, {\n    width: this.height,\n    height: this.width,\n  });\n  const newMaxHeight = newImage.height - 1;\n  for (let i = 0; i < this.height; i++) {\n    for (let j = 0; j < this.width; j++) {\n      for (let k = 0; k < this.channels; k++) {\n        newImage.setValueXY(i, newMaxHeight - j, k, this.getValueXY(j, i, k));\n      }\n    }\n  }\n  return newImage;\n}\n\n/**\n * Rotates an image clockwise\n * @memberof Image\n * @instance\n * @return {Image} The new rotated image\n */\n\nexport function rotateRight() {\n  const newImage = Image.createFrom(this, {\n    width: this.height,\n    height: this.width,\n  });\n  const newMaxWidth = newImage.width - 1;\n  for (let i = 0; i < this.height; i++) {\n    for (let j = 0; j < this.width; j++) {\n      for (let k = 0; k < this.channels; k++) {\n        newImage.setValueXY(newMaxWidth - i, j, k, this.getValueXY(j, i, k));\n      }\n    }\n  }\n  return newImage;\n}\n\nfunction rotate180() {\n  const newImage = Image.createFrom(this);\n  const newMaxWidth = newImage.width - 1;\n  const newMaxHeight = newImage.height - 1;\n  for (let i = 0; i < this.height; i++) {\n    for (let j = 0; j < this.width; j++) {\n      for (let k = 0; k < this.channels; k++) {\n        newImage.setValueXY(\n          newMaxWidth - j,\n          newMaxHeight - i,\n          k,\n          this.getValueXY(j, i, k),\n        );\n      }\n    }\n  }\n  return newImage;\n}\n"]},"metadata":{},"sourceType":"module"}