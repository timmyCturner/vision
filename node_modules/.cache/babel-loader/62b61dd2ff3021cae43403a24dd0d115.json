{"ast":null,"code":"export function checkRow(image, row) {\n  if (row < 0 || row >= image.height) {\n    throw new RangeError(`row must be included between 0 and ${image.height - 1}. Current value: ${row}`);\n  }\n}\nexport function checkColumn(image, column) {\n  if (column < 0 || column >= image.width) {\n    throw new RangeError(`column must be included between 0 and ${image.width - 1}. Current value: ${column}`);\n  }\n}\nexport function checkChannel(image, channel) {\n  if (channel < 0 || channel >= image.channels) {\n    throw new RangeError(`channel must be included between 0 and ${image.channels - 1}. Current value: ${channel}`);\n  }\n}\n/**\n * @typedef {('nearestNeighbor'|'bilinear')} InterpolationAlgorithm\n */\n\nexport const validInterpolations = {\n  nearestneighbor: 'nearestNeighbor',\n  nearestneighbour: 'nearestNeighbor',\n  bilinear: 'bilinear'\n};\nexport function checkInterpolation(interpolation) {\n  if (typeof interpolation !== 'string') {\n    throw new TypeError('interpolation must be a string');\n  }\n\n  interpolation = interpolation.toLowerCase();\n\n  if (!validInterpolations[interpolation]) {\n    throw new RangeError(`invalid interpolation algorithm: ${interpolation}`);\n  }\n\n  return validInterpolations[interpolation];\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/node_modules/image-js/src/image/internal/checks.js"],"names":["checkRow","image","row","height","RangeError","checkColumn","column","width","checkChannel","channel","channels","validInterpolations","nearestneighbor","nearestneighbour","bilinear","checkInterpolation","interpolation","TypeError","toLowerCase"],"mappings":"AAAA,OAAO,SAASA,QAAT,CAAkBC,KAAlB,EAAyBC,GAAzB,EAA8B;AACnC,MAAIA,GAAG,GAAG,CAAN,IAAWA,GAAG,IAAID,KAAK,CAACE,MAA5B,EAAoC;AAClC,UAAM,IAAIC,UAAJ,CACH,sCACCH,KAAK,CAACE,MAAN,GAAe,CAChB,oBAAmBD,GAAI,EAHpB,CAAN;AAKD;AACF;AAED,OAAO,SAASG,WAAT,CAAqBJ,KAArB,EAA4BK,MAA5B,EAAoC;AACzC,MAAIA,MAAM,GAAG,CAAT,IAAcA,MAAM,IAAIL,KAAK,CAACM,KAAlC,EAAyC;AACvC,UAAM,IAAIH,UAAJ,CACH,yCACCH,KAAK,CAACM,KAAN,GAAc,CACf,oBAAmBD,MAAO,EAHvB,CAAN;AAKD;AACF;AAED,OAAO,SAASE,YAAT,CAAsBP,KAAtB,EAA6BQ,OAA7B,EAAsC;AAC3C,MAAIA,OAAO,GAAG,CAAV,IAAeA,OAAO,IAAIR,KAAK,CAACS,QAApC,EAA8C;AAC5C,UAAM,IAAIN,UAAJ,CACH,0CACCH,KAAK,CAACS,QAAN,GAAiB,CAClB,oBAAmBD,OAAQ,EAHxB,CAAN;AAKD;AACF;AAED;;;;AAGA,OAAO,MAAME,mBAAmB,GAAG;AACjCC,EAAAA,eAAe,EAAE,iBADgB;AAEjCC,EAAAA,gBAAgB,EAAE,iBAFe;AAGjCC,EAAAA,QAAQ,EAAE;AAHuB,CAA5B;AAMP,OAAO,SAASC,kBAAT,CAA4BC,aAA5B,EAA2C;AAChD,MAAI,OAAOA,aAAP,KAAyB,QAA7B,EAAuC;AACrC,UAAM,IAAIC,SAAJ,CAAc,gCAAd,CAAN;AACD;;AACDD,EAAAA,aAAa,GAAGA,aAAa,CAACE,WAAd,EAAhB;;AACA,MAAI,CAACP,mBAAmB,CAACK,aAAD,CAAxB,EAAyC;AACvC,UAAM,IAAIZ,UAAJ,CAAgB,oCAAmCY,aAAc,EAAjE,CAAN;AACD;;AACD,SAAOL,mBAAmB,CAACK,aAAD,CAA1B;AACD","sourcesContent":["export function checkRow(image, row) {\n  if (row < 0 || row >= image.height) {\n    throw new RangeError(\n      `row must be included between 0 and ${\n        image.height - 1\n      }. Current value: ${row}`,\n    );\n  }\n}\n\nexport function checkColumn(image, column) {\n  if (column < 0 || column >= image.width) {\n    throw new RangeError(\n      `column must be included between 0 and ${\n        image.width - 1\n      }. Current value: ${column}`,\n    );\n  }\n}\n\nexport function checkChannel(image, channel) {\n  if (channel < 0 || channel >= image.channels) {\n    throw new RangeError(\n      `channel must be included between 0 and ${\n        image.channels - 1\n      }. Current value: ${channel}`,\n    );\n  }\n}\n\n/**\n * @typedef {('nearestNeighbor'|'bilinear')} InterpolationAlgorithm\n */\nexport const validInterpolations = {\n  nearestneighbor: 'nearestNeighbor',\n  nearestneighbour: 'nearestNeighbor',\n  bilinear: 'bilinear',\n};\n\nexport function checkInterpolation(interpolation) {\n  if (typeof interpolation !== 'string') {\n    throw new TypeError('interpolation must be a string');\n  }\n  interpolation = interpolation.toLowerCase();\n  if (!validInterpolations[interpolation]) {\n    throw new RangeError(`invalid interpolation algorithm: ${interpolation}`);\n  }\n  return validInterpolations[interpolation];\n}\n"]},"metadata":{},"sourceType":"module"}