{"ast":null,"code":"import BaseRegression, { checkArrayLength, maybeToPrecision } from 'ml-regression-base';\nimport SimpleLinearRegression from 'ml-regression-simple-linear';\nexport default class PowerRegression extends BaseRegression {\n  constructor(x, y) {\n    super();\n\n    if (x === true) {\n      // reloading model\n      this.A = y.A;\n      this.B = y.B;\n    } else {\n      checkArrayLength(x, y);\n      regress(this, x, y);\n    }\n  }\n\n  _predict(newInputs) {\n    return this.A * Math.pow(newInputs, this.B);\n  }\n\n  toJSON() {\n    return {\n      name: 'powerRegression',\n      A: this.A,\n      B: this.B\n    };\n  }\n\n  toString(precision) {\n    return `f(x) = ${maybeToPrecision(this.A, precision)} * x^${maybeToPrecision(this.B, precision)}`;\n  }\n\n  toLaTeX(precision) {\n    let latex = '';\n\n    if (this.B >= 0) {\n      latex = `f(x) = ${maybeToPrecision(this.A, precision)}x^{${maybeToPrecision(this.B, precision)}}`;\n    } else {\n      latex = `f(x) = \\\\frac{${maybeToPrecision(this.A, precision)}}{x^{${maybeToPrecision(-this.B, precision)}}}`;\n    }\n\n    latex = latex.replace(/e([+-]?[0-9]+)/g, 'e^{$1}');\n    return latex;\n  }\n\n  static load(json) {\n    if (json.name !== 'powerRegression') {\n      throw new TypeError('not a power regression model');\n    }\n\n    return new PowerRegression(true, json);\n  }\n\n}\n\nfunction regress(pr, x, y) {\n  const n = x.length;\n  const xl = new Array(n);\n  const yl = new Array(n);\n\n  for (let i = 0; i < n; i++) {\n    xl[i] = Math.log(x[i]);\n    yl[i] = Math.log(y[i]);\n  }\n\n  const linear = new SimpleLinearRegression(xl, yl);\n  pr.A = Math.exp(linear.intercept);\n  pr.B = linear.slope;\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/node_modules/ml-regression-power/src/index.js"],"names":["BaseRegression","checkArrayLength","maybeToPrecision","SimpleLinearRegression","PowerRegression","constructor","x","y","A","B","regress","_predict","newInputs","Math","pow","toJSON","name","toString","precision","toLaTeX","latex","replace","load","json","TypeError","pr","n","length","xl","Array","yl","i","log","linear","exp","intercept","slope"],"mappings":"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","sourcesContent":["import BaseRegression, {\n  checkArrayLength,\n  maybeToPrecision\n} from 'ml-regression-base';\nimport SimpleLinearRegression from 'ml-regression-simple-linear';\n\nexport default class PowerRegression extends BaseRegression {\n  constructor(x, y) {\n    super();\n    if (x === true) {\n      // reloading model\n      this.A = y.A;\n      this.B = y.B;\n    } else {\n      checkArrayLength(x, y);\n      regress(this, x, y);\n    }\n  }\n\n  _predict(newInputs) {\n    return this.A * Math.pow(newInputs, this.B);\n  }\n\n  toJSON() {\n    return {\n      name: 'powerRegression',\n      A: this.A,\n      B: this.B\n    };\n  }\n\n  toString(precision) {\n    return `f(x) = ${maybeToPrecision(\n      this.A,\n      precision\n    )} * x^${maybeToPrecision(this.B, precision)}`;\n  }\n\n  toLaTeX(precision) {\n    let latex = '';\n    if (this.B >= 0) {\n      latex = `f(x) = ${maybeToPrecision(\n        this.A,\n        precision\n      )}x^{${maybeToPrecision(this.B, precision)}}`;\n    } else {\n      latex = `f(x) = \\\\frac{${maybeToPrecision(\n        this.A,\n        precision\n      )}}{x^{${maybeToPrecision(-this.B, precision)}}}`;\n    }\n    latex = latex.replace(/e([+-]?[0-9]+)/g, 'e^{$1}');\n    return latex;\n  }\n\n  static load(json) {\n    if (json.name !== 'powerRegression') {\n      throw new TypeError('not a power regression model');\n    }\n    return new PowerRegression(true, json);\n  }\n}\n\nfunction regress(pr, x, y) {\n  const n = x.length;\n  const xl = new Array(n);\n  const yl = new Array(n);\n  for (let i = 0; i < n; i++) {\n    xl[i] = Math.log(x[i]);\n    yl[i] = Math.log(y[i]);\n  }\n\n  const linear = new SimpleLinearRegression(xl, yl);\n  pr.A = Math.exp(linear.intercept);\n  pr.B = linear.slope;\n}\n"]},"metadata":{},"sourceType":"module"}