{"ast":null,"code":"//var yvalues;\n//var size_index = 0;\nexport let hoveredSunData = {\n  mouseOver: false,\n  value: null\n};\nvar currentY_value = 0;\nlet hoveredSun = null;\nlet sunObject = null;\n\nclass Sun {\n  /**\r\n   * Constructor for bubbles\r\n   *\r\n   * @param {*} p p5 ptr\r\n   */\n  constructor(p) {\n    // class for bubble objects\n    this.x = p.width / 2;\n    this.y = p.height / 2;\n    this.size = currentY_value * 100;\n    /**\r\n     * Display bubble on sketch\r\n     */\n\n    this.display = function () {\n      //console.log(currentY_value);\n      p.fill(232, 152, 98);\n      p.ellipse(this.x, this.y, //yvalues[size_index] * 50,\n      //yvalues[size_index] * 50\n      currentY_value * 100, currentY_value * 100);\n\n      if (hoveredSunData.mouseOver) {\n        p.fill(225, 225, 0, 70);\n        p.ellipse(this.x, this.y, currentY_value * 100);\n      }\n    };\n    /**\r\n     * Behavior for bubble movement\r\n     */\n\n\n    this.move = function () {\n      // check if mouse is pressed and within range of bubble\n      //console.log(this.x);\n      if (p.mouseIsPressed && p.dist(p.mouseX, p.mouseY, this.x, this.y) < this.size) {\n        hoveredSunData.mouseOver = true;\n        hoveredSun = this;\n      }\n    };\n  }\n\n}\n\nexport function setUpSun(p, temperatureData, current_date) {\n  calcSun(temperatureData, current_date);\n  sunObject = new Sun(p);\n}\nexport function drawSun(p, temperatureData, current_date) {\n  calcSun(temperatureData, current_date); //changeY(current_date);\n  //console.log(temperatureData);\n\n  createSun(p, temperatureData);\n}\n\nfunction calcSun(temperatureData, current_date) {\n  if (temperatureData != null) {\n    //get current date based on scroller\n    //get year\n    var currentDate = current_date.getFullYear();\n    /*if (currentDate === 2020) {\r\n        currentDate = 2015;\r\n    }*/\n\n    var index = (currentDate - 1880) * temperatureData.length / 140 - 100;\n    var i = Math.round(index);\n    var average = 0;\n\n    for (var count = 0; count < 100; count++) {\n      average = average + parseFloat(temperatureData[i + count].station);\n    } //console.log(i);\n    // console.log(average);\n\n\n    currentY_value = average / 50 + 2;\n    hoveredSunData.value = currentY_value; //yvalues[i] = average + 1;\n\n    /*for (let i = 0; i < temperatureData.length / 8; i++) {\r\n        var average = parseFloat(temperatureData[i * 8].station); // + parseFloat(temperatureData[i * 8].land)) / 2);\r\n        yvalues[i] = average + 1;\r\n    }*/\n  }\n}\n/*function changeY ()  {\r\n    if (size_index === yvalues.length) size_index = 0;\r\n\r\n    size_index += 1;\r\n};*/\n\n\nfunction createSun(p, temperatureData) {\n  if (temperatureData != null) {\n    if (!hoveredSunData.mouseOver) {\n      sunObject.move();\n    } else if (p.dist(p.mouseX, p.mouseY, hoveredSun.x, hoveredSun.y) > this.size) {\n      hoveredSunData.mouseOver = false;\n    }\n\n    sunObject.display();\n  }\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/src/sketches/sun.js"],"names":["hoveredSunData","mouseOver","value","currentY_value","hoveredSun","sunObject","Sun","constructor","p","x","width","y","height","size","display","fill","ellipse","move","mouseIsPressed","dist","mouseX","mouseY","setUpSun","temperatureData","current_date","calcSun","drawSun","createSun","currentDate","getFullYear","index","length","i","Math","round","average","count","parseFloat","station"],"mappings":"AAAA;AACA;AACA,OAAO,IAAIA,cAAc,GAAG;AAAEC,EAAAA,SAAS,EAAE,KAAb;AAAoBC,EAAAA,KAAK,EAAE;AAA3B,CAArB;AACP,IAAIC,cAAc,GAAG,CAArB;AACA,IAAIC,UAAU,GAAG,IAAjB;AACA,IAAIC,SAAS,GAAG,IAAhB;;AAEA,MAAMC,GAAN,CAAU;AACN;;;;;AAKAC,EAAAA,WAAW,CAACC,CAAD,EAAI;AAAE;AACb,SAAKC,CAAL,GAASD,CAAC,CAACE,KAAF,GAAU,CAAnB;AACA,SAAKC,CAAL,GAASH,CAAC,CAACI,MAAF,GAAW,CAApB;AACA,SAAKC,IAAL,GAAYV,cAAc,GAAG,GAA7B;AACA;;;;AAGA,SAAKW,OAAL,GAAe,YAAY;AACzB;AACAN,MAAAA,CAAC,CAACO,IAAF,CAAO,GAAP,EAAY,GAAZ,EAAiB,EAAjB;AAEAP,MAAAA,CAAC,CAACQ,OAAF,CACI,KAAKP,CADT,EAEI,KAAKE,CAFT,EAGI;AACA;AACAR,MAAAA,cAAc,GAAG,GALrB,EAMIA,cAAc,GAAG,GANrB;;AAQE,UAAIH,cAAc,CAACC,SAAnB,EAA8B;AAC1BO,QAAAA,CAAC,CAACO,IAAF,CAAO,GAAP,EAAY,GAAZ,EAAiB,CAAjB,EAAoB,EAApB;AACAP,QAAAA,CAAC,CAACQ,OAAF,CAAU,KAAKP,CAAf,EAAkB,KAAKE,CAAvB,EAA0BR,cAAc,GAAC,GAAzC;AACH;AAEJ,KAjBD;AAmBA;;;;;AAGA,SAAKc,IAAL,GAAY,YAAY;AACpB;AACA;AACA,UAAIT,CAAC,CAACU,cAAF,IAAoBV,CAAC,CAACW,IAAF,CAAOX,CAAC,CAACY,MAAT,EAAiBZ,CAAC,CAACa,MAAnB,EAA2B,KAAKZ,CAAhC,EAAmC,KAAKE,CAAxC,IAA6C,KAAKE,IAA1E,EAAgF;AAC5Eb,QAAAA,cAAc,CAACC,SAAf,GAA2B,IAA3B;AACAG,QAAAA,UAAU,GAAG,IAAb;AACH;AACJ,KAPD;AAQH;;AA3CK;;AA8CV,OAAO,SAASkB,QAAT,CAAkBd,CAAlB,EAAqBe,eAArB,EAAsCC,YAAtC,EAAoD;AAEzDC,EAAAA,OAAO,CAACF,eAAD,EAAkBC,YAAlB,CAAP;AACAnB,EAAAA,SAAS,GAAG,IAAIC,GAAJ,CAAQE,CAAR,CAAZ;AACD;AAED,OAAO,SAASkB,OAAT,CAAiBlB,CAAjB,EAAoBe,eAApB,EAAqCC,YAArC,EAAmD;AACtDC,EAAAA,OAAO,CAACF,eAAD,EAAkBC,YAAlB,CAAP,CADsD,CAEtD;AACA;;AACAG,EAAAA,SAAS,CAACnB,CAAD,EAAIe,eAAJ,CAAT;AACH;;AAED,SAASE,OAAT,CAAiBF,eAAjB,EAAkCC,YAAlC,EAAgD;AAC5C,MAAID,eAAe,IAAI,IAAvB,EAA6B;AACzB;AACA;AACA,QAAIK,WAAW,GAAGJ,YAAY,CAACK,WAAb,EAAlB;AACA;;;;AAGA,QAAIC,KAAK,GAAI,CAACF,WAAW,GAAG,IAAf,IAAuBL,eAAe,CAACQ,MAAxC,GAAkD,GAAlD,GAAwD,GAApE;AAEA,QAAIC,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWJ,KAAX,CAAR;AACA,QAAIK,OAAO,GAAG,CAAd;;AACA,SAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG,GAA5B,EAAiCA,KAAK,EAAtC,EAA0C;AACtCD,MAAAA,OAAO,GAAGA,OAAO,GAAGE,UAAU,CAACd,eAAe,CAACS,CAAC,GAAGI,KAAL,CAAf,CAA2BE,OAA5B,CAA9B;AACH,KAbwB,CAczB;AACA;;;AACAnC,IAAAA,cAAc,GAAGgC,OAAO,GAAG,EAAV,GAAe,CAAhC;AACAnC,IAAAA,cAAc,CAACE,KAAf,GAAuBC,cAAvB,CAjByB,CAkBzB;;AACA;;;;AAIH;AACJ;AAED;;;;;;;AAMA,SAASwB,SAAT,CAAmBnB,CAAnB,EAAsBe,eAAtB,EAAuC;AACnC,MAAIA,eAAe,IAAI,IAAvB,EAA6B;AAE3B,QAAI,CAACvB,cAAc,CAACC,SAApB,EAA+B;AAC3BI,MAAAA,SAAS,CAACY,IAAV;AACH,KAFD,MAGK,IAAIT,CAAC,CAACW,IAAF,CAAOX,CAAC,CAACY,MAAT,EAAiBZ,CAAC,CAACa,MAAnB,EAA2BjB,UAAU,CAACK,CAAtC,EAAyCL,UAAU,CAACO,CAApD,IAAyD,KAAKE,IAAlE,EAAwE;AACzEb,MAAAA,cAAc,CAACC,SAAf,GAA2B,KAA3B;AACH;;AACCI,IAAAA,SAAS,CAACS,OAAV;AAEH;AACJ","sourcesContent":["//var yvalues;\r\n//var size_index = 0;\r\nexport let hoveredSunData = { mouseOver: false, value: null };\r\nvar currentY_value = 0;\r\nlet hoveredSun = null;\r\nlet sunObject = null;\r\n\r\nclass Sun {\r\n    /**\r\n     * Constructor for bubbles\r\n     *\r\n     * @param {*} p p5 ptr\r\n     */\r\n    constructor(p) { // class for bubble objects\r\n        this.x = p.width / 2\r\n        this.y = p.height / 2\r\n        this.size = currentY_value * 100\r\n        /**\r\n         * Display bubble on sketch\r\n         */\r\n        this.display = function () {\r\n          //console.log(currentY_value);\r\n          p.fill(232, 152, 98);\r\n\r\n          p.ellipse(\r\n              this.x,\r\n              this.y,\r\n              //yvalues[size_index] * 50,\r\n              //yvalues[size_index] * 50\r\n              currentY_value * 100,\r\n              currentY_value * 100\r\n          );\r\n            if (hoveredSunData.mouseOver) {\r\n                p.fill(225, 225, 0, 70)\r\n                p.ellipse(this.x, this.y, currentY_value*100);\r\n            }\r\n\r\n        };\r\n\r\n        /**\r\n         * Behavior for bubble movement\r\n         */\r\n        this.move = function () {\r\n            // check if mouse is pressed and within range of bubble\r\n            //console.log(this.x);\r\n            if (p.mouseIsPressed && p.dist(p.mouseX, p.mouseY, this.x, this.y) < this.size) {\r\n                hoveredSunData.mouseOver = true;\r\n                hoveredSun = this;\r\n            }\r\n        };\r\n    }\r\n}\r\n\r\nexport function setUpSun(p, temperatureData, current_date) {\r\n\r\n  calcSun(temperatureData, current_date);\r\n  sunObject = new Sun(p)\r\n}\r\n\r\nexport function drawSun(p, temperatureData, current_date) {\r\n    calcSun(temperatureData, current_date);\r\n    //changeY(current_date);\r\n    //console.log(temperatureData);\r\n    createSun(p, temperatureData);\r\n}\r\n\r\nfunction calcSun(temperatureData, current_date) {\r\n    if (temperatureData != null) {\r\n        //get current date based on scroller\r\n        //get year\r\n        var currentDate = current_date.getFullYear();\r\n        /*if (currentDate === 2020) {\r\n            currentDate = 2015;\r\n        }*/\r\n        var index = ((currentDate - 1880) * temperatureData.length) / 140 - 100;\r\n\r\n        var i = Math.round(index);\r\n        var average = 0;\r\n        for (var count = 0; count < 100; count++) {\r\n            average = average + parseFloat(temperatureData[i + count].station);\r\n        }\r\n        //console.log(i);\r\n        // console.log(average);\r\n        currentY_value = average / 50 + 2;\r\n        hoveredSunData.value = currentY_value;\r\n        //yvalues[i] = average + 1;\r\n        /*for (let i = 0; i < temperatureData.length / 8; i++) {\r\n            var average = parseFloat(temperatureData[i * 8].station); // + parseFloat(temperatureData[i * 8].land)) / 2);\r\n            yvalues[i] = average + 1;\r\n        }*/\r\n    }\r\n}\r\n\r\n/*function changeY ()  {\r\n    if (size_index === yvalues.length) size_index = 0;\r\n\r\n    size_index += 1;\r\n};*/\r\n\r\nfunction createSun(p, temperatureData) {\r\n    if (temperatureData != null) {\r\n\r\n      if (!hoveredSunData.mouseOver) {\r\n          sunObject.move();\r\n      }\r\n      else if (p.dist(p.mouseX, p.mouseY, hoveredSun.x, hoveredSun.y) > this.size) {\r\n          hoveredSunData.mouseOver = false;\r\n      }\r\n        sunObject.display();\r\n\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}