{"ast":null,"code":"/**\n * This method checks if a process can be applied on the current image\n * @memberof Image\n * @instance\n * @param {string} processName\n * @param {object} [options]\n */\nexport default function checkProcessable(processName, options = {}) {\n  let {\n    bitDepth,\n    alpha,\n    colorModel,\n    components,\n    channels\n  } = options;\n\n  if (typeof processName !== 'string' || processName.length === 0) {\n    throw new TypeError('processName must be a string');\n  }\n\n  if (bitDepth) {\n    if (!Array.isArray(bitDepth)) {\n      bitDepth = [bitDepth];\n    }\n\n    if (!bitDepth.includes(this.bitDepth)) {\n      throw new TypeError(`The process: ${processName} can only be applied if bit depth is in: ${bitDepth}`);\n    }\n  }\n\n  if (alpha) {\n    if (!Array.isArray(alpha)) {\n      alpha = [alpha];\n    }\n\n    if (!alpha.includes(this.alpha)) {\n      throw new TypeError(`The process: ${processName} can only be applied if alpha is in: ${alpha}`);\n    }\n  }\n\n  if (colorModel) {\n    if (!Array.isArray(colorModel)) {\n      colorModel = [colorModel];\n    }\n\n    if (!colorModel.includes(this.colorModel)) {\n      throw new TypeError(`The process: ${processName} can only be applied if color model is in: ${colorModel}`);\n    }\n  }\n\n  if (components) {\n    if (!Array.isArray(components)) {\n      components = [components];\n    }\n\n    if (!components.includes(this.components)) {\n      let errorMessage = `The process: ${processName} can only be applied if the number of components is in: ${components}`;\n\n      if (components.length === 1 && components[0] === 1) {\n        throw new TypeError(`${errorMessage}.\\rYou should transform your image using \"image.grey()\" before applying the algorithm.`);\n      } else {\n        throw new TypeError(errorMessage);\n      }\n    }\n  }\n\n  if (channels) {\n    if (!Array.isArray(channels)) {\n      channels = [channels];\n    }\n\n    if (!channels.includes(this.channels)) {\n      throw new TypeError(`The process: ${processName} can only be applied if the number of channels is in: ${channels}`);\n    }\n  }\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/node_modules/image-js/src/image/core/checkProcessable.js"],"names":["checkProcessable","processName","options","bitDepth","alpha","colorModel","components","channels","length","TypeError","Array","isArray","includes","errorMessage"],"mappings":"AAAA;;;;;;;AAOA,eAAe,SAASA,gBAAT,CAA0BC,WAA1B,EAAuCC,OAAO,GAAG,EAAjD,EAAqD;AAClE,MAAI;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,KAAZ;AAAmBC,IAAAA,UAAnB;AAA+BC,IAAAA,UAA/B;AAA2CC,IAAAA;AAA3C,MAAwDL,OAA5D;;AACA,MAAI,OAAOD,WAAP,KAAuB,QAAvB,IAAmCA,WAAW,CAACO,MAAZ,KAAuB,CAA9D,EAAiE;AAC/D,UAAM,IAAIC,SAAJ,CAAc,8BAAd,CAAN;AACD;;AACD,MAAIN,QAAJ,EAAc;AACZ,QAAI,CAACO,KAAK,CAACC,OAAN,CAAcR,QAAd,CAAL,EAA8B;AAC5BA,MAAAA,QAAQ,GAAG,CAACA,QAAD,CAAX;AACD;;AACD,QAAI,CAACA,QAAQ,CAACS,QAAT,CAAkB,KAAKT,QAAvB,CAAL,EAAuC;AACrC,YAAM,IAAIM,SAAJ,CACH,gBAAeR,WAAY,4CAA2CE,QAAS,EAD5E,CAAN;AAGD;AACF;;AACD,MAAIC,KAAJ,EAAW;AACT,QAAI,CAACM,KAAK,CAACC,OAAN,CAAcP,KAAd,CAAL,EAA2B;AACzBA,MAAAA,KAAK,GAAG,CAACA,KAAD,CAAR;AACD;;AACD,QAAI,CAACA,KAAK,CAACQ,QAAN,CAAe,KAAKR,KAApB,CAAL,EAAiC;AAC/B,YAAM,IAAIK,SAAJ,CACH,gBAAeR,WAAY,wCAAuCG,KAAM,EADrE,CAAN;AAGD;AACF;;AACD,MAAIC,UAAJ,EAAgB;AACd,QAAI,CAACK,KAAK,CAACC,OAAN,CAAcN,UAAd,CAAL,EAAgC;AAC9BA,MAAAA,UAAU,GAAG,CAACA,UAAD,CAAb;AACD;;AACD,QAAI,CAACA,UAAU,CAACO,QAAX,CAAoB,KAAKP,UAAzB,CAAL,EAA2C;AACzC,YAAM,IAAII,SAAJ,CACH,gBAAeR,WAAY,8CAA6CI,UAAW,EADhF,CAAN;AAGD;AACF;;AACD,MAAIC,UAAJ,EAAgB;AACd,QAAI,CAACI,KAAK,CAACC,OAAN,CAAcL,UAAd,CAAL,EAAgC;AAC9BA,MAAAA,UAAU,GAAG,CAACA,UAAD,CAAb;AACD;;AACD,QAAI,CAACA,UAAU,CAACM,QAAX,CAAoB,KAAKN,UAAzB,CAAL,EAA2C;AACzC,UAAIO,YAAY,GAAI,gBAAeZ,WAAY,2DAA0DK,UAAW,EAApH;;AACA,UAAIA,UAAU,CAACE,MAAX,KAAsB,CAAtB,IAA2BF,UAAU,CAAC,CAAD,CAAV,KAAkB,CAAjD,EAAoD;AAClD,cAAM,IAAIG,SAAJ,CACH,GAAEI,YAAa,wFADZ,CAAN;AAGD,OAJD,MAIO;AACL,cAAM,IAAIJ,SAAJ,CAAcI,YAAd,CAAN;AACD;AACF;AACF;;AACD,MAAIN,QAAJ,EAAc;AACZ,QAAI,CAACG,KAAK,CAACC,OAAN,CAAcJ,QAAd,CAAL,EAA8B;AAC5BA,MAAAA,QAAQ,GAAG,CAACA,QAAD,CAAX;AACD;;AACD,QAAI,CAACA,QAAQ,CAACK,QAAT,CAAkB,KAAKL,QAAvB,CAAL,EAAuC;AACrC,YAAM,IAAIE,SAAJ,CACH,gBAAeR,WAAY,yDAAwDM,QAAS,EADzF,CAAN;AAGD;AACF;AACF","sourcesContent":["/**\n * This method checks if a process can be applied on the current image\n * @memberof Image\n * @instance\n * @param {string} processName\n * @param {object} [options]\n */\nexport default function checkProcessable(processName, options = {}) {\n  let { bitDepth, alpha, colorModel, components, channels } = options;\n  if (typeof processName !== 'string' || processName.length === 0) {\n    throw new TypeError('processName must be a string');\n  }\n  if (bitDepth) {\n    if (!Array.isArray(bitDepth)) {\n      bitDepth = [bitDepth];\n    }\n    if (!bitDepth.includes(this.bitDepth)) {\n      throw new TypeError(\n        `The process: ${processName} can only be applied if bit depth is in: ${bitDepth}`,\n      );\n    }\n  }\n  if (alpha) {\n    if (!Array.isArray(alpha)) {\n      alpha = [alpha];\n    }\n    if (!alpha.includes(this.alpha)) {\n      throw new TypeError(\n        `The process: ${processName} can only be applied if alpha is in: ${alpha}`,\n      );\n    }\n  }\n  if (colorModel) {\n    if (!Array.isArray(colorModel)) {\n      colorModel = [colorModel];\n    }\n    if (!colorModel.includes(this.colorModel)) {\n      throw new TypeError(\n        `The process: ${processName} can only be applied if color model is in: ${colorModel}`,\n      );\n    }\n  }\n  if (components) {\n    if (!Array.isArray(components)) {\n      components = [components];\n    }\n    if (!components.includes(this.components)) {\n      let errorMessage = `The process: ${processName} can only be applied if the number of components is in: ${components}`;\n      if (components.length === 1 && components[0] === 1) {\n        throw new TypeError(\n          `${errorMessage}.\\rYou should transform your image using \"image.grey()\" before applying the algorithm.`,\n        );\n      } else {\n        throw new TypeError(errorMessage);\n      }\n    }\n  }\n  if (channels) {\n    if (!Array.isArray(channels)) {\n      channels = [channels];\n    }\n    if (!channels.includes(this.channels)) {\n      throw new TypeError(\n        `The process: ${processName} can only be applied if the number of channels is in: ${channels}`,\n      );\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}