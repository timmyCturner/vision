{"ast":null,"code":"'use strict';\n\nconst defaultByteLength = 1024 * 8;\nconst charArray = [];\n\nclass IOBuffer {\n  constructor(data, options) {\n    options = options || {};\n\n    if (data === undefined) {\n      data = defaultByteLength;\n    }\n\n    if (typeof data === 'number') {\n      data = new ArrayBuffer(data);\n    }\n\n    let length = data.byteLength;\n    const offset = options.offset ? options.offset >>> 0 : 0;\n\n    if (data.buffer) {\n      length = data.byteLength - offset;\n\n      if (data.byteLength !== data.buffer.byteLength) {\n        // Node.js buffer from pool\n        data = data.buffer.slice(data.byteOffset + offset, data.byteOffset + data.byteLength);\n      } else if (offset) {\n        data = data.buffer.slice(offset);\n      } else {\n        data = data.buffer;\n      }\n    }\n\n    this.buffer = data;\n    this.length = length;\n    this.byteLength = length;\n    this.byteOffset = 0;\n    this.offset = 0;\n    this.littleEndian = true;\n    this._data = new DataView(this.buffer);\n    this._increment = length || defaultByteLength;\n    this._mark = 0;\n  }\n\n  available(byteLength) {\n    if (byteLength === undefined) byteLength = 1;\n    return this.offset + byteLength <= this.length;\n  }\n\n  isLittleEndian() {\n    return this.littleEndian;\n  }\n\n  setLittleEndian() {\n    this.littleEndian = true;\n  }\n\n  isBigEndian() {\n    return !this.littleEndian;\n  }\n\n  setBigEndian() {\n    this.littleEndian = false;\n  }\n\n  skip(n) {\n    if (n === undefined) n = 1;\n    this.offset += n;\n  }\n\n  seek(offset) {\n    this.offset = offset;\n  }\n\n  mark() {\n    this._mark = this.offset;\n  }\n\n  reset() {\n    this.offset = this._mark;\n  }\n\n  rewind() {\n    this.offset = 0;\n  }\n\n  ensureAvailable(byteLength) {\n    if (byteLength === undefined) byteLength = 1;\n\n    if (!this.available(byteLength)) {\n      const newIncrement = this._increment + this._increment;\n      this._increment = newIncrement;\n      const newLength = this.length + newIncrement;\n      const newArray = new Uint8Array(newLength);\n      newArray.set(new Uint8Array(this.buffer));\n      this.buffer = newArray.buffer;\n      this.length = newLength;\n      this._data = new DataView(this.buffer);\n    }\n  }\n\n  readBoolean() {\n    return this.readUint8() !== 0;\n  }\n\n  readInt8() {\n    return this._data.getInt8(this.offset++);\n  }\n\n  readUint8() {\n    return this._data.getUint8(this.offset++);\n  }\n\n  readByte() {\n    return this.readUint8();\n  }\n\n  readBytes(n) {\n    if (n === undefined) n = 1;\n    var bytes = new Uint8Array(n);\n\n    for (var i = 0; i < n; i++) {\n      bytes[i] = this.readByte();\n    }\n\n    return bytes;\n  }\n\n  readInt16() {\n    var value = this._data.getInt16(this.offset, this.littleEndian);\n\n    this.offset += 2;\n    return value;\n  }\n\n  readUint16() {\n    var value = this._data.getUint16(this.offset, this.littleEndian);\n\n    this.offset += 2;\n    return value;\n  }\n\n  readInt32() {\n    var value = this._data.getInt32(this.offset, this.littleEndian);\n\n    this.offset += 4;\n    return value;\n  }\n\n  readUint32() {\n    var value = this._data.getUint32(this.offset, this.littleEndian);\n\n    this.offset += 4;\n    return value;\n  }\n\n  readFloat32() {\n    var value = this._data.getFloat32(this.offset, this.littleEndian);\n\n    this.offset += 4;\n    return value;\n  }\n\n  readFloat64() {\n    var value = this._data.getFloat64(this.offset, this.littleEndian);\n\n    this.offset += 8;\n    return value;\n  }\n\n  readChar() {\n    return String.fromCharCode(this.readInt8());\n  }\n\n  readChars(n) {\n    if (n === undefined) n = 1;\n    charArray.length = n;\n\n    for (var i = 0; i < n; i++) {\n      charArray[i] = this.readChar();\n    }\n\n    return charArray.join('');\n  }\n\n  writeBoolean(bool) {\n    this.writeUint8(bool ? 0xff : 0x00);\n  }\n\n  writeInt8(value) {\n    this.ensureAvailable(1);\n\n    this._data.setInt8(this.offset++, value);\n  }\n\n  writeUint8(value) {\n    this.ensureAvailable(1);\n\n    this._data.setUint8(this.offset++, value);\n  }\n\n  writeByte(value) {\n    this.writeUint8(value);\n  }\n\n  writeBytes(bytes) {\n    this.ensureAvailable(bytes.length);\n\n    for (var i = 0; i < bytes.length; i++) {\n      this._data.setUint8(this.offset++, bytes[i]);\n    }\n  }\n\n  writeInt16(value) {\n    this.ensureAvailable(2);\n\n    this._data.setInt16(this.offset, value, this.littleEndian);\n\n    this.offset += 2;\n  }\n\n  writeUint16(value) {\n    this.ensureAvailable(2);\n\n    this._data.setUint16(this.offset, value, this.littleEndian);\n\n    this.offset += 2;\n  }\n\n  writeInt32(value) {\n    this.ensureAvailable(4);\n\n    this._data.setInt32(this.offset, value, this.littleEndian);\n\n    this.offset += 4;\n  }\n\n  writeUint32(value) {\n    this.ensureAvailable(4);\n\n    this._data.setUint32(this.offset, value, this.littleEndian);\n\n    this.offset += 4;\n  }\n\n  writeFloat32(value) {\n    this.ensureAvailable(4);\n\n    this._data.setFloat32(this.offset, value, this.littleEndian);\n\n    this.offset += 4;\n  }\n\n  writeFloat64(value) {\n    this.ensureAvailable(8);\n\n    this._data.setFloat64(this.offset, value, this.littleEndian);\n\n    this.offset += 8;\n  }\n\n  writeChar(str) {\n    this.writeUint8(str.charCodeAt(0));\n  }\n\n  writeChars(str) {\n    for (var i = 0; i < str.length; i++) {\n      this.writeUint8(str.charCodeAt(i));\n    }\n  }\n\n  toArray() {\n    return new Uint8Array(this.buffer, 0, this.offset);\n  }\n\n}\n\nmodule.exports = IOBuffer;","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/node_modules/fast-jpeg/node_modules/iobuffer/IOBuffer.js"],"names":["defaultByteLength","charArray","IOBuffer","constructor","data","options","undefined","ArrayBuffer","length","byteLength","offset","buffer","slice","byteOffset","littleEndian","_data","DataView","_increment","_mark","available","isLittleEndian","setLittleEndian","isBigEndian","setBigEndian","skip","n","seek","mark","reset","rewind","ensureAvailable","newIncrement","newLength","newArray","Uint8Array","set","readBoolean","readUint8","readInt8","getInt8","getUint8","readByte","readBytes","bytes","i","readInt16","value","getInt16","readUint16","getUint16","readInt32","getInt32","readUint32","getUint32","readFloat32","getFloat32","readFloat64","getFloat64","readChar","String","fromCharCode","readChars","join","writeBoolean","bool","writeUint8","writeInt8","setInt8","setUint8","writeByte","writeBytes","writeInt16","setInt16","writeUint16","setUint16","writeInt32","setInt32","writeUint32","setUint32","writeFloat32","setFloat32","writeFloat64","setFloat64","writeChar","str","charCodeAt","writeChars","toArray","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst defaultByteLength = 1024 * 8;\nconst charArray = [];\n\nclass IOBuffer {\n    constructor(data, options) {\n        options = options || {};\n        if (data === undefined) {\n            data = defaultByteLength;\n        }\n        if (typeof data === 'number') {\n            data = new ArrayBuffer(data);\n        }\n        let length = data.byteLength;\n        const offset = options.offset ? options.offset>>>0 : 0;\n        if (data.buffer) {\n            length = data.byteLength - offset;\n            if (data.byteLength !== data.buffer.byteLength) { // Node.js buffer from pool\n                data = data.buffer.slice(data.byteOffset + offset, data.byteOffset + data.byteLength);\n            } else if (offset) {\n                data = data.buffer.slice(offset);\n            } else {\n                data = data.buffer;\n            }\n        }\n        this.buffer = data;\n        this.length = length;\n        this.byteLength = length;\n        this.byteOffset = 0;\n        this.offset = 0;\n        this.littleEndian = true;\n        this._data = new DataView(this.buffer);\n        this._increment = length || defaultByteLength;\n        this._mark = 0;\n    }\n\n    available(byteLength) {\n        if (byteLength === undefined) byteLength = 1;\n        return (this.offset + byteLength) <= this.length;\n    }\n\n    isLittleEndian() {\n        return this.littleEndian;\n    }\n\n    setLittleEndian() {\n        this.littleEndian = true;\n    }\n\n    isBigEndian() {\n        return !this.littleEndian;\n    }\n\n    setBigEndian() {\n        this.littleEndian = false;\n    }\n\n    skip(n) {\n        if (n === undefined) n = 1;\n        this.offset += n;\n    }\n\n    seek(offset) {\n        this.offset = offset;\n    }\n\n    mark() {\n        this._mark = this.offset;\n    }\n\n    reset() {\n        this.offset = this._mark;\n    }\n\n    rewind() {\n        this.offset = 0;\n    }\n\n    ensureAvailable(byteLength) {\n        if (byteLength === undefined) byteLength = 1;\n        if (!this.available(byteLength)) {\n            const newIncrement = this._increment + this._increment;\n            this._increment = newIncrement;\n            const newLength = this.length + newIncrement;\n            const newArray = new Uint8Array(newLength);\n            newArray.set(new Uint8Array(this.buffer));\n            this.buffer = newArray.buffer;\n            this.length = newLength;\n            this._data = new DataView(this.buffer);\n        }\n    }\n\n    readBoolean() {\n        return this.readUint8() !== 0;\n    }\n\n    readInt8() {\n        return this._data.getInt8(this.offset++);\n    }\n\n    readUint8() {\n        return this._data.getUint8(this.offset++);\n    }\n\n    readByte() {\n        return this.readUint8();\n    }\n\n    readBytes(n) {\n        if (n === undefined) n = 1;\n        var bytes = new Uint8Array(n);\n        for (var i = 0; i < n; i++) {\n            bytes[i] = this.readByte();\n        }\n        return bytes;\n    }\n\n    readInt16() {\n        var value = this._data.getInt16(this.offset, this.littleEndian);\n        this.offset += 2;\n        return value;\n    }\n\n    readUint16() {\n        var value = this._data.getUint16(this.offset, this.littleEndian);\n        this.offset += 2;\n        return value;\n    }\n\n    readInt32() {\n        var value = this._data.getInt32(this.offset, this.littleEndian);\n        this.offset += 4;\n        return value;\n    }\n\n    readUint32() {\n        var value = this._data.getUint32(this.offset, this.littleEndian);\n        this.offset += 4;\n        return value;\n    }\n\n    readFloat32() {\n        var value = this._data.getFloat32(this.offset, this.littleEndian);\n        this.offset += 4;\n        return value;\n    }\n\n    readFloat64() {\n        var value = this._data.getFloat64(this.offset, this.littleEndian);\n        this.offset += 8;\n        return value;\n    }\n\n    readChar() {\n        return String.fromCharCode(this.readInt8());\n    }\n\n    readChars(n) {\n        if (n === undefined) n = 1;\n        charArray.length = n;\n        for (var i = 0; i < n; i++) {\n            charArray[i] = this.readChar();\n        }\n        return charArray.join('');\n    }\n\n    writeBoolean(bool) {\n        this.writeUint8(bool ? 0xff : 0x00);\n    }\n\n    writeInt8(value) {\n        this.ensureAvailable(1);\n        this._data.setInt8(this.offset++, value);\n    }\n\n    writeUint8(value) {\n        this.ensureAvailable(1);\n        this._data.setUint8(this.offset++, value);\n    }\n\n    writeByte(value) {\n        this.writeUint8(value);\n    }\n\n    writeBytes(bytes) {\n        this.ensureAvailable(bytes.length);\n        for (var i = 0; i < bytes.length; i++) {\n            this._data.setUint8(this.offset++, bytes[i]);\n        }\n    }\n\n    writeInt16(value) {\n        this.ensureAvailable(2);\n        this._data.setInt16(this.offset, value, this.littleEndian);\n        this.offset += 2;\n    }\n\n    writeUint16(value) {\n        this.ensureAvailable(2);\n        this._data.setUint16(this.offset, value, this.littleEndian);\n        this.offset += 2;\n    }\n\n    writeInt32(value) {\n        this.ensureAvailable(4);\n        this._data.setInt32(this.offset, value, this.littleEndian);\n        this.offset += 4;\n    }\n\n    writeUint32(value) {\n        this.ensureAvailable(4);\n        this._data.setUint32(this.offset, value, this.littleEndian);\n        this.offset += 4;\n    }\n\n    writeFloat32(value) {\n        this.ensureAvailable(4);\n        this._data.setFloat32(this.offset, value, this.littleEndian);\n        this.offset += 4;\n    }\n\n    writeFloat64(value) {\n        this.ensureAvailable(8);\n        this._data.setFloat64(this.offset, value, this.littleEndian);\n        this.offset += 8;\n    }\n\n    writeChar(str) {\n        this.writeUint8(str.charCodeAt(0));\n    }\n\n    writeChars(str) {\n        for (var i = 0; i < str.length; i++) {\n            this.writeUint8(str.charCodeAt(i));\n        }\n    }\n\n    toArray() {\n        return new Uint8Array(this.buffer, 0, this.offset);\n    }\n}\n\nmodule.exports = IOBuffer;\n"]},"metadata":{},"sourceType":"script"}