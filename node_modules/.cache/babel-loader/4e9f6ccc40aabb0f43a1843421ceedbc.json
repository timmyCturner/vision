{"ast":null,"code":"// Those methods can only be called on binary images, but we won't lose time to check.\nconst bitMethods = {\n  /**\n   * Get the bit of a pixel using a pixel index.\n   * This method can only be called on binary images.\n   * @memberof Image\n   * @instance\n   * @param {number} pixel - The pixel index which corresponds to `x * image.width + y`\n   * @return {number} 0: bit is unset, 1: bit is set\n   */\n  getBit(pixel) {\n    return this.data[getSlot(pixel)] & 1 << getShift(pixel) ? 1 : 0;\n  },\n\n  /**\n   * Set the bit of a pixel using a pixel index.\n   * This method can only be called on binary images.\n   * @memberof Image\n   * @instance\n   * @param {number} pixel - The pixel index which corresponds to `x * image.width + y`\n   */\n  setBit(pixel) {\n    this.data[getSlot(pixel)] |= 1 << getShift(pixel);\n  },\n\n  /**\n   * Clear the bit of a pixel using a pixel index.\n   * This method can only be called on binary images.\n   * @memberof Image\n   * @instance\n   * @param {number} pixel - The pixel index which corresponds to `x * image.width + y`\n   */\n  clearBit(pixel) {\n    this.data[getSlot(pixel)] &= ~(1 << getShift(pixel));\n  },\n\n  /**\n   * Toggle (invert) the bit of a pixel using a pixel index.\n   * This method can only be called on binary images.\n   * @memberof Image\n   * @instance\n   * @param {number} pixel - The pixel index which corresponds to `x * image.width + y`\n   */\n  toggleBit(pixel) {\n    this.data[getSlot(pixel)] ^= 1 << getShift(pixel);\n  },\n\n  /**\n   * Get the bit of a pixel using coordinates.\n   * This method can only be called on binary images.\n   * @memberof Image\n   * @instance\n   * @param {number} x - x coordinate (0 = left)\n   * @param {number} y - y coordinate (0 = top)\n   * @return {number} 0: bit is unset, 1: bit is set\n   */\n  getBitXY(x, y) {\n    if (x >= this.width || y >= this.height) return 0;\n    return this.getBit(y * this.width + x);\n  },\n\n  /**\n   * Set the bit of a pixel using coordinates.\n   * This method can only be called on binary images.\n   * @memberof Image\n   * @instance\n   * @param {number} x - x coordinate (0 = left)\n   * @param {number} y - y coordinate (0 = top)\n   */\n  setBitXY(x, y) {\n    this.setBit(y * this.width + x);\n  },\n\n  /**\n   * Clear the bit of a pixel using coordinates.\n   * @memberof Image\n   * @instance\n   * @param {number} x - x coordinate (0 = left)\n   * @param {number} y - y coordinate (0 = top)\n   */\n  clearBitXY(x, y) {\n    this.clearBit(y * this.width + x);\n  },\n\n  /**\n   * Toggle (invert) the bit of a pixel using coordinates.\n   * @memberof Image\n   * @instance\n   * @param {number} x - x coordinate (0 = left)\n   * @param {number} y - y coordinate (0 = top)\n   */\n  toggleBitXY(x, y) {\n    this.toggleBit(y * this.width + x);\n  }\n\n};\n\nfunction getSlot(pixel) {\n  return pixel >> 3;\n}\n\nfunction getShift(pixel) {\n  return 7 - (pixel & 0b00000111);\n}\n\nexport default function setBitMethods(Image) {\n  for (const i in bitMethods) {\n    Image.prototype[i] = bitMethods[i];\n  }\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/node_modules/image-js/src/image/core/bitMethods.js"],"names":["bitMethods","getBit","pixel","data","getSlot","getShift","setBit","clearBit","toggleBit","getBitXY","x","y","width","height","setBitXY","clearBitXY","toggleBitXY","setBitMethods","Image","i","prototype"],"mappings":"AAAA;AACA,MAAMA,UAAU,GAAG;AACjB;;;;;;;;AAQAC,EAAAA,MAAM,CAACC,KAAD,EAAQ;AACZ,WAAO,KAAKC,IAAL,CAAUC,OAAO,CAACF,KAAD,CAAjB,IAA6B,KAAKG,QAAQ,CAACH,KAAD,CAA1C,GAAqD,CAArD,GAAyD,CAAhE;AACD,GAXgB;;AAajB;;;;;;;AAOAI,EAAAA,MAAM,CAACJ,KAAD,EAAQ;AACZ,SAAKC,IAAL,CAAUC,OAAO,CAACF,KAAD,CAAjB,KAA6B,KAAKG,QAAQ,CAACH,KAAD,CAA1C;AACD,GAtBgB;;AAwBjB;;;;;;;AAOAK,EAAAA,QAAQ,CAACL,KAAD,EAAQ;AACd,SAAKC,IAAL,CAAUC,OAAO,CAACF,KAAD,CAAjB,KAA6B,EAAE,KAAKG,QAAQ,CAACH,KAAD,CAAf,CAA7B;AACD,GAjCgB;;AAmCjB;;;;;;;AAOAM,EAAAA,SAAS,CAACN,KAAD,EAAQ;AACf,SAAKC,IAAL,CAAUC,OAAO,CAACF,KAAD,CAAjB,KAA6B,KAAKG,QAAQ,CAACH,KAAD,CAA1C;AACD,GA5CgB;;AA8CjB;;;;;;;;;AASAO,EAAAA,QAAQ,CAACC,CAAD,EAAIC,CAAJ,EAAO;AACb,QAAID,CAAC,IAAI,KAAKE,KAAV,IAAmBD,CAAC,IAAI,KAAKE,MAAjC,EAAyC,OAAO,CAAP;AACzC,WAAO,KAAKZ,MAAL,CAAYU,CAAC,GAAG,KAAKC,KAAT,GAAiBF,CAA7B,CAAP;AACD,GA1DgB;;AA4DjB;;;;;;;;AAQAI,EAAAA,QAAQ,CAACJ,CAAD,EAAIC,CAAJ,EAAO;AACb,SAAKL,MAAL,CAAYK,CAAC,GAAG,KAAKC,KAAT,GAAiBF,CAA7B;AACD,GAtEgB;;AAwEjB;;;;;;;AAOAK,EAAAA,UAAU,CAACL,CAAD,EAAIC,CAAJ,EAAO;AACf,SAAKJ,QAAL,CAAcI,CAAC,GAAG,KAAKC,KAAT,GAAiBF,CAA/B;AACD,GAjFgB;;AAmFjB;;;;;;;AAOAM,EAAAA,WAAW,CAACN,CAAD,EAAIC,CAAJ,EAAO;AAChB,SAAKH,SAAL,CAAeG,CAAC,GAAG,KAAKC,KAAT,GAAiBF,CAAhC;AACD;;AA5FgB,CAAnB;;AA+FA,SAASN,OAAT,CAAiBF,KAAjB,EAAwB;AACtB,SAAOA,KAAK,IAAI,CAAhB;AACD;;AAED,SAASG,QAAT,CAAkBH,KAAlB,EAAyB;AACvB,SAAO,KAAKA,KAAK,GAAG,UAAb,CAAP;AACD;;AAED,eAAe,SAASe,aAAT,CAAuBC,KAAvB,EAA8B;AAC3C,OAAK,MAAMC,CAAX,IAAgBnB,UAAhB,EAA4B;AAC1BkB,IAAAA,KAAK,CAACE,SAAN,CAAgBD,CAAhB,IAAqBnB,UAAU,CAACmB,CAAD,CAA/B;AACD;AACF","sourcesContent":["// Those methods can only be called on binary images, but we won't lose time to check.\nconst bitMethods = {\n  /**\n   * Get the bit of a pixel using a pixel index.\n   * This method can only be called on binary images.\n   * @memberof Image\n   * @instance\n   * @param {number} pixel - The pixel index which corresponds to `x * image.width + y`\n   * @return {number} 0: bit is unset, 1: bit is set\n   */\n  getBit(pixel) {\n    return this.data[getSlot(pixel)] & (1 << getShift(pixel)) ? 1 : 0;\n  },\n\n  /**\n   * Set the bit of a pixel using a pixel index.\n   * This method can only be called on binary images.\n   * @memberof Image\n   * @instance\n   * @param {number} pixel - The pixel index which corresponds to `x * image.width + y`\n   */\n  setBit(pixel) {\n    this.data[getSlot(pixel)] |= 1 << getShift(pixel);\n  },\n\n  /**\n   * Clear the bit of a pixel using a pixel index.\n   * This method can only be called on binary images.\n   * @memberof Image\n   * @instance\n   * @param {number} pixel - The pixel index which corresponds to `x * image.width + y`\n   */\n  clearBit(pixel) {\n    this.data[getSlot(pixel)] &= ~(1 << getShift(pixel));\n  },\n\n  /**\n   * Toggle (invert) the bit of a pixel using a pixel index.\n   * This method can only be called on binary images.\n   * @memberof Image\n   * @instance\n   * @param {number} pixel - The pixel index which corresponds to `x * image.width + y`\n   */\n  toggleBit(pixel) {\n    this.data[getSlot(pixel)] ^= 1 << getShift(pixel);\n  },\n\n  /**\n   * Get the bit of a pixel using coordinates.\n   * This method can only be called on binary images.\n   * @memberof Image\n   * @instance\n   * @param {number} x - x coordinate (0 = left)\n   * @param {number} y - y coordinate (0 = top)\n   * @return {number} 0: bit is unset, 1: bit is set\n   */\n  getBitXY(x, y) {\n    if (x >= this.width || y >= this.height) return 0;\n    return this.getBit(y * this.width + x);\n  },\n\n  /**\n   * Set the bit of a pixel using coordinates.\n   * This method can only be called on binary images.\n   * @memberof Image\n   * @instance\n   * @param {number} x - x coordinate (0 = left)\n   * @param {number} y - y coordinate (0 = top)\n   */\n  setBitXY(x, y) {\n    this.setBit(y * this.width + x);\n  },\n\n  /**\n   * Clear the bit of a pixel using coordinates.\n   * @memberof Image\n   * @instance\n   * @param {number} x - x coordinate (0 = left)\n   * @param {number} y - y coordinate (0 = top)\n   */\n  clearBitXY(x, y) {\n    this.clearBit(y * this.width + x);\n  },\n\n  /**\n   * Toggle (invert) the bit of a pixel using coordinates.\n   * @memberof Image\n   * @instance\n   * @param {number} x - x coordinate (0 = left)\n   * @param {number} y - y coordinate (0 = top)\n   */\n  toggleBitXY(x, y) {\n    this.toggleBit(y * this.width + x);\n  },\n};\n\nfunction getSlot(pixel) {\n  return pixel >> 3;\n}\n\nfunction getShift(pixel) {\n  return 7 - (pixel & 0b00000111);\n}\n\nexport default function setBitMethods(Image) {\n  for (const i in bitMethods) {\n    Image.prototype[i] = bitMethods[i];\n  }\n}\n"]},"metadata":{},"sourceType":"module"}