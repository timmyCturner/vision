{"ast":null,"code":"import Ifd from './ifd'; // eslint-disable-next-line prefer-named-capture-group\n\nconst dateTimeRegex = /^(\\d{4}):(\\d{2}):(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})$/;\nexport default class TiffIfd extends Ifd {\n  constructor() {\n    super('standard');\n  } // Custom fields\n\n\n  get size() {\n    return this.width * this.height;\n  }\n\n  get width() {\n    return this.imageWidth;\n  }\n\n  get height() {\n    return this.imageLength;\n  }\n\n  get components() {\n    return this.samplesPerPixel;\n  }\n\n  get date() {\n    let date = new Date();\n    let result = dateTimeRegex.exec(this.dateTime);\n\n    if (result === null) {\n      throw new Error(`invalid dateTime: ${this.dateTime}`);\n    }\n\n    date.setFullYear(Number(result[1]), Number(result[2]) - 1, Number(result[3]));\n    date.setHours(Number(result[4]), Number(result[5]), Number(result[6]));\n    return date;\n  } // IFD fields\n\n\n  get newSubfileType() {\n    return this.get('NewSubfileType');\n  }\n\n  get imageWidth() {\n    return this.get('ImageWidth');\n  }\n\n  get imageLength() {\n    return this.get('ImageLength');\n  }\n\n  get bitsPerSample() {\n    const data = this.get('BitsPerSample');\n\n    if (data && typeof data !== 'number') {\n      return data[0];\n    }\n\n    return data;\n  }\n\n  get alpha() {\n    const extraSamples = this.extraSamples;\n    if (!extraSamples) return false;\n    return extraSamples[0] !== 0;\n  }\n\n  get associatedAlpha() {\n    const extraSamples = this.extraSamples;\n    if (!extraSamples) return false;\n    return extraSamples[0] === 1;\n  }\n\n  get extraSamples() {\n    return alwaysArray(this.get('ExtraSamples'));\n  }\n\n  get compression() {\n    return this.get('Compression') || 1;\n  }\n\n  get type() {\n    return this.get('PhotometricInterpretation');\n  }\n\n  get fillOrder() {\n    return this.get('FillOrder') || 1;\n  }\n\n  get documentName() {\n    return this.get('DocumentName');\n  }\n\n  get imageDescription() {\n    return this.get('ImageDescription');\n  }\n\n  get stripOffsets() {\n    return alwaysArray(this.get('StripOffsets'));\n  }\n\n  get orientation() {\n    return this.get('Orientation');\n  }\n\n  get samplesPerPixel() {\n    return this.get('SamplesPerPixel') || 1;\n  }\n\n  get rowsPerStrip() {\n    return this.get('RowsPerStrip');\n  }\n\n  get stripByteCounts() {\n    return alwaysArray(this.get('StripByteCounts'));\n  }\n\n  get minSampleValue() {\n    return this.get('MinSampleValue') || 0;\n  }\n\n  get maxSampleValue() {\n    return this.get('MaxSampleValue') || Math.pow(2, this.bitsPerSample) - 1;\n  }\n\n  get xResolution() {\n    return this.get('XResolution');\n  }\n\n  get yResolution() {\n    return this.get('YResolution');\n  }\n\n  get planarConfiguration() {\n    return this.get('PlanarConfiguration') || 1;\n  }\n\n  get resolutionUnit() {\n    return this.get('ResolutionUnit') || 2;\n  }\n\n  get dateTime() {\n    return this.get('DateTime');\n  }\n\n  get predictor() {\n    return this.get('Predictor') || 1;\n  }\n\n  get sampleFormat() {\n    return this.get('SampleFormat') || 1;\n  }\n\n  get sMinSampleValue() {\n    return this.get('SMinSampleValue') || this.minSampleValue;\n  }\n\n  get sMaxSampleValue() {\n    return this.get('SMaxSampleValue') || this.maxSampleValue;\n  }\n\n  get palette() {\n    const totalColors = 2 ** this.bitsPerSample;\n    const colorMap = this.get('ColorMap');\n    if (!colorMap) return undefined;\n\n    if (colorMap.length !== 3 * totalColors) {\n      throw new Error(`ColorMap size must be ${totalColors}`);\n    }\n\n    const palette = [];\n\n    for (let i = 0; i < totalColors; i++) {\n      palette.push([colorMap[i], colorMap[i + totalColors], colorMap[i + 2 * totalColors]]);\n    }\n\n    return palette;\n  }\n\n}\n\nfunction alwaysArray(value) {\n  if (typeof value === 'number') return [value];\n  return value;\n}","map":{"version":3,"sources":["../src/tiffIfd.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import Ifd from './ifd';\r\n// eslint-disable-next-line prefer-named-capture-group\r\nconst dateTimeRegex = /^(\\d{4}):(\\d{2}):(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})$/;\r\nexport default class TiffIfd extends Ifd {\r\n    constructor() {\r\n        super('standard');\r\n    }\r\n    // Custom fields\r\n    get size() {\r\n        return this.width * this.height;\r\n    }\r\n    get width() {\r\n        return this.imageWidth;\r\n    }\r\n    get height() {\r\n        return this.imageLength;\r\n    }\r\n    get components() {\r\n        return this.samplesPerPixel;\r\n    }\r\n    get date() {\r\n        let date = new Date();\r\n        let result = dateTimeRegex.exec(this.dateTime);\r\n        if (result === null) {\r\n            throw new Error(`invalid dateTime: ${this.dateTime}`);\r\n        }\r\n        date.setFullYear(Number(result[1]), Number(result[2]) - 1, Number(result[3]));\r\n        date.setHours(Number(result[4]), Number(result[5]), Number(result[6]));\r\n        return date;\r\n    }\r\n    // IFD fields\r\n    get newSubfileType() {\r\n        return this.get('NewSubfileType');\r\n    }\r\n    get imageWidth() {\r\n        return this.get('ImageWidth');\r\n    }\r\n    get imageLength() {\r\n        return this.get('ImageLength');\r\n    }\r\n    get bitsPerSample() {\r\n        const data = this.get('BitsPerSample');\r\n        if (data && typeof data !== 'number') {\r\n            return data[0];\r\n        }\r\n        return data;\r\n    }\r\n    get alpha() {\r\n        const extraSamples = this.extraSamples;\r\n        if (!extraSamples)\r\n            return false;\r\n        return extraSamples[0] !== 0;\r\n    }\r\n    get associatedAlpha() {\r\n        const extraSamples = this.extraSamples;\r\n        if (!extraSamples)\r\n            return false;\r\n        return extraSamples[0] === 1;\r\n    }\r\n    get extraSamples() {\r\n        return alwaysArray(this.get('ExtraSamples'));\r\n    }\r\n    get compression() {\r\n        return this.get('Compression') || 1;\r\n    }\r\n    get type() {\r\n        return this.get('PhotometricInterpretation');\r\n    }\r\n    get fillOrder() {\r\n        return this.get('FillOrder') || 1;\r\n    }\r\n    get documentName() {\r\n        return this.get('DocumentName');\r\n    }\r\n    get imageDescription() {\r\n        return this.get('ImageDescription');\r\n    }\r\n    get stripOffsets() {\r\n        return alwaysArray(this.get('StripOffsets'));\r\n    }\r\n    get orientation() {\r\n        return this.get('Orientation');\r\n    }\r\n    get samplesPerPixel() {\r\n        return this.get('SamplesPerPixel') || 1;\r\n    }\r\n    get rowsPerStrip() {\r\n        return this.get('RowsPerStrip');\r\n    }\r\n    get stripByteCounts() {\r\n        return alwaysArray(this.get('StripByteCounts'));\r\n    }\r\n    get minSampleValue() {\r\n        return this.get('MinSampleValue') || 0;\r\n    }\r\n    get maxSampleValue() {\r\n        return this.get('MaxSampleValue') || Math.pow(2, this.bitsPerSample) - 1;\r\n    }\r\n    get xResolution() {\r\n        return this.get('XResolution');\r\n    }\r\n    get yResolution() {\r\n        return this.get('YResolution');\r\n    }\r\n    get planarConfiguration() {\r\n        return this.get('PlanarConfiguration') || 1;\r\n    }\r\n    get resolutionUnit() {\r\n        return this.get('ResolutionUnit') || 2;\r\n    }\r\n    get dateTime() {\r\n        return this.get('DateTime');\r\n    }\r\n    get predictor() {\r\n        return this.get('Predictor') || 1;\r\n    }\r\n    get sampleFormat() {\r\n        return this.get('SampleFormat') || 1;\r\n    }\r\n    get sMinSampleValue() {\r\n        return this.get('SMinSampleValue') || this.minSampleValue;\r\n    }\r\n    get sMaxSampleValue() {\r\n        return this.get('SMaxSampleValue') || this.maxSampleValue;\r\n    }\r\n    get palette() {\r\n        const totalColors = 2 ** this.bitsPerSample;\r\n        const colorMap = this.get('ColorMap');\r\n        if (!colorMap)\r\n            return undefined;\r\n        if (colorMap.length !== 3 * totalColors) {\r\n            throw new Error(`ColorMap size must be ${totalColors}`);\r\n        }\r\n        const palette = [];\r\n        for (let i = 0; i < totalColors; i++) {\r\n            palette.push([\r\n                colorMap[i],\r\n                colorMap[i + totalColors],\r\n                colorMap[i + 2 * totalColors],\r\n            ]);\r\n        }\r\n        return palette;\r\n    }\r\n}\r\nfunction alwaysArray(value) {\r\n    if (typeof value === 'number')\r\n        return [value];\r\n    return value;\r\n}\r\n//# sourceMappingURL=tiffIfd.js.map"]},"metadata":{},"sourceType":"module"}