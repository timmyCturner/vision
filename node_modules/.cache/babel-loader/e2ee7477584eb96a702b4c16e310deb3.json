{"ast":null,"code":"/**\n * Fast Fourier Transform module\n * 1D-FFT/IFFT, 2D-FFT/IFFT (radix-2)\n */\nvar FFT = function () {\n  var FFT;\n\n  if (typeof exports !== 'undefined') {\n    FFT = exports; // for CommonJS\n  } else {\n    FFT = {};\n  }\n\n  var version = {\n    release: '0.3.0',\n    date: '2013-03'\n  };\n\n  FFT.toString = function () {\n    return \"version \" + version.release + \", released \" + version.date;\n  }; // core operations\n\n\n  var _n = 0,\n      // order\n  _bitrev = null,\n      // bit reversal table\n  _cstb = null; // sin/cos table\n\n  var core = {\n    init: function (n) {\n      if (n !== 0 && (n & n - 1) === 0) {\n        _n = n;\n\n        core._initArray();\n\n        core._makeBitReversalTable();\n\n        core._makeCosSinTable();\n      } else {\n        throw new Error(\"init: radix-2 required\");\n      }\n    },\n    // 1D-FFT\n    fft1d: function (re, im) {\n      core.fft(re, im, 1);\n    },\n    // 1D-IFFT\n    ifft1d: function (re, im) {\n      var n = 1 / _n;\n      core.fft(re, im, -1);\n\n      for (var i = 0; i < _n; i++) {\n        re[i] *= n;\n        im[i] *= n;\n      }\n    },\n    // 1D-IFFT\n    bt1d: function (re, im) {\n      core.fft(re, im, -1);\n    },\n    // 2D-FFT Not very useful if the number of rows have to be equal to cols\n    fft2d: function (re, im) {\n      var tre = [],\n          tim = [],\n          i = 0; // x-axis\n\n      for (var y = 0; y < _n; y++) {\n        i = y * _n;\n\n        for (var x1 = 0; x1 < _n; x1++) {\n          tre[x1] = re[x1 + i];\n          tim[x1] = im[x1 + i];\n        }\n\n        core.fft1d(tre, tim);\n\n        for (var x2 = 0; x2 < _n; x2++) {\n          re[x2 + i] = tre[x2];\n          im[x2 + i] = tim[x2];\n        }\n      } // y-axis\n\n\n      for (var x = 0; x < _n; x++) {\n        for (var y1 = 0; y1 < _n; y1++) {\n          i = x + y1 * _n;\n          tre[y1] = re[i];\n          tim[y1] = im[i];\n        }\n\n        core.fft1d(tre, tim);\n\n        for (var y2 = 0; y2 < _n; y2++) {\n          i = x + y2 * _n;\n          re[i] = tre[y2];\n          im[i] = tim[y2];\n        }\n      }\n    },\n    // 2D-IFFT\n    ifft2d: function (re, im) {\n      var tre = [],\n          tim = [],\n          i = 0; // x-axis\n\n      for (var y = 0; y < _n; y++) {\n        i = y * _n;\n\n        for (var x1 = 0; x1 < _n; x1++) {\n          tre[x1] = re[x1 + i];\n          tim[x1] = im[x1 + i];\n        }\n\n        core.ifft1d(tre, tim);\n\n        for (var x2 = 0; x2 < _n; x2++) {\n          re[x2 + i] = tre[x2];\n          im[x2 + i] = tim[x2];\n        }\n      } // y-axis\n\n\n      for (var x = 0; x < _n; x++) {\n        for (var y1 = 0; y1 < _n; y1++) {\n          i = x + y1 * _n;\n          tre[y1] = re[i];\n          tim[y1] = im[i];\n        }\n\n        core.ifft1d(tre, tim);\n\n        for (var y2 = 0; y2 < _n; y2++) {\n          i = x + y2 * _n;\n          re[i] = tre[y2];\n          im[i] = tim[y2];\n        }\n      }\n    },\n    // core operation of FFT\n    fft: function (re, im, inv) {\n      var d,\n          h,\n          ik,\n          m,\n          tmp,\n          wr,\n          wi,\n          xr,\n          xi,\n          n4 = _n >> 2; // bit reversal\n\n      for (var l = 0; l < _n; l++) {\n        m = _bitrev[l];\n\n        if (l < m) {\n          tmp = re[l];\n          re[l] = re[m];\n          re[m] = tmp;\n          tmp = im[l];\n          im[l] = im[m];\n          im[m] = tmp;\n        }\n      } // butterfly operation\n\n\n      for (var k = 1; k < _n; k <<= 1) {\n        h = 0;\n        d = _n / (k << 1);\n\n        for (var j = 0; j < k; j++) {\n          wr = _cstb[h + n4];\n          wi = inv * _cstb[h];\n\n          for (var i = j; i < _n; i += k << 1) {\n            ik = i + k;\n            xr = wr * re[ik] + wi * im[ik];\n            xi = wr * im[ik] - wi * re[ik];\n            re[ik] = re[i] - xr;\n            re[i] += xr;\n            im[ik] = im[i] - xi;\n            im[i] += xi;\n          }\n\n          h += d;\n        }\n      }\n    },\n    // initialize the array (supports TypedArray)\n    _initArray: function () {\n      if (typeof Uint32Array !== 'undefined') {\n        _bitrev = new Uint32Array(_n);\n      } else {\n        _bitrev = [];\n      }\n\n      if (typeof Float64Array !== 'undefined') {\n        _cstb = new Float64Array(_n * 1.25);\n      } else {\n        _cstb = [];\n      }\n    },\n    // zero padding\n    _paddingZero: function () {// TODO\n    },\n    // makes bit reversal table\n    _makeBitReversalTable: function () {\n      var i = 0,\n          j = 0,\n          k = 0;\n      _bitrev[0] = 0;\n\n      while (++i < _n) {\n        k = _n >> 1;\n\n        while (k <= j) {\n          j -= k;\n          k >>= 1;\n        }\n\n        j += k;\n        _bitrev[i] = j;\n      }\n    },\n    // makes trigonometiric function table\n    _makeCosSinTable: function () {\n      var n2 = _n >> 1,\n          n4 = _n >> 2,\n          n8 = _n >> 3,\n          n2p4 = n2 + n4,\n          t = Math.sin(Math.PI / _n),\n          dc = 2 * t * t,\n          ds = Math.sqrt(dc * (2 - dc)),\n          c = _cstb[n4] = 1,\n          s = _cstb[0] = 0;\n      t = 2 * dc;\n\n      for (var i = 1; i < n8; i++) {\n        c -= dc;\n        dc += t * c;\n        s += ds;\n        ds -= t * s;\n        _cstb[i] = s;\n        _cstb[n4 - i] = c;\n      }\n\n      if (n8 !== 0) {\n        _cstb[n8] = Math.sqrt(0.5);\n      }\n\n      for (var j = 0; j < n4; j++) {\n        _cstb[n2 - j] = _cstb[j];\n      }\n\n      for (var k = 0; k < n2p4; k++) {\n        _cstb[k + n2] = -_cstb[k];\n      }\n    }\n  }; // aliases (public APIs)\n\n  var apis = ['init', 'fft1d', 'ifft1d', 'fft2d', 'ifft2d'];\n\n  for (var i = 0; i < apis.length; i++) {\n    FFT[apis[i]] = core[apis[i]];\n  }\n\n  FFT.bt = core.bt1d;\n  FFT.fft = core.fft1d;\n  FFT.ifft = core.ifft1d;\n  return FFT;\n}.call(this);","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/node_modules/ml-fft/src/fftlib.js"],"names":["FFT","exports","version","release","date","toString","_n","_bitrev","_cstb","core","init","n","_initArray","_makeBitReversalTable","_makeCosSinTable","Error","fft1d","re","im","fft","ifft1d","i","bt1d","fft2d","tre","tim","y","x1","x2","x","y1","y2","ifft2d","inv","d","h","ik","m","tmp","wr","wi","xr","xi","n4","l","k","j","Uint32Array","Float64Array","_paddingZero","n2","n8","n2p4","t","Math","sin","PI","dc","ds","sqrt","c","s","apis","length","bt","ifft","call"],"mappings":"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","sourcesContent":["/**\n * Fast Fourier Transform module\n * 1D-FFT/IFFT, 2D-FFT/IFFT (radix-2)\n */\nvar FFT = (function(){\n  var FFT;  \n  \n  if(typeof exports !== 'undefined') {\n    FFT = exports;   // for CommonJS\n  } else {\n    FFT = {};\n  }\n  \n  var version = {\n    release: '0.3.0',\n    date: '2013-03'\n  };\n  FFT.toString = function() {\n    return \"version \" + version.release + \", released \" + version.date;\n  };\n\n  // core operations\n  var _n = 0,          // order\n      _bitrev = null,  // bit reversal table\n      _cstb = null;    // sin/cos table\n\n  var core = {\n    init : function(n) {\n      if(n !== 0 && (n & (n - 1)) === 0) {\n        _n = n;\n        core._initArray();\n        core._makeBitReversalTable();\n        core._makeCosSinTable();\n      } else {\n        throw new Error(\"init: radix-2 required\");\n      }\n    },\n    // 1D-FFT\n    fft1d : function(re, im) {\n      core.fft(re, im, 1);\n    },\n    // 1D-IFFT\n    ifft1d : function(re, im) {\n      var n = 1/_n;\n      core.fft(re, im, -1);\n      for(var i=0; i<_n; i++) {\n        re[i] *= n;\n        im[i] *= n;\n      }\n    },\n     // 1D-IFFT\n    bt1d : function(re, im) {\n      core.fft(re, im, -1);\n    },\n    // 2D-FFT Not very useful if the number of rows have to be equal to cols\n    fft2d : function(re, im) {\n      var tre = [],\n          tim = [],\n          i = 0;\n      // x-axis\n      for(var y=0; y<_n; y++) {\n        i = y*_n;\n        for(var x1=0; x1<_n; x1++) {\n          tre[x1] = re[x1 + i];\n          tim[x1] = im[x1 + i];\n        }\n        core.fft1d(tre, tim);\n        for(var x2=0; x2<_n; x2++) {\n          re[x2 + i] = tre[x2];\n          im[x2 + i] = tim[x2];\n        }\n      }\n      // y-axis\n      for(var x=0; x<_n; x++) {\n        for(var y1=0; y1<_n; y1++) {\n          i = x + y1*_n;\n          tre[y1] = re[i];\n          tim[y1] = im[i];\n        }\n        core.fft1d(tre, tim);\n        for(var y2=0; y2<_n; y2++) {\n          i = x + y2*_n;\n          re[i] = tre[y2];\n          im[i] = tim[y2];\n        }\n      }\n    },\n    // 2D-IFFT\n    ifft2d : function(re, im) {\n      var tre = [],\n          tim = [],\n          i = 0;\n      // x-axis\n      for(var y=0; y<_n; y++) {\n        i = y*_n;\n        for(var x1=0; x1<_n; x1++) {\n          tre[x1] = re[x1 + i];\n          tim[x1] = im[x1 + i];\n        }\n        core.ifft1d(tre, tim);\n        for(var x2=0; x2<_n; x2++) {\n          re[x2 + i] = tre[x2];\n          im[x2 + i] = tim[x2];\n        }\n      }\n      // y-axis\n      for(var x=0; x<_n; x++) {\n        for(var y1=0; y1<_n; y1++) {\n          i = x + y1*_n;\n          tre[y1] = re[i];\n          tim[y1] = im[i];\n        }\n        core.ifft1d(tre, tim);\n        for(var y2=0; y2<_n; y2++) {\n          i = x + y2*_n;\n          re[i] = tre[y2];\n          im[i] = tim[y2];\n        }\n      }\n    },\n    // core operation of FFT\n    fft : function(re, im, inv) {\n      var d, h, ik, m, tmp, wr, wi, xr, xi,\n          n4 = _n >> 2;\n      // bit reversal\n      for(var l=0; l<_n; l++) {\n        m = _bitrev[l];\n        if(l < m) {\n          tmp = re[l];\n          re[l] = re[m];\n          re[m] = tmp;\n          tmp = im[l];\n          im[l] = im[m];\n          im[m] = tmp;\n        }\n      }\n      // butterfly operation\n      for(var k=1; k<_n; k<<=1) {\n        h = 0;\n        d = _n/(k << 1);\n        for(var j=0; j<k; j++) {\n          wr = _cstb[h + n4];\n          wi = inv*_cstb[h];\n          for(var i=j; i<_n; i+=(k<<1)) {\n            ik = i + k;\n            xr = wr*re[ik] + wi*im[ik];\n            xi = wr*im[ik] - wi*re[ik];\n            re[ik] = re[i] - xr;\n            re[i] += xr;\n            im[ik] = im[i] - xi;\n            im[i] += xi;\n          }\n          h += d;\n        }\n      }\n    },\n    // initialize the array (supports TypedArray)\n    _initArray : function() {\n      if(typeof Uint32Array !== 'undefined') {\n        _bitrev = new Uint32Array(_n);\n      } else {\n        _bitrev = [];\n      }\n      if(typeof Float64Array !== 'undefined') {\n        _cstb = new Float64Array(_n*1.25);\n      } else {\n        _cstb = [];\n      }\n    },\n    // zero padding\n    _paddingZero : function() {\n      // TODO\n    },\n    // makes bit reversal table\n    _makeBitReversalTable : function() {\n      var i = 0,\n          j = 0,\n          k = 0;\n      _bitrev[0] = 0;\n      while(++i < _n) {\n        k = _n >> 1;\n        while(k <= j) {\n          j -= k;\n          k >>= 1;\n        }\n        j += k;\n        _bitrev[i] = j;\n      }\n    },\n    // makes trigonometiric function table\n    _makeCosSinTable : function() {\n      var n2 = _n >> 1,\n          n4 = _n >> 2,\n          n8 = _n >> 3,\n          n2p4 = n2 + n4,\n          t = Math.sin(Math.PI/_n),\n          dc = 2*t*t,\n          ds = Math.sqrt(dc*(2 - dc)),\n          c = _cstb[n4] = 1,\n          s = _cstb[0] = 0;\n      t = 2*dc;\n      for(var i=1; i<n8; i++) {\n        c -= dc;\n        dc += t*c;\n        s += ds;\n        ds -= t*s;\n        _cstb[i] = s;\n        _cstb[n4 - i] = c;\n      }\n      if(n8 !== 0) {\n        _cstb[n8] = Math.sqrt(0.5);\n      }\n      for(var j=0; j<n4; j++) {\n        _cstb[n2 - j]  = _cstb[j];\n      }\n      for(var k=0; k<n2p4; k++) {\n        _cstb[k + n2] = -_cstb[k];\n      }\n    }\n  };\n  // aliases (public APIs)\n  var apis = ['init', 'fft1d', 'ifft1d', 'fft2d', 'ifft2d'];\n  for(var i=0; i<apis.length; i++) {\n    FFT[apis[i]] = core[apis[i]];\n  }\n  FFT.bt = core.bt1d;\n  FFT.fft = core.fft1d;\n  FFT.ifft = core.ifft1d;\n  \n  return FFT;\n}).call(this);\n"]},"metadata":{},"sourceType":"script"}