{"ast":null,"code":"// see https://github.com/fiji/Auto_Threshold/blob/master/src/main/java/fiji/threshold/Auto_Threshold.java\n// Implements Yen  thresholding method\n// 1) Yen J.C., Chang F.J., and Chang S. (1995) \"A New Criterion\n//    for Automatic Multilevel Thresholding\" IEEE Trans. on Image\n//    Processing, 4(3): 370-378\n// 2) Sezgin M. and Sankur B. (2004) \"Survey over Image Thresholding\n//    Techniques and Quantitative Performance Evaluation\" Journal of\n//    Electronic Imaging, 13(1): 146-165\n//    http://citeseer.ist.psu.edu/sezgin04survey.html\n//\n// M. Emre Celebi\n// 06.15.2007\n// Ported to ImageJ plugin by G.Landini from E Celebi's fourier_0.8 routines\nexport default function yen(histogram, total) {\n  let normHisto = new Array(histogram.length); // normalized histogram\n\n  for (let ih = 0; ih < histogram.length; ih++) {\n    normHisto[ih] = histogram[ih] / total;\n  }\n\n  let P1 = new Array(histogram.length); // cumulative normalized histogram\n\n  P1[0] = normHisto[0];\n\n  for (let ih = 1; ih < histogram.length; ih++) {\n    P1[ih] = P1[ih - 1] + normHisto[ih];\n  }\n\n  let P1Sq = new Array(histogram.length);\n  P1Sq[0] = normHisto[0] * normHisto[0];\n\n  for (let ih = 1; ih < histogram.length; ih++) {\n    P1Sq[ih] = P1Sq[ih - 1] + normHisto[ih] * normHisto[ih];\n  }\n\n  let P2Sq = new Array(histogram.length);\n  P2Sq[histogram.length - 1] = 0.0;\n\n  for (let ih = histogram.length - 2; ih >= 0; ih--) {\n    P2Sq[ih] = P2Sq[ih + 1] + normHisto[ih + 1] * normHisto[ih + 1];\n  }\n  /* Find the threshold that maximizes the criterion */\n\n\n  let threshold = -1;\n  let maxCrit = Number.MIN_VALUE;\n  let crit;\n\n  for (let it = 0; it < histogram.length; it++) {\n    crit = -1.0 * (P1Sq[it] * P2Sq[it] > 0.0 ? Math.log(P1Sq[it] * P2Sq[it]) : 0.0) + 2 * (P1[it] * (1.0 - P1[it]) > 0.0 ? Math.log(P1[it] * (1.0 - P1[it])) : 0.0);\n\n    if (crit > maxCrit) {\n      maxCrit = crit;\n      threshold = it;\n    }\n  }\n\n  return threshold;\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/node_modules/image-js/src/image/transform/mask/yen.js"],"names":["yen","histogram","total","normHisto","Array","length","ih","P1","P1Sq","P2Sq","threshold","maxCrit","Number","MIN_VALUE","crit","it","Math","log"],"mappings":"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","sourcesContent":["// see https://github.com/fiji/Auto_Threshold/blob/master/src/main/java/fiji/threshold/Auto_Threshold.java\n// Implements Yen  thresholding method\n// 1) Yen J.C., Chang F.J., and Chang S. (1995) \"A New Criterion\n//    for Automatic Multilevel Thresholding\" IEEE Trans. on Image\n//    Processing, 4(3): 370-378\n// 2) Sezgin M. and Sankur B. (2004) \"Survey over Image Thresholding\n//    Techniques and Quantitative Performance Evaluation\" Journal of\n//    Electronic Imaging, 13(1): 146-165\n//    http://citeseer.ist.psu.edu/sezgin04survey.html\n//\n// M. Emre Celebi\n// 06.15.2007\n// Ported to ImageJ plugin by G.Landini from E Celebi's fourier_0.8 routines\n\nexport default function yen(histogram, total) {\n  let normHisto = new Array(histogram.length); // normalized histogram\n  for (let ih = 0; ih < histogram.length; ih++) {\n    normHisto[ih] = histogram[ih] / total;\n  }\n\n  let P1 = new Array(histogram.length); // cumulative normalized histogram\n  P1[0] = normHisto[0];\n  for (let ih = 1; ih < histogram.length; ih++) {\n    P1[ih] = P1[ih - 1] + normHisto[ih];\n  }\n\n  let P1Sq = new Array(histogram.length);\n  P1Sq[0] = normHisto[0] * normHisto[0];\n  for (let ih = 1; ih < histogram.length; ih++) {\n    P1Sq[ih] = P1Sq[ih - 1] + normHisto[ih] * normHisto[ih];\n  }\n\n  let P2Sq = new Array(histogram.length);\n  P2Sq[histogram.length - 1] = 0.0;\n  for (let ih = histogram.length - 2; ih >= 0; ih--) {\n    P2Sq[ih] = P2Sq[ih + 1] + normHisto[ih + 1] * normHisto[ih + 1];\n  }\n\n  /* Find the threshold that maximizes the criterion */\n  let threshold = -1;\n  let maxCrit = Number.MIN_VALUE;\n  let crit;\n  for (let it = 0; it < histogram.length; it++) {\n    crit =\n      -1.0 * (P1Sq[it] * P2Sq[it] > 0.0 ? Math.log(P1Sq[it] * P2Sq[it]) : 0.0) +\n      2 *\n        (P1[it] * (1.0 - P1[it]) > 0.0\n          ? Math.log(P1[it] * (1.0 - P1[it]))\n          : 0.0);\n    if (crit > maxCrit) {\n      maxCrit = crit;\n      threshold = it;\n    }\n  }\n  return threshold;\n}\n"]},"metadata":{},"sourceType":"module"}