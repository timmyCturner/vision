{"ast":null,"code":"// REFERENCES :\n// https://stackoverflow.com/questions/38285229/calculating-aspect-ratio-of-perspective-transform-destination-image/38402378#38402378\n// http://www.corrmap.com/features/homography_transformation.php\n// https://ags.cs.uni-kl.de/fileadmin/inf_ags/3dcv-ws11-12/3DCV_WS11-12_lec04.pdf\n// http://graphics.cs.cmu.edu/courses/15-463/2011_fall/Lectures/morphing.pdf\nimport { Matrix, inverse, SingularValueDecomposition } from 'ml-matrix';\nimport Image from '../Image';\n\nfunction order4Points(pts) {\n  let tl = 0;\n  let tr = 0;\n  let br = 0;\n  let bl = 0;\n  let minX = pts[0][0];\n  let indexMinX = 0;\n\n  for (let i = 1; i < pts.length; i++) {\n    if (pts[i][0] < minX) {\n      minX = pts[i][0];\n      indexMinX = i;\n    }\n  }\n\n  let minX2 = pts[(indexMinX + 1) % pts.length][0];\n  let indexMinX2 = (indexMinX + 1) % pts.length;\n\n  for (let i = 1; i < pts.length; i++) {\n    if (pts[i][0] < minX2 && i !== indexMinX) {\n      minX2 = pts[i][0];\n      indexMinX2 = i;\n    }\n  }\n\n  if (pts[indexMinX2][1] < pts[indexMinX][1]) {\n    tl = pts[indexMinX2];\n    bl = pts[indexMinX];\n\n    if (indexMinX !== (indexMinX2 + 1) % 4) {\n      tr = pts[(indexMinX2 + 1) % 4];\n      br = pts[(indexMinX2 + 2) % 4];\n    } else {\n      tr = pts[(indexMinX2 + 2) % 4];\n      br = pts[(indexMinX2 + 3) % 4];\n    }\n  } else {\n    bl = pts[indexMinX2];\n    tl = pts[indexMinX];\n\n    if (indexMinX2 !== (indexMinX + 1) % 4) {\n      tr = pts[(indexMinX + 1) % 4];\n      br = pts[(indexMinX + 2) % 4];\n    } else {\n      tr = pts[(indexMinX + 2) % 4];\n      br = pts[(indexMinX + 3) % 4];\n    }\n  }\n\n  return [tl, tr, br, bl];\n}\n\nfunction distance2Points(p1, p2) {\n  return Math.sqrt(Math.pow(p1[0] - p2[0], 2) + Math.pow(p1[1] - p2[1], 2));\n}\n\nfunction crossVect(u, v) {\n  let result = [u[1] * v[2] - u[2] * v[1], u[2] * v[0] - u[0] * v[2], u[0] * v[1] - u[1] * v[0]];\n  return result;\n}\n\nfunction dotVect(u, v) {\n  let result = u[0] * v[0] + u[1] * v[1] + u[2] * v[2];\n  return result;\n}\n\nfunction computeWidthAndHeigth(tl, tr, br, bl, widthImage, heightImage) {\n  let w = Math.max(distance2Points(tl, tr), distance2Points(bl, br));\n  let h = Math.max(distance2Points(tl, bl), distance2Points(tr, br));\n  let finalW = 0;\n  let finalH = 0;\n  let u0 = Math.ceil(widthImage / 2);\n  let v0 = Math.ceil(heightImage / 2);\n  let arVis = w / h;\n  let m1 = [tl[0], tl[1], 1];\n  let m2 = [tr[0], tr[1], 1];\n  let m3 = [bl[0], bl[1], 1];\n  let m4 = [br[0], br[1], 1];\n  let k2 = dotVect(crossVect(m1, m4), m3) / dotVect(crossVect(m2, m4), m3);\n  let k3 = dotVect(crossVect(m1, m4), m2) / dotVect(crossVect(m3, m4), m2);\n  let n2 = [k2 * m2[0] - m1[0], k2 * m2[1] - m1[1], k2 * m2[2] - m1[2]];\n  let n3 = [k3 * m3[0] - m1[0], k3 * m3[1] - m1[1], k3 * m3[2] - m1[2]];\n  let n21 = n2[0];\n  let n22 = n2[1];\n  let n23 = n2[2];\n  let n31 = n3[0];\n  let n32 = n3[1];\n  let n33 = n3[2];\n  let f = 1.0 / (n23 * n33) * (n21 * n31 - (n21 * n33 + n23 * n31) * u0 + n23 * n33 * u0 * u0 + (n22 * n32 - (n22 * n33 + n23 * n32) * v0 + n23 * n33 * v0 * v0));\n\n  if (f >= 0) {\n    f = Math.sqrt(f);\n  } else {\n    f = Math.sqrt(-f);\n  }\n\n  let A = new Matrix([[f, 0, u0], [0, f, v0], [0, 0, 1]]);\n  let At = A.transpose();\n  let Ati = inverse(At);\n  let Ai = inverse(A);\n  let n2R = Matrix.rowVector(n2);\n  let n3R = Matrix.rowVector(n3);\n  let arReal = Math.sqrt(dotVect(n2R.mmul(Ati).mmul(Ai).to1DArray(), n2) / dotVect(n3R.mmul(Ati).mmul(Ai).to1DArray(), n3));\n\n  if (arReal === 0 || arVis === 0) {\n    finalW = Math.ceil(w);\n    finalH = Math.ceil(h);\n  } else if (arReal < arVis) {\n    finalW = Math.ceil(w);\n    finalH = Math.ceil(finalW / arReal);\n  } else {\n    finalH = Math.ceil(h);\n    finalW = Math.ceil(arReal * finalH);\n  }\n\n  return [finalW, finalH];\n}\n\nfunction projectionPoint(x, y, a, b, c, d, e, f, g, h, image, channel) {\n  let [newX, newY] = [(a * x + b * y + c) / (g * x + h * y + 1), (d * x + e * y + f) / (g * x + h * y + 1)];\n  return image.getValueXY(Math.floor(newX), Math.floor(newY), channel);\n}\n/**\n * Transform a quadrilateral into a rectangle\n * @memberof Image\n * @instance\n * @param {Array<Array<number>>} [pts] - Array of the four corners.\n * @param {object} [options]\n * @param {boolean} [options.calculateRatio=true] - true if you want to calculate the aspect ratio \"width x height\" by taking the perspectiv into consideration.\n * @return {Image} The new image, which is a rectangle\n * @example\n * var cropped = image.warpingFourPoints({\n *   pts: [[0,0], [100, 0], [80, 50], [10, 50]]\n * });\n */\n\n\nexport default function warpingFourPoints(pts, options = {}) {\n  let {\n    calculateRatio = true\n  } = options;\n\n  if (pts.length !== 4) {\n    throw new Error(`The array pts must have four elements, which are the four corners. Currently, pts have ${pts.length} elements`);\n  }\n\n  let [pt1, pt2, pt3, pt4] = pts;\n  let quadrilaterial = [pt1, pt2, pt3, pt4];\n  let [tl, tr, br, bl] = order4Points(quadrilaterial);\n  let widthRect;\n  let heightRect;\n\n  if (calculateRatio) {\n    [widthRect, heightRect] = computeWidthAndHeigth(tl, tr, br, bl, this.width, this.height);\n  } else {\n    widthRect = Math.ceil(Math.max(distance2Points(tl, tr), distance2Points(bl, br)));\n    heightRect = Math.ceil(Math.max(distance2Points(tl, bl), distance2Points(tr, br)));\n  }\n\n  let newImage = Image.createFrom(this, {\n    width: widthRect,\n    height: heightRect\n  });\n  let [X1, Y1] = tl;\n  let [X2, Y2] = tr;\n  let [X3, Y3] = br;\n  let [X4, Y4] = bl;\n  let [x1, y1] = [0, 0];\n  let [x2, y2] = [0, widthRect - 1];\n  let [x3, y3] = [heightRect - 1, widthRect - 1];\n  let [x4, y4] = [heightRect - 1, 0];\n  let S = new Matrix([[x1, y1, 1, 0, 0, 0, -x1 * X1, -y1 * X1], [x2, y2, 1, 0, 0, 0, -x2 * X2, -y2 * X2], [x3, y3, 1, 0, 0, 0, -x3 * X3, -y1 * X3], [x4, y4, 1, 0, 0, 0, -x4 * X4, -y4 * X4], [0, 0, 0, x1, y1, 1, -x1 * Y1, -y1 * Y1], [0, 0, 0, x2, y2, 1, -x2 * Y2, -y2 * Y2], [0, 0, 0, x3, y3, 1, -x3 * Y3, -y3 * Y3], [0, 0, 0, x4, y4, 1, -x4 * Y4, -y4 * Y4]]);\n  let D = Matrix.columnVector([X1, X2, X3, X4, Y1, Y2, Y3, Y4]);\n  let svd = new SingularValueDecomposition(S);\n  let T = svd.solve(D); // solve S*T = D\n\n  let [a, b, c, d, e, f, g, h] = T.to1DArray();\n  let Xt = new Matrix(heightRect, widthRect);\n\n  for (let channel = 0; channel < this.channels; channel++) {\n    for (let i = 0; i < heightRect; i++) {\n      for (let j = 0; j < widthRect; j++) {\n        Xt.set(i, j, projectionPoint(i, j, a, b, c, d, e, f, g, h, this, channel));\n      }\n    }\n\n    newImage.setMatrix(Xt, {\n      channel: channel\n    });\n  }\n\n  return newImage;\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/node_modules/image-js/src/image/transform/warping.js"],"names":["Matrix","inverse","SingularValueDecomposition","Image","order4Points","pts","tl","tr","br","bl","minX","indexMinX","i","length","minX2","indexMinX2","distance2Points","p1","p2","Math","sqrt","pow","crossVect","u","v","result","dotVect","computeWidthAndHeigth","widthImage","heightImage","w","max","h","finalW","finalH","u0","ceil","v0","arVis","m1","m2","m3","m4","k2","k3","n2","n3","n21","n22","n23","n31","n32","n33","f","A","At","transpose","Ati","Ai","n2R","rowVector","n3R","arReal","mmul","to1DArray","projectionPoint","x","y","a","b","c","d","e","g","image","channel","newX","newY","getValueXY","floor","warpingFourPoints","options","calculateRatio","Error","pt1","pt2","pt3","pt4","quadrilaterial","widthRect","heightRect","width","height","newImage","createFrom","X1","Y1","X2","Y2","X3","Y3","X4","Y4","x1","y1","x2","y2","x3","y3","x4","y4","S","D","columnVector","svd","T","solve","Xt","channels","j","set","setMatrix"],"mappings":"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","sourcesContent":["// REFERENCES :\n// https://stackoverflow.com/questions/38285229/calculating-aspect-ratio-of-perspective-transform-destination-image/38402378#38402378\n// http://www.corrmap.com/features/homography_transformation.php\n// https://ags.cs.uni-kl.de/fileadmin/inf_ags/3dcv-ws11-12/3DCV_WS11-12_lec04.pdf\n// http://graphics.cs.cmu.edu/courses/15-463/2011_fall/Lectures/morphing.pdf\n\nimport { Matrix, inverse, SingularValueDecomposition } from 'ml-matrix';\n\nimport Image from '../Image';\n\nfunction order4Points(pts) {\n  let tl = 0;\n  let tr = 0;\n  let br = 0;\n  let bl = 0;\n\n  let minX = pts[0][0];\n  let indexMinX = 0;\n\n  for (let i = 1; i < pts.length; i++) {\n    if (pts[i][0] < minX) {\n      minX = pts[i][0];\n      indexMinX = i;\n    }\n  }\n\n  let minX2 = pts[(indexMinX + 1) % pts.length][0];\n  let indexMinX2 = (indexMinX + 1) % pts.length;\n\n  for (let i = 1; i < pts.length; i++) {\n    if (pts[i][0] < minX2 && i !== indexMinX) {\n      minX2 = pts[i][0];\n      indexMinX2 = i;\n    }\n  }\n\n  if (pts[indexMinX2][1] < pts[indexMinX][1]) {\n    tl = pts[indexMinX2];\n    bl = pts[indexMinX];\n    if (indexMinX !== (indexMinX2 + 1) % 4) {\n      tr = pts[(indexMinX2 + 1) % 4];\n      br = pts[(indexMinX2 + 2) % 4];\n    } else {\n      tr = pts[(indexMinX2 + 2) % 4];\n      br = pts[(indexMinX2 + 3) % 4];\n    }\n  } else {\n    bl = pts[indexMinX2];\n    tl = pts[indexMinX];\n    if (indexMinX2 !== (indexMinX + 1) % 4) {\n      tr = pts[(indexMinX + 1) % 4];\n      br = pts[(indexMinX + 2) % 4];\n    } else {\n      tr = pts[(indexMinX + 2) % 4];\n      br = pts[(indexMinX + 3) % 4];\n    }\n  }\n\n  return [tl, tr, br, bl];\n}\n\nfunction distance2Points(p1, p2) {\n  return Math.sqrt(Math.pow(p1[0] - p2[0], 2) + Math.pow(p1[1] - p2[1], 2));\n}\n\nfunction crossVect(u, v) {\n  let result = [\n    u[1] * v[2] - u[2] * v[1],\n    u[2] * v[0] - u[0] * v[2],\n    u[0] * v[1] - u[1] * v[0],\n  ];\n  return result;\n}\n\nfunction dotVect(u, v) {\n  let result = u[0] * v[0] + u[1] * v[1] + u[2] * v[2];\n  return result;\n}\n\nfunction computeWidthAndHeigth(tl, tr, br, bl, widthImage, heightImage) {\n  let w = Math.max(distance2Points(tl, tr), distance2Points(bl, br));\n  let h = Math.max(distance2Points(tl, bl), distance2Points(tr, br));\n  let finalW = 0;\n  let finalH = 0;\n  let u0 = Math.ceil(widthImage / 2);\n  let v0 = Math.ceil(heightImage / 2);\n  let arVis = w / h;\n\n  let m1 = [tl[0], tl[1], 1];\n  let m2 = [tr[0], tr[1], 1];\n  let m3 = [bl[0], bl[1], 1];\n  let m4 = [br[0], br[1], 1];\n\n  let k2 = dotVect(crossVect(m1, m4), m3) / dotVect(crossVect(m2, m4), m3);\n  let k3 = dotVect(crossVect(m1, m4), m2) / dotVect(crossVect(m3, m4), m2);\n\n  let n2 = [k2 * m2[0] - m1[0], k2 * m2[1] - m1[1], k2 * m2[2] - m1[2]];\n  let n3 = [k3 * m3[0] - m1[0], k3 * m3[1] - m1[1], k3 * m3[2] - m1[2]];\n\n  let n21 = n2[0];\n  let n22 = n2[1];\n  let n23 = n2[2];\n\n  let n31 = n3[0];\n  let n32 = n3[1];\n  let n33 = n3[2];\n\n  let f =\n    (1.0 / (n23 * n33)) *\n    (n21 * n31 -\n      (n21 * n33 + n23 * n31) * u0 +\n      n23 * n33 * u0 * u0 +\n      (n22 * n32 - (n22 * n33 + n23 * n32) * v0 + n23 * n33 * v0 * v0));\n  if (f >= 0) {\n    f = Math.sqrt(f);\n  } else {\n    f = Math.sqrt(-f);\n  }\n\n  let A = new Matrix([\n    [f, 0, u0],\n    [0, f, v0],\n    [0, 0, 1],\n  ]);\n  let At = A.transpose();\n  let Ati = inverse(At);\n  let Ai = inverse(A);\n\n  let n2R = Matrix.rowVector(n2);\n  let n3R = Matrix.rowVector(n3);\n\n  let arReal = Math.sqrt(\n    dotVect(n2R.mmul(Ati).mmul(Ai).to1DArray(), n2) /\n      dotVect(n3R.mmul(Ati).mmul(Ai).to1DArray(), n3),\n  );\n\n  if (arReal === 0 || arVis === 0) {\n    finalW = Math.ceil(w);\n    finalH = Math.ceil(h);\n  } else if (arReal < arVis) {\n    finalW = Math.ceil(w);\n    finalH = Math.ceil(finalW / arReal);\n  } else {\n    finalH = Math.ceil(h);\n    finalW = Math.ceil(arReal * finalH);\n  }\n  return [finalW, finalH];\n}\n\nfunction projectionPoint(x, y, a, b, c, d, e, f, g, h, image, channel) {\n  let [newX, newY] = [\n    (a * x + b * y + c) / (g * x + h * y + 1),\n    (d * x + e * y + f) / (g * x + h * y + 1),\n  ];\n  return image.getValueXY(Math.floor(newX), Math.floor(newY), channel);\n}\n\n/**\n * Transform a quadrilateral into a rectangle\n * @memberof Image\n * @instance\n * @param {Array<Array<number>>} [pts] - Array of the four corners.\n * @param {object} [options]\n * @param {boolean} [options.calculateRatio=true] - true if you want to calculate the aspect ratio \"width x height\" by taking the perspectiv into consideration.\n * @return {Image} The new image, which is a rectangle\n * @example\n * var cropped = image.warpingFourPoints({\n *   pts: [[0,0], [100, 0], [80, 50], [10, 50]]\n * });\n */\n\nexport default function warpingFourPoints(pts, options = {}) {\n  let { calculateRatio = true } = options;\n\n  if (pts.length !== 4) {\n    throw new Error(\n      `The array pts must have four elements, which are the four corners. Currently, pts have ${pts.length} elements`,\n    );\n  }\n\n  let [pt1, pt2, pt3, pt4] = pts;\n\n  let quadrilaterial = [pt1, pt2, pt3, pt4];\n  let [tl, tr, br, bl] = order4Points(quadrilaterial);\n  let widthRect;\n  let heightRect;\n  if (calculateRatio) {\n    [widthRect, heightRect] = computeWidthAndHeigth(\n      tl,\n      tr,\n      br,\n      bl,\n      this.width,\n      this.height,\n    );\n  } else {\n    widthRect = Math.ceil(\n      Math.max(distance2Points(tl, tr), distance2Points(bl, br)),\n    );\n    heightRect = Math.ceil(\n      Math.max(distance2Points(tl, bl), distance2Points(tr, br)),\n    );\n  }\n  let newImage = Image.createFrom(this, {\n    width: widthRect,\n    height: heightRect,\n  });\n\n  let [X1, Y1] = tl;\n  let [X2, Y2] = tr;\n  let [X3, Y3] = br;\n  let [X4, Y4] = bl;\n  let [x1, y1] = [0, 0];\n  let [x2, y2] = [0, widthRect - 1];\n  let [x3, y3] = [heightRect - 1, widthRect - 1];\n  let [x4, y4] = [heightRect - 1, 0];\n\n  let S = new Matrix([\n    [x1, y1, 1, 0, 0, 0, -x1 * X1, -y1 * X1],\n    [x2, y2, 1, 0, 0, 0, -x2 * X2, -y2 * X2],\n    [x3, y3, 1, 0, 0, 0, -x3 * X3, -y1 * X3],\n    [x4, y4, 1, 0, 0, 0, -x4 * X4, -y4 * X4],\n    [0, 0, 0, x1, y1, 1, -x1 * Y1, -y1 * Y1],\n    [0, 0, 0, x2, y2, 1, -x2 * Y2, -y2 * Y2],\n    [0, 0, 0, x3, y3, 1, -x3 * Y3, -y3 * Y3],\n    [0, 0, 0, x4, y4, 1, -x4 * Y4, -y4 * Y4],\n  ]);\n\n  let D = Matrix.columnVector([X1, X2, X3, X4, Y1, Y2, Y3, Y4]);\n\n  let svd = new SingularValueDecomposition(S);\n  let T = svd.solve(D); // solve S*T = D\n  let [a, b, c, d, e, f, g, h] = T.to1DArray();\n\n  let Xt = new Matrix(heightRect, widthRect);\n\n  for (let channel = 0; channel < this.channels; channel++) {\n    for (let i = 0; i < heightRect; i++) {\n      for (let j = 0; j < widthRect; j++) {\n        Xt.set(\n          i,\n          j,\n          projectionPoint(i, j, a, b, c, d, e, f, g, h, this, channel),\n        );\n      }\n    }\n    newImage.setMatrix(Xt, { channel: channel });\n  }\n\n  return newImage;\n}\n"]},"metadata":{},"sourceType":"module"}