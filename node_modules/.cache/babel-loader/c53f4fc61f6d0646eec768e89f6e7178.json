{"ast":null,"code":"export default function plastic(p) {\n  let canvas; //these are gonna be the variables for our garbage collection\n\n  let plastic_array_2050;\n  let current_plastic_values;\n  var plastic_image_array = new Array(p.floor(200)); //these are all variables for our wave function\n\n  let xspacing = 16; // Distance between each horizontal location\n\n  let w; // Width of entire wave\n\n  let theta = 0.15; // Start angle at 0\n\n  let amplitude = 25.0; // Height of wave\n\n  let period = 200.0; // How many pixels before the wave repeats\n\n  let dx = 2; // Value for incrementing x\n\n  let yvalues; // Using an array to store height values for the wave\n\n  let backvalues;\n  let back = 2; // back offset\n\n  p.preload = () => {\n    let i = 0;\n    console.log(p.loadImage('src/plastic_images/bottle1.png'));\n    plastic_image_array[i] = p.loadImage('src/plastic_images/bottle1.png');\n  };\n\n  p.setup = () => {\n    canvas = p.createCanvas(600, 300); //set up wave\n\n    w = p.width + 16;\n    dx = 2 * Math.PI / period * xspacing;\n    yvalues = new Array(p.floor(w / xspacing));\n    backvalues = new Array(p.floor(w / xspacing)); //set up plastic\n    //load plastic images into Array\n\n    plastic_image_array = [];\n  };\n\n  p.draw = () => {\n    p.background('blue');\n    p.drawPlastic(); //draw wave\n\n    p.calcWave();\n    p.renderWave();\n    p.backWave();\n  }; //\n  //\n  //\n  //hear lies al information on how to create plastic\n  //\n  //\n  //\n\n\n  p.showPlasticBottle = () => {\n    let i = 1;\n    p.noStroke();\n    plastic_image_array[i].get(60, 90);\n    p.fill(plastic_image_array[0].get(60, 90));\n    p.rect(25, 25, 50, 50);\n  };\n\n  p.calcPlastic = () => {\n    //console.log(temp_array)\n    if (plastic_array_2050 != null) {\n      for (let i = 0; i < plastic_array_2050.length; i++) {\n        var amount = parseFloat(plastic_array_2050[i].station); // + parseFloat(temp_array[i*8].land))/2);\n        //console.log(typeof average);\n\n        current_plastic_values[i] = 400 - amount; //console.log(average);\n      } //console.log(typeof temp_array[200]);\n\n    }\n  }; //\n  //\n  //\n  //hear lies al information on how to create a wave\n  //\n  //\n  //\n\n\n  p.calcWave = () => {\n    // Increment theta (try different values for\n    // 'angular velocity' here)\n    theta += 0.02; // For every x value, calculate a y value with sine function\n\n    let x = theta;\n\n    for (let i = 0; i < yvalues.length; i++) {\n      yvalues[i] = Math.sin(x) * amplitude;\n      backvalues[i] = Math.sin(x + back) * amplitude;\n      x += dx;\n    }\n  };\n\n  p.renderWave = () => {\n    p.noStroke();\n    p.fill(37, 207, 122); // A simple way to draw the wave with an ellipse at each location\n\n    for (let x = 0; x < yvalues.length; x++) {\n      var waveHeight = 4 * p.height / 8 + yvalues[x];\n      p.ellipse(x * xspacing, p.height, 64, waveHeight);\n    }\n  };\n\n  p.backWave = () => {\n    p.noStroke();\n    p.fill(19, 149, 244); // A simple way to draw the wave with an ellipse at each location\n\n    for (let x = 0; x < backvalues.length; x++) {\n      var waveHeight = 4 * p.height / 8 + backvalues[x];\n      p.ellipse(x * xspacing, p.height, 64, waveHeight);\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/src/sketches/plastic.js"],"names":["plastic","p","canvas","plastic_array_2050","current_plastic_values","plastic_image_array","Array","floor","xspacing","w","theta","amplitude","period","dx","yvalues","backvalues","back","preload","i","console","log","loadImage","setup","createCanvas","width","Math","PI","draw","background","drawPlastic","calcWave","renderWave","backWave","showPlasticBottle","noStroke","get","fill","rect","calcPlastic","length","amount","parseFloat","station","x","sin","waveHeight","height","ellipse"],"mappings":"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","sourcesContent":["\r\n\r\n\r\nexport default function plastic(p) {\r\n\r\n  let canvas;\r\n  //these are gonna be the variables for our garbage collection\r\n  let plastic_array_2050;\r\n  let current_plastic_values;\r\n  var plastic_image_array = new Array(p.floor(200));\r\n\r\n  //these are all variables for our wave function\r\n  let xspacing = 16; // Distance between each horizontal location\r\n  let w; // Width of entire wave\r\n  let theta = 0.15; // Start angle at 0\r\n  let amplitude = 25.0; // Height of wave\r\n  let period = 200.0; // How many pixels before the wave repeats\r\n  let dx=2; // Value for incrementing x\r\n  let yvalues; // Using an array to store height values for the wave\r\n  let backvalues;\r\n  let back = 2 // back offset\r\n\r\n  p.preload = () => {\r\n    let i = 0;\r\n    console.log(p.loadImage('src/plastic_images/bottle1.png'));\r\n    plastic_image_array[i] = p.loadImage('src/plastic_images/bottle1.png');\r\n  }\r\n  p.setup = () => {\r\n    canvas = p.createCanvas(600, 300);\r\n    //set up wave\r\n    w = p.width + 16;\r\n    dx = (2*Math.PI / period) * xspacing;\r\n    yvalues = new Array(p.floor(w / xspacing));\r\n    backvalues = new Array(p.floor(w / xspacing));\r\n\r\n    //set up plastic\r\n\r\n    //load plastic images into Array\r\n    plastic_image_array= []\r\n\r\n  }\r\n  p.draw = () => {\r\n    p.background('blue');\r\n    p.drawPlastic();\r\n    //draw wave\r\n    p.calcWave();\r\n    p.renderWave();\r\n    p.backWave();\r\n  }\r\n  //\r\n  //\r\n  //\r\n  //hear lies al information on how to create plastic\r\n  //\r\n  //\r\n  //\r\n\r\n\r\n  p.showPlasticBottle = () => {\r\n    let i = 1;\r\n    p.noStroke();\r\n    plastic_image_array[i].get(60, 90);\r\n    p.fill(plastic_image_array[0].get(60, 90));\r\n    p.rect(25, 25, 50, 50);\r\n  }\r\n  p.calcPlastic= () => {\r\n\r\n    //console.log(temp_array)\r\n    if (plastic_array_2050 != null){\r\n      for (let i = 0; i < (plastic_array_2050.length); i++) {\r\n\r\n        var amount = parseFloat(plastic_array_2050[i].station)// + parseFloat(temp_array[i*8].land))/2);\r\n        //console.log(typeof average);\r\n        current_plastic_values[i] = 400-amount;\r\n        //console.log(average);\r\n      }\r\n      //console.log(typeof temp_array[200]);\r\n    }\r\n  }\r\n  //\r\n  //\r\n  //\r\n  //hear lies al information on how to create a wave\r\n  //\r\n  //\r\n  //\r\n  p.calcWave= () =>  {\r\n    // Increment theta (try different values for\r\n    // 'angular velocity' here)\r\n    theta += 0.02;\r\n\r\n    // For every x value, calculate a y value with sine function\r\n    let x = theta;\r\n    for (let i = 0; i < yvalues.length; i++) {\r\n\r\n      yvalues[i] = Math.sin(x) * amplitude;\r\n      backvalues[i] = Math.sin(x+back) * amplitude;\r\n      x += dx;\r\n    }\r\n  }\r\n  p.renderWave = () => {\r\n    p.noStroke();\r\n    p.fill(37, 207, 122);\r\n    // A simple way to draw the wave with an ellipse at each location\r\n    for (let x = 0; x < yvalues.length; x++) {\r\n      var waveHeight = 4*p.height / 8 + yvalues[x]\r\n      p.ellipse((x) * xspacing, p.height, 64,waveHeight);\r\n\r\n    }\r\n  }\r\n  p.backWave = () => {\r\n    p.noStroke();\r\n    p.fill(19, 149, 244);\r\n    // A simple way to draw the wave with an ellipse at each location\r\n    for (let x = 0; x < backvalues.length; x++) {\r\n      var waveHeight = 4*p.height / 8 + backvalues[x]\r\n      p.ellipse((x) * xspacing, p.height, 64,waveHeight);\r\n\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}