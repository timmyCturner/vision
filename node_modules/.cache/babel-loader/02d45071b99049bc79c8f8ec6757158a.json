{"ast":null,"code":"export default function wave(p) {\n  let canvas;\n  let xspacing = 16; // Distance between each horizontal location\n\n  let w; // Width of entire wave\n\n  let theta = 0.0; // Start angle at 0\n\n  let amplitude = 75.0; // Height of wave\n\n  let period = 500.0; // How many pixels before the wave repeats\n\n  let dx; // Value for incrementing x\n\n  let yvalues; // Using an array to store height values for the wave\n\n  function setup() {\n    createCanvas(710, 400);\n    w = width + 16;\n    dx = TWO_PI / period * xspacing;\n    yvalues = new Array(floor(w / xspacing));\n  }\n\n  function draw() {\n    background(0);\n    calcWave();\n    renderWave();\n  }\n\n  function calcWave() {\n    // Increment theta (try different values for\n    // 'angular velocity' here)\n    theta += 0.02; // For every x value, calculate a y value with sine function\n\n    let x = theta;\n\n    for (let i = 0; i < yvalues.length; i++) {\n      yvalues[i] = sin(x) * amplitude;\n      x += dx;\n    }\n  }\n\n  function renderWave() {\n    noStroke();\n    fill(255); // A simple way to draw the wave with an ellipse at each location\n\n    for (let x = 0; x < yvalues.length; x++) {\n      ellipse(x * xspacing, height / 2 + yvalues[x], 16, 16);\n    }\n  }\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/samiea.github.io/react-deploy/src/sketches/wave.js"],"names":["wave","p","canvas","xspacing","w","theta","amplitude","period","dx","yvalues","setup","createCanvas","width","TWO_PI","Array","floor","draw","background","calcWave","renderWave","x","i","length","sin","noStroke","fill","ellipse","height"],"mappings":"AAAA,eAAe,SAASA,IAAT,CAAcC,CAAd,EAAiB;AAE9B,MAAIC,MAAJ;AAEA,MAAIC,QAAQ,GAAG,EAAf,CAJ8B,CAIX;;AACnB,MAAIC,CAAJ,CAL8B,CAKvB;;AACP,MAAIC,KAAK,GAAG,GAAZ,CAN8B,CAMb;;AACjB,MAAIC,SAAS,GAAG,IAAhB,CAP8B,CAOR;;AACtB,MAAIC,MAAM,GAAG,KAAb,CAR8B,CAQV;;AACpB,MAAIC,EAAJ,CAT8B,CAStB;;AACR,MAAIC,OAAJ,CAV8B,CAUjB;;AAEb,WAASC,KAAT,GAAiB;AACfC,IAAAA,YAAY,CAAC,GAAD,EAAM,GAAN,CAAZ;AACAP,IAAAA,CAAC,GAAGQ,KAAK,GAAG,EAAZ;AACAJ,IAAAA,EAAE,GAAIK,MAAM,GAAGN,MAAV,GAAoBJ,QAAzB;AACAM,IAAAA,OAAO,GAAG,IAAIK,KAAJ,CAAUC,KAAK,CAACX,CAAC,GAAGD,QAAL,CAAf,CAAV;AACD;;AACD,WAASa,IAAT,GAAgB;AACdC,IAAAA,UAAU,CAAC,CAAD,CAAV;AACAC,IAAAA,QAAQ;AACRC,IAAAA,UAAU;AACX;;AAED,WAASD,QAAT,GAAoB;AAClB;AACA;AACAb,IAAAA,KAAK,IAAI,IAAT,CAHkB,CAKlB;;AACA,QAAIe,CAAC,GAAGf,KAAR;;AACA,SAAK,IAAIgB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,OAAO,CAACa,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACvCZ,MAAAA,OAAO,CAACY,CAAD,CAAP,GAAaE,GAAG,CAACH,CAAD,CAAH,GAASd,SAAtB;AACAc,MAAAA,CAAC,IAAIZ,EAAL;AACD;AACF;;AACD,WAASW,UAAT,GAAsB;AACpBK,IAAAA,QAAQ;AACRC,IAAAA,IAAI,CAAC,GAAD,CAAJ,CAFoB,CAGpB;;AACA,SAAK,IAAIL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,OAAO,CAACa,MAA5B,EAAoCF,CAAC,EAArC,EAAyC;AACvCM,MAAAA,OAAO,CAACN,CAAC,GAAGjB,QAAL,EAAewB,MAAM,GAAG,CAAT,GAAalB,OAAO,CAACW,CAAD,CAAnC,EAAwC,EAAxC,EAA4C,EAA5C,CAAP;AACD;AACF;AACF","sourcesContent":["export default function wave(p) {\r\n\r\n  let canvas;\r\n  \r\n  let xspacing = 16; // Distance between each horizontal location\r\n  let w; // Width of entire wave\r\n  let theta = 0.0; // Start angle at 0\r\n  let amplitude = 75.0; // Height of wave\r\n  let period = 500.0; // How many pixels before the wave repeats\r\n  let dx; // Value for incrementing x\r\n  let yvalues; // Using an array to store height values for the wave\r\n\r\n  function setup() {\r\n    createCanvas(710, 400);\r\n    w = width + 16;\r\n    dx = (TWO_PI / period) * xspacing;\r\n    yvalues = new Array(floor(w / xspacing));\r\n  }\r\n  function draw() {\r\n    background(0);\r\n    calcWave();\r\n    renderWave();\r\n  }\r\n\r\n  function calcWave() {\r\n    // Increment theta (try different values for\r\n    // 'angular velocity' here)\r\n    theta += 0.02;\r\n\r\n    // For every x value, calculate a y value with sine function\r\n    let x = theta;\r\n    for (let i = 0; i < yvalues.length; i++) {\r\n      yvalues[i] = sin(x) * amplitude;\r\n      x += dx;\r\n    }\r\n  }\r\n  function renderWave() {\r\n    noStroke();\r\n    fill(255);\r\n    // A simple way to draw the wave with an ellipse at each location\r\n    for (let x = 0; x < yvalues.length; x++) {\r\n      ellipse(x * xspacing, height / 2 + yvalues[x], 16, 16);\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}