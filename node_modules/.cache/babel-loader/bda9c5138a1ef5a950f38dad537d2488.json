{"ast":null,"code":"import Image from '../Image';\n/**\n * Change the image color depth.\n * The color depth is the number of bits that is assigned to each point of a channel.\n * For normal images it is 8 bits meaning the value is between 0 and 255.\n * Currently only conversion from 1, 8 or 16 bits towards 8 or 16 bits are allowed.\n * @memberof Image\n * @instance\n * @param {number} [newColorDepth=8]\n * @return {Image} The new image\n * @example\n * var newImage = image.colorDepth(8);\n */\n\nexport default function colorDepth(newColorDepth = 8) {\n  this.checkProcessable('colorDepth', {\n    bitDepth: [1, 8, 16]\n  });\n\n  if (![8, 16].includes(newColorDepth)) {\n    throw Error('You need to specify the new colorDepth as 8 or 16');\n  }\n\n  if (this.bitDepth === newColorDepth) {\n    return this.clone();\n  }\n\n  let newImage = Image.createFrom(this, {\n    bitDepth: newColorDepth\n  });\n\n  switch (newColorDepth) {\n    case 8:\n      if (this.bitDepth === 1) {\n        for (let i = 0; i < this.size; i++) {\n          if (this.getBit(i)) {\n            newImage.data[i] = 255;\n          }\n        }\n      } else {\n        for (let i = 0; i < this.data.length; i++) {\n          newImage.data[i] = this.data[i] >> 8;\n        }\n      }\n\n      break;\n\n    case 16:\n      if (this.bitDepth === 1) {\n        for (let i = 0; i < this.size; i++) {\n          if (this.getBit(i)) {\n            newImage.data[i] = 65535;\n          }\n        }\n      } else {\n        for (let i = 0; i < this.data.length; i++) {\n          newImage.data[i] = this.data[i] << 8 | this.data[i];\n        }\n      }\n\n      break;\n\n    default:\n      throw new Error('colorDepth conversion unexpected case');\n  }\n\n  return newImage;\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/node_modules/image-js/src/image/transform/colorDepth.js"],"names":["Image","colorDepth","newColorDepth","checkProcessable","bitDepth","includes","Error","clone","newImage","createFrom","i","size","getBit","data","length"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,UAAlB;AAEA;;;;;;;;;;;;;AAYA,eAAe,SAASC,UAAT,CAAoBC,aAAa,GAAG,CAApC,EAAuC;AACpD,OAAKC,gBAAL,CAAsB,YAAtB,EAAoC;AAClCC,IAAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,EAAP;AADwB,GAApC;;AAIA,MAAI,CAAC,CAAC,CAAD,EAAI,EAAJ,EAAQC,QAAR,CAAiBH,aAAjB,CAAL,EAAsC;AACpC,UAAMI,KAAK,CAAC,mDAAD,CAAX;AACD;;AAED,MAAI,KAAKF,QAAL,KAAkBF,aAAtB,EAAqC;AACnC,WAAO,KAAKK,KAAL,EAAP;AACD;;AAED,MAAIC,QAAQ,GAAGR,KAAK,CAACS,UAAN,CAAiB,IAAjB,EAAuB;AAAEL,IAAAA,QAAQ,EAAEF;AAAZ,GAAvB,CAAf;;AAEA,UAAQA,aAAR;AACE,SAAK,CAAL;AACE,UAAI,KAAKE,QAAL,KAAkB,CAAtB,EAAyB;AACvB,aAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,IAAzB,EAA+BD,CAAC,EAAhC,EAAoC;AAClC,cAAI,KAAKE,MAAL,CAAYF,CAAZ,CAAJ,EAAoB;AAClBF,YAAAA,QAAQ,CAACK,IAAT,CAAcH,CAAd,IAAmB,GAAnB;AACD;AACF;AACF,OAND,MAMO;AACL,aAAK,IAAIA,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKG,IAAL,CAAUC,MAA9B,EAAsCJ,CAAC,EAAvC,EAA2C;AACzCF,UAAAA,QAAQ,CAACK,IAAT,CAAcH,CAAd,IAAmB,KAAKG,IAAL,CAAUH,CAAV,KAAgB,CAAnC;AACD;AACF;;AACD;;AACF,SAAK,EAAL;AACE,UAAI,KAAKN,QAAL,KAAkB,CAAtB,EAAyB;AACvB,aAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,IAAzB,EAA+BD,CAAC,EAAhC,EAAoC;AAClC,cAAI,KAAKE,MAAL,CAAYF,CAAZ,CAAJ,EAAoB;AAClBF,YAAAA,QAAQ,CAACK,IAAT,CAAcH,CAAd,IAAmB,KAAnB;AACD;AACF;AACF,OAND,MAMO;AACL,aAAK,IAAIA,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKG,IAAL,CAAUC,MAA9B,EAAsCJ,CAAC,EAAvC,EAA2C;AACzCF,UAAAA,QAAQ,CAACK,IAAT,CAAcH,CAAd,IAAoB,KAAKG,IAAL,CAAUH,CAAV,KAAgB,CAAjB,GAAsB,KAAKG,IAAL,CAAUH,CAAV,CAAzC;AACD;AACF;;AACD;;AACF;AACE,YAAM,IAAIJ,KAAJ,CAAU,uCAAV,CAAN;AA5BJ;;AA8BA,SAAOE,QAAP;AACD","sourcesContent":["import Image from '../Image';\n\n/**\n * Change the image color depth.\n * The color depth is the number of bits that is assigned to each point of a channel.\n * For normal images it is 8 bits meaning the value is between 0 and 255.\n * Currently only conversion from 1, 8 or 16 bits towards 8 or 16 bits are allowed.\n * @memberof Image\n * @instance\n * @param {number} [newColorDepth=8]\n * @return {Image} The new image\n * @example\n * var newImage = image.colorDepth(8);\n */\nexport default function colorDepth(newColorDepth = 8) {\n  this.checkProcessable('colorDepth', {\n    bitDepth: [1, 8, 16],\n  });\n\n  if (![8, 16].includes(newColorDepth)) {\n    throw Error('You need to specify the new colorDepth as 8 or 16');\n  }\n\n  if (this.bitDepth === newColorDepth) {\n    return this.clone();\n  }\n\n  let newImage = Image.createFrom(this, { bitDepth: newColorDepth });\n\n  switch (newColorDepth) {\n    case 8:\n      if (this.bitDepth === 1) {\n        for (let i = 0; i < this.size; i++) {\n          if (this.getBit(i)) {\n            newImage.data[i] = 255;\n          }\n        }\n      } else {\n        for (let i = 0; i < this.data.length; i++) {\n          newImage.data[i] = this.data[i] >> 8;\n        }\n      }\n      break;\n    case 16:\n      if (this.bitDepth === 1) {\n        for (let i = 0; i < this.size; i++) {\n          if (this.getBit(i)) {\n            newImage.data[i] = 65535;\n          }\n        }\n      } else {\n        for (let i = 0; i < this.data.length; i++) {\n          newImage.data[i] = (this.data[i] << 8) | this.data[i];\n        }\n      }\n      break;\n    default:\n      throw new Error('colorDepth conversion unexpected case');\n  }\n  return newImage;\n}\n"]},"metadata":{},"sourceType":"module"}