{"ast":null,"code":"// http://www.easyrgb.com/index.php?X=MATH&H=18#text18\n// check rgbToHsl : https://bgrins.github.io/TinyColor/docs/tinycolor.html\nimport Image from '../Image';\nimport { RGB, CMYK } from '../model/model';\n/**\n * Make a copy of the current image and convert the color model to CMYK\n * The source image has to be RGB !\n * @memberof Image\n * @instance\n * @return {Image} - New image in CMYK color model\n * @example\n * var cmykImage = image.cmyk();\n * // we can create one image per channel\n * var channels = cmykImage.split();\n */\n\nexport default function cmyk() {\n  this.checkProcessable('cmyk', {\n    bitDepth: [8, 16],\n    alpha: [0, 1],\n    colorModel: [RGB]\n  });\n  let newImage = Image.createFrom(this, {\n    components: 4,\n    colorModel: CMYK\n  });\n  let ptr = 0;\n  let data = this.data;\n\n  for (let i = 0; i < data.length; i += this.channels) {\n    let red = data[i];\n    let green = data[i + 1];\n    let blue = data[i + 2];\n    let black = Math.min(this.maxValue - red, this.maxValue - green, this.maxValue - blue);\n    let cyan = (this.maxValue - red - black) / (1 - black / this.maxValue);\n    let magenta = (this.maxValue - green - black) / (1 - black / this.maxValue);\n    let yellow = (this.maxValue - blue - black) / (1 - black / this.maxValue);\n    newImage.data[ptr++] = Math.round(cyan);\n    newImage.data[ptr++] = Math.round(magenta);\n    newImage.data[ptr++] = Math.round(yellow);\n    newImage.data[ptr++] = Math.round(black);\n\n    if (this.alpha) {\n      newImage.data[ptr++] = data[i + 3];\n    }\n  }\n\n  return newImage;\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/node_modules/image-js/src/image/transform/cmyk.js"],"names":["Image","RGB","CMYK","cmyk","checkProcessable","bitDepth","alpha","colorModel","newImage","createFrom","components","ptr","data","i","length","channels","red","green","blue","black","Math","min","maxValue","cyan","magenta","yellow","round"],"mappings":"AAAA;AACA;AAEA,OAAOA,KAAP,MAAkB,UAAlB;AACA,SAASC,GAAT,EAAcC,IAAd,QAA0B,gBAA1B;AAEA;;;;;;;;;;;;AAWA,eAAe,SAASC,IAAT,GAAgB;AAC7B,OAAKC,gBAAL,CAAsB,MAAtB,EAA8B;AAC5BC,IAAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,EAAJ,CADkB;AAE5BC,IAAAA,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ,CAFqB;AAG5BC,IAAAA,UAAU,EAAE,CAACN,GAAD;AAHgB,GAA9B;AAMA,MAAIO,QAAQ,GAAGR,KAAK,CAACS,UAAN,CAAiB,IAAjB,EAAuB;AACpCC,IAAAA,UAAU,EAAE,CADwB;AAEpCH,IAAAA,UAAU,EAAEL;AAFwB,GAAvB,CAAf;AAKA,MAAIS,GAAG,GAAG,CAAV;AACA,MAAIC,IAAI,GAAG,KAAKA,IAAhB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,IAAI,CAACE,MAAzB,EAAiCD,CAAC,IAAI,KAAKE,QAA3C,EAAqD;AACnD,QAAIC,GAAG,GAAGJ,IAAI,CAACC,CAAD,CAAd;AACA,QAAII,KAAK,GAAGL,IAAI,CAACC,CAAC,GAAG,CAAL,CAAhB;AACA,QAAIK,IAAI,GAAGN,IAAI,CAACC,CAAC,GAAG,CAAL,CAAf;AAEA,QAAIM,KAAK,GAAGC,IAAI,CAACC,GAAL,CACV,KAAKC,QAAL,GAAgBN,GADN,EAEV,KAAKM,QAAL,GAAgBL,KAFN,EAGV,KAAKK,QAAL,GAAgBJ,IAHN,CAAZ;AAKA,QAAIK,IAAI,GAAG,CAAC,KAAKD,QAAL,GAAgBN,GAAhB,GAAsBG,KAAvB,KAAiC,IAAIA,KAAK,GAAG,KAAKG,QAAlD,CAAX;AACA,QAAIE,OAAO,GAAG,CAAC,KAAKF,QAAL,GAAgBL,KAAhB,GAAwBE,KAAzB,KAAmC,IAAIA,KAAK,GAAG,KAAKG,QAApD,CAAd;AACA,QAAIG,MAAM,GAAG,CAAC,KAAKH,QAAL,GAAgBJ,IAAhB,GAAuBC,KAAxB,KAAkC,IAAIA,KAAK,GAAG,KAAKG,QAAnD,CAAb;AAEAd,IAAAA,QAAQ,CAACI,IAAT,CAAcD,GAAG,EAAjB,IAAuBS,IAAI,CAACM,KAAL,CAAWH,IAAX,CAAvB;AACAf,IAAAA,QAAQ,CAACI,IAAT,CAAcD,GAAG,EAAjB,IAAuBS,IAAI,CAACM,KAAL,CAAWF,OAAX,CAAvB;AACAhB,IAAAA,QAAQ,CAACI,IAAT,CAAcD,GAAG,EAAjB,IAAuBS,IAAI,CAACM,KAAL,CAAWD,MAAX,CAAvB;AACAjB,IAAAA,QAAQ,CAACI,IAAT,CAAcD,GAAG,EAAjB,IAAuBS,IAAI,CAACM,KAAL,CAAWP,KAAX,CAAvB;;AACA,QAAI,KAAKb,KAAT,EAAgB;AACdE,MAAAA,QAAQ,CAACI,IAAT,CAAcD,GAAG,EAAjB,IAAuBC,IAAI,CAACC,CAAC,GAAG,CAAL,CAA3B;AACD;AACF;;AAED,SAAOL,QAAP;AACD","sourcesContent":["// http://www.easyrgb.com/index.php?X=MATH&H=18#text18\n// check rgbToHsl : https://bgrins.github.io/TinyColor/docs/tinycolor.html\n\nimport Image from '../Image';\nimport { RGB, CMYK } from '../model/model';\n\n/**\n * Make a copy of the current image and convert the color model to CMYK\n * The source image has to be RGB !\n * @memberof Image\n * @instance\n * @return {Image} - New image in CMYK color model\n * @example\n * var cmykImage = image.cmyk();\n * // we can create one image per channel\n * var channels = cmykImage.split();\n */\nexport default function cmyk() {\n  this.checkProcessable('cmyk', {\n    bitDepth: [8, 16],\n    alpha: [0, 1],\n    colorModel: [RGB],\n  });\n\n  let newImage = Image.createFrom(this, {\n    components: 4,\n    colorModel: CMYK,\n  });\n\n  let ptr = 0;\n  let data = this.data;\n  for (let i = 0; i < data.length; i += this.channels) {\n    let red = data[i];\n    let green = data[i + 1];\n    let blue = data[i + 2];\n\n    let black = Math.min(\n      this.maxValue - red,\n      this.maxValue - green,\n      this.maxValue - blue,\n    );\n    let cyan = (this.maxValue - red - black) / (1 - black / this.maxValue);\n    let magenta = (this.maxValue - green - black) / (1 - black / this.maxValue);\n    let yellow = (this.maxValue - blue - black) / (1 - black / this.maxValue);\n\n    newImage.data[ptr++] = Math.round(cyan);\n    newImage.data[ptr++] = Math.round(magenta);\n    newImage.data[ptr++] = Math.round(yellow);\n    newImage.data[ptr++] = Math.round(black);\n    if (this.alpha) {\n      newImage.data[ptr++] = data[i + 3];\n    }\n  }\n\n  return newImage;\n}\n"]},"metadata":{},"sourceType":"module"}