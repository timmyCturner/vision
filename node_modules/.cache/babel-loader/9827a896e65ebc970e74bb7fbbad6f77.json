{"ast":null,"code":"/**\n * This function is the black top hat (also called black hat).\n * In mathematical morphology and digital image processing,\n * top-hat transform is an operation that extracts small elements and details from given images.\n * The black top-hat transform is defined dually as the difference between the closed and the input image.\n * Top-hat transforms are used for various image processing tasks, such as feature extraction, background equalization,\n * image enhancement, and others. (Wikipedia)\n * http://docs.opencv.org/2.4/doc/tutorials/imgproc/opening_closing_hats/opening_closing_hats.html\n * @memberof Image\n * @instance\n * @param {object} [options]\n * @param {Array<Array<number>>} [options.kernel] - The kernel can only have ones and zeros. Default: [[1, 1, 1], [1, 1, 1], [1, 1, 1]]\n * @param {number} [options.iterations=1] - Number of iterations of the morphological transform\n * @return {Image}\n */\nexport default function blackHat(options = {}) {\n  let {\n    kernel = [[1, 1, 1], [1, 1, 1], [1, 1, 1]],\n    iterations = 1\n  } = options;\n  this.checkProcessable('blackHat', {\n    bitDepth: [8, 16],\n    components: 1,\n    alpha: 0\n  });\n\n  if (kernel.columns % 2 === 0 || kernel.rows % 2 === 0) {\n    throw new TypeError('blackHat: The number of rows and columns of the kernel must be odd');\n  }\n\n  let newImage = this;\n\n  for (let i = 0; i < iterations; i++) {\n    const closeImage = newImage.close({\n      kernel\n    });\n    newImage = closeImage.subtractImage(newImage, {\n      absolute: true\n    });\n  }\n\n  return newImage;\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/node_modules/image-js/src/image/morphology/blackHat.js"],"names":["blackHat","options","kernel","iterations","checkProcessable","bitDepth","components","alpha","columns","rows","TypeError","newImage","i","closeImage","close","subtractImage","absolute"],"mappings":"AAAA;;;;;;;;;;;;;;;AAeA,eAAe,SAASA,QAAT,CAAkBC,OAAO,GAAG,EAA5B,EAAgC;AAC7C,MAAI;AACFC,IAAAA,MAAM,GAAG,CACP,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADO,EAEP,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFO,EAGP,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAHO,CADP;AAMFC,IAAAA,UAAU,GAAG;AANX,MAOAF,OAPJ;AASA,OAAKG,gBAAL,CAAsB,UAAtB,EAAkC;AAChCC,IAAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,EAAJ,CADsB;AAEhCC,IAAAA,UAAU,EAAE,CAFoB;AAGhCC,IAAAA,KAAK,EAAE;AAHyB,GAAlC;;AAKA,MAAIL,MAAM,CAACM,OAAP,GAAiB,CAAjB,KAAuB,CAAvB,IAA4BN,MAAM,CAACO,IAAP,GAAc,CAAd,KAAoB,CAApD,EAAuD;AACrD,UAAM,IAAIC,SAAJ,CACJ,oEADI,CAAN;AAGD;;AAED,MAAIC,QAAQ,GAAG,IAAf;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,UAApB,EAAgCS,CAAC,EAAjC,EAAqC;AACnC,UAAMC,UAAU,GAAGF,QAAQ,CAACG,KAAT,CAAe;AAAEZ,MAAAA;AAAF,KAAf,CAAnB;AACAS,IAAAA,QAAQ,GAAGE,UAAU,CAACE,aAAX,CAAyBJ,QAAzB,EAAmC;AAAEK,MAAAA,QAAQ,EAAE;AAAZ,KAAnC,CAAX;AACD;;AACD,SAAOL,QAAP;AACD","sourcesContent":["/**\n * This function is the black top hat (also called black hat).\n * In mathematical morphology and digital image processing,\n * top-hat transform is an operation that extracts small elements and details from given images.\n * The black top-hat transform is defined dually as the difference between the closed and the input image.\n * Top-hat transforms are used for various image processing tasks, such as feature extraction, background equalization,\n * image enhancement, and others. (Wikipedia)\n * http://docs.opencv.org/2.4/doc/tutorials/imgproc/opening_closing_hats/opening_closing_hats.html\n * @memberof Image\n * @instance\n * @param {object} [options]\n * @param {Array<Array<number>>} [options.kernel] - The kernel can only have ones and zeros. Default: [[1, 1, 1], [1, 1, 1], [1, 1, 1]]\n * @param {number} [options.iterations=1] - Number of iterations of the morphological transform\n * @return {Image}\n */\nexport default function blackHat(options = {}) {\n  let {\n    kernel = [\n      [1, 1, 1],\n      [1, 1, 1],\n      [1, 1, 1],\n    ],\n    iterations = 1,\n  } = options;\n\n  this.checkProcessable('blackHat', {\n    bitDepth: [8, 16],\n    components: 1,\n    alpha: 0,\n  });\n  if (kernel.columns % 2 === 0 || kernel.rows % 2 === 0) {\n    throw new TypeError(\n      'blackHat: The number of rows and columns of the kernel must be odd',\n    );\n  }\n\n  let newImage = this;\n  for (let i = 0; i < iterations; i++) {\n    const closeImage = newImage.close({ kernel });\n    newImage = closeImage.subtractImage(newImage, { absolute: true });\n  }\n  return newImage;\n}\n"]},"metadata":{},"sourceType":"module"}