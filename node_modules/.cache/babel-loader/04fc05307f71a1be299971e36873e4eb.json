{"ast":null,"code":"import * as exif from './tags/exif';\nimport * as gps from './tags/gps';\nimport * as standard from './tags/standard';\nconst tags = {\n  standard,\n  exif,\n  gps\n};\nexport default class IFD {\n  constructor(kind) {\n    if (!kind) {\n      throw new Error('missing kind');\n    }\n\n    this.data = new Uint8Array();\n    this.fields = new Map();\n    this.kind = kind;\n    this._hasMap = false;\n    this._map = {};\n  }\n\n  get(tag) {\n    if (typeof tag === 'number') {\n      return this.fields.get(tag);\n    } else if (typeof tag === 'string') {\n      return this.fields.get(tags[this.kind].tagsByName[tag]);\n    } else {\n      throw new Error('expected a number or string');\n    }\n  }\n\n  get map() {\n    if (!this._hasMap) {\n      const taglist = tags[this.kind].tagsById;\n\n      for (let key of this.fields.keys()) {\n        if (taglist[key]) {\n          this._map[taglist[key]] = this.fields.get(key);\n        }\n      }\n\n      this._hasMap = true;\n    }\n\n    return this._map;\n  }\n\n}","map":{"version":3,"sources":["../src/ifd.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,IAAZ,MAAsB,aAAtB;AACA,OAAO,KAAK,GAAZ,MAAqB,YAArB;AACA,OAAO,KAAK,QAAZ,MAA0B,iBAA1B;AAGA,MAAM,IAAI,GAAG;AACX,EAAA,QADW;AAEX,EAAA,IAFW;AAGX,EAAA;AAHW,CAAb;AAMA,eAAc,MAAO,GAAP,CAAU;AAUtB,EAAA,WAAA,CAAmB,IAAnB,EAAgC;AAC9B,QAAI,CAAC,IAAL,EAAW;AACT,YAAM,IAAI,KAAJ,CAAU,cAAV,CAAN;AACD;;AACD,SAAK,IAAL,GAAY,IAAI,UAAJ,EAAZ;AACA,SAAK,MAAL,GAAc,IAAI,GAAJ,EAAd;AACA,SAAK,IAAL,GAAY,IAAZ;AACA,SAAK,OAAL,GAAe,KAAf;AACA,SAAK,IAAL,GAAY,EAAZ;AACD;;AAEM,EAAA,GAAG,CAAC,GAAD,EAAqB;AAC7B,QAAI,OAAO,GAAP,KAAe,QAAnB,EAA6B;AAC3B,aAAO,KAAK,MAAL,CAAY,GAAZ,CAAgB,GAAhB,CAAP;AACD,KAFD,MAEO,IAAI,OAAO,GAAP,KAAe,QAAnB,EAA6B;AAClC,aAAO,KAAK,MAAL,CAAY,GAAZ,CAAgB,IAAI,CAAC,KAAK,IAAN,CAAJ,CAAgB,UAAhB,CAA2B,GAA3B,CAAhB,CAAP;AACD,KAFM,MAEA;AACL,YAAM,IAAI,KAAJ,CAAU,6BAAV,CAAN;AACD;AACF;;AAED,MAAW,GAAX,GAAc;AACZ,QAAI,CAAC,KAAK,OAAV,EAAmB;AACjB,YAAM,OAAO,GAAG,IAAI,CAAC,KAAK,IAAN,CAAJ,CAAgB,QAAhC;;AACA,WAAK,IAAI,GAAT,IAAgB,KAAK,MAAL,CAAY,IAAZ,EAAhB,EAAoC;AAClC,YAAI,OAAO,CAAC,GAAD,CAAX,EAAkB;AAChB,eAAK,IAAL,CAAU,OAAO,CAAC,GAAD,CAAjB,IAA0B,KAAK,MAAL,CAAY,GAAZ,CAAgB,GAAhB,CAA1B;AACD;AACF;;AACD,WAAK,OAAL,GAAe,IAAf;AACD;;AACD,WAAO,KAAK,IAAZ;AACD;;AA1CqB","sourceRoot":"","sourcesContent":["import * as exif from './tags/exif';\r\nimport * as gps from './tags/gps';\r\nimport * as standard from './tags/standard';\r\nconst tags = {\r\n    standard,\r\n    exif,\r\n    gps,\r\n};\r\nexport default class IFD {\r\n    constructor(kind) {\r\n        if (!kind) {\r\n            throw new Error('missing kind');\r\n        }\r\n        this.data = new Uint8Array();\r\n        this.fields = new Map();\r\n        this.kind = kind;\r\n        this._hasMap = false;\r\n        this._map = {};\r\n    }\r\n    get(tag) {\r\n        if (typeof tag === 'number') {\r\n            return this.fields.get(tag);\r\n        }\r\n        else if (typeof tag === 'string') {\r\n            return this.fields.get(tags[this.kind].tagsByName[tag]);\r\n        }\r\n        else {\r\n            throw new Error('expected a number or string');\r\n        }\r\n    }\r\n    get map() {\r\n        if (!this._hasMap) {\r\n            const taglist = tags[this.kind].tagsById;\r\n            for (let key of this.fields.keys()) {\r\n                if (taglist[key]) {\r\n                    this._map[taglist[key]] = this.fields.get(key);\r\n                }\r\n            }\r\n            this._hasMap = true;\r\n        }\r\n        return this._map;\r\n    }\r\n}\r\n//# sourceMappingURL=ifd.js.map"]},"metadata":{},"sourceType":"module"}