{"ast":null,"code":"/*\n * base64-arraybuffer\n * https://github.com/niklasvh/base64-arraybuffer\n *\n * Copyright (c) 2012 Niklas von Hertzen\n * Licensed under the MIT license.\n */\nlet chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'; // Use a lookup table to find the index.\n\nlet lookup = new Uint8Array(256);\n\nfor (let i = 0; i < chars.length; i++) {\n  lookup[chars.charCodeAt(i)] = i;\n}\n\nexport function encode(bytes) {\n  let i;\n  let len = bytes.length;\n  let base64 = '';\n\n  for (i = 0; i < len; i += 3) {\n    base64 += chars[bytes[i] >> 2];\n    base64 += chars[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];\n    base64 += chars[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];\n    base64 += chars[bytes[i + 2] & 63];\n  }\n\n  if (len % 3 === 2) {\n    base64 = `${base64.substring(0, base64.length - 1)}=`;\n  } else if (len % 3 === 1) {\n    base64 = `${base64.substring(0, base64.length - 2)}==`;\n  }\n\n  return base64;\n}\nexport function decode(base64) {\n  let bufferLength = base64.length * 0.75;\n  let len = base64.length;\n  let p = 0;\n  let encoded1, encoded2, encoded3, encoded4;\n\n  if (base64[base64.length - 1] === '=') {\n    bufferLength--;\n\n    if (base64[base64.length - 2] === '=') {\n      bufferLength--;\n    }\n  }\n\n  const bytes = new Uint8Array(bufferLength);\n\n  for (let i = 0; i < len; i += 4) {\n    encoded1 = lookup[base64.charCodeAt(i)];\n    encoded2 = lookup[base64.charCodeAt(i + 1)];\n    encoded3 = lookup[base64.charCodeAt(i + 2)];\n    encoded4 = lookup[base64.charCodeAt(i + 3)];\n    bytes[p++] = encoded1 << 2 | encoded2 >> 4;\n    bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;\n    bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;\n  }\n\n  return bytes;\n}\nexport function toBase64URL(u8, type) {\n  const base64 = encode(u8);\n  return `data:${type};base64,${base64}`;\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/node_modules/image-js/src/util/base64.js"],"names":["chars","lookup","Uint8Array","i","length","charCodeAt","encode","bytes","len","base64","substring","decode","bufferLength","p","encoded1","encoded2","encoded3","encoded4","toBase64URL","u8","type"],"mappings":"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","sourcesContent":["/*\n * base64-arraybuffer\n * https://github.com/niklasvh/base64-arraybuffer\n *\n * Copyright (c) 2012 Niklas von Hertzen\n * Licensed under the MIT license.\n */\n\nlet chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\n// Use a lookup table to find the index.\nlet lookup = new Uint8Array(256);\nfor (let i = 0; i < chars.length; i++) {\n  lookup[chars.charCodeAt(i)] = i;\n}\n\nexport function encode(bytes) {\n  let i;\n  let len = bytes.length;\n  let base64 = '';\n\n  for (i = 0; i < len; i += 3) {\n    base64 += chars[bytes[i] >> 2];\n    base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];\n    base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];\n    base64 += chars[bytes[i + 2] & 63];\n  }\n\n  if (len % 3 === 2) {\n    base64 = `${base64.substring(0, base64.length - 1)}=`;\n  } else if (len % 3 === 1) {\n    base64 = `${base64.substring(0, base64.length - 2)}==`;\n  }\n\n  return base64;\n}\n\nexport function decode(base64) {\n  let bufferLength = base64.length * 0.75;\n  let len = base64.length;\n  let p = 0;\n  let encoded1, encoded2, encoded3, encoded4;\n\n  if (base64[base64.length - 1] === '=') {\n    bufferLength--;\n    if (base64[base64.length - 2] === '=') {\n      bufferLength--;\n    }\n  }\n\n  const bytes = new Uint8Array(bufferLength);\n\n  for (let i = 0; i < len; i += 4) {\n    encoded1 = lookup[base64.charCodeAt(i)];\n    encoded2 = lookup[base64.charCodeAt(i + 1)];\n    encoded3 = lookup[base64.charCodeAt(i + 2)];\n    encoded4 = lookup[base64.charCodeAt(i + 3)];\n\n    bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);\n    bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);\n    bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);\n  }\n\n  return bytes;\n}\n\nexport function toBase64URL(u8, type) {\n  const base64 = encode(u8);\n  return `data:${type};base64,${base64}`;\n}\n"]},"metadata":{},"sourceType":"module"}