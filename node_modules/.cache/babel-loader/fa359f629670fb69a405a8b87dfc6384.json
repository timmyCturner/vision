{"ast":null,"code":"// See http://imagej.nih.gov/ij/download/tools/source/ij/process/AutoThresholder.java\n// W. Doyle, \"Operation useful for similarity-invariant pattern recognition,\"\n// Journal of the Association for Computing Machinery, vol. 9,pp. 259-267, 1962.\n// ported to ImageJ plugin by G.Landini from Antti Niemisto's Matlab code (GPL)\n// Original Matlab code Copyright (C) 2004 Antti Niemisto\n// See http://www.cs.tut.fi/~ant/histthresh/ for an excellent slide presentation\n// and the original Matlab code.\nexport default function percentile(histogram) {\n  let threshold = -1;\n  let percentile = 0.5; // default fraction of foreground pixels\n\n  let avec = new Array(histogram.length);\n  let total = partialSum(histogram, histogram.length - 1);\n  let temp = 1.0;\n\n  for (let i = 0; i < histogram.length; i++) {\n    avec[i] = Math.abs(partialSum(histogram, i) / total - percentile);\n\n    if (avec[i] < temp) {\n      temp = avec[i];\n      threshold = i;\n    }\n  }\n\n  return threshold;\n}\n\nfunction partialSum(histogram, endIndex) {\n  let x = 0;\n\n  for (let i = 0; i <= endIndex; i++) {\n    x += histogram[i];\n  }\n\n  return x;\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/node_modules/image-js/src/image/transform/mask/percentile.js"],"names":["percentile","histogram","threshold","avec","Array","length","total","partialSum","temp","i","Math","abs","endIndex","x"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASA,UAAT,CAAoBC,SAApB,EAA+B;AAC5C,MAAIC,SAAS,GAAG,CAAC,CAAjB;AACA,MAAIF,UAAU,GAAG,GAAjB,CAF4C,CAEtB;;AACtB,MAAIG,IAAI,GAAG,IAAIC,KAAJ,CAAUH,SAAS,CAACI,MAApB,CAAX;AAEA,MAAIC,KAAK,GAAGC,UAAU,CAACN,SAAD,EAAYA,SAAS,CAACI,MAAV,GAAmB,CAA/B,CAAtB;AACA,MAAIG,IAAI,GAAG,GAAX;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,SAAS,CAACI,MAA9B,EAAsCI,CAAC,EAAvC,EAA2C;AACzCN,IAAAA,IAAI,CAACM,CAAD,CAAJ,GAAUC,IAAI,CAACC,GAAL,CAASJ,UAAU,CAACN,SAAD,EAAYQ,CAAZ,CAAV,GAA2BH,KAA3B,GAAmCN,UAA5C,CAAV;;AACA,QAAIG,IAAI,CAACM,CAAD,CAAJ,GAAUD,IAAd,EAAoB;AAClBA,MAAAA,IAAI,GAAGL,IAAI,CAACM,CAAD,CAAX;AACAP,MAAAA,SAAS,GAAGO,CAAZ;AACD;AACF;;AAED,SAAOP,SAAP;AACD;;AAED,SAASK,UAAT,CAAoBN,SAApB,EAA+BW,QAA/B,EAAyC;AACvC,MAAIC,CAAC,GAAG,CAAR;;AACA,OAAK,IAAIJ,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIG,QAArB,EAA+BH,CAAC,EAAhC,EAAoC;AAClCI,IAAAA,CAAC,IAAIZ,SAAS,CAACQ,CAAD,CAAd;AACD;;AACD,SAAOI,CAAP;AACD","sourcesContent":["// See http://imagej.nih.gov/ij/download/tools/source/ij/process/AutoThresholder.java\n// W. Doyle, \"Operation useful for similarity-invariant pattern recognition,\"\n// Journal of the Association for Computing Machinery, vol. 9,pp. 259-267, 1962.\n// ported to ImageJ plugin by G.Landini from Antti Niemisto's Matlab code (GPL)\n// Original Matlab code Copyright (C) 2004 Antti Niemisto\n// See http://www.cs.tut.fi/~ant/histthresh/ for an excellent slide presentation\n// and the original Matlab code.\nexport default function percentile(histogram) {\n  let threshold = -1;\n  let percentile = 0.5; // default fraction of foreground pixels\n  let avec = new Array(histogram.length);\n\n  let total = partialSum(histogram, histogram.length - 1);\n  let temp = 1.0;\n\n  for (let i = 0; i < histogram.length; i++) {\n    avec[i] = Math.abs(partialSum(histogram, i) / total - percentile);\n    if (avec[i] < temp) {\n      temp = avec[i];\n      threshold = i;\n    }\n  }\n\n  return threshold;\n}\n\nfunction partialSum(histogram, endIndex) {\n  let x = 0;\n  for (let i = 0; i <= endIndex; i++) {\n    x += histogram[i];\n  }\n  return x;\n}\n"]},"metadata":{},"sourceType":"module"}