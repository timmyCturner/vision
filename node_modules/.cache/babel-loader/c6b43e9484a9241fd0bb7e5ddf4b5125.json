{"ast":null,"code":"import { getColors } from '../../util/color';\n/**\n * Paint polylines on the current image.\n * @memberof Image\n * @instance\n * @param {Array<Array<number>>} polylines - Array of array of [x,y] points\n * @param {object} [options]\n * @param {Array<number>|string}     [options.color] - Array of 3 elements (R, G, B) or a valid css color.\n * @param {Array<Array<number>>|Array<string>} [options.colors] - Array of Array of 3 elements (R, G, B) for each color of each mask\n * @param {boolean}             [options.randomColors=true] - To paint each mask with a random color if color and colors are undefined\n * @param {boolean}             [options.distinctColors=false] - To paint each mask with a different color if color and colors are undefined\n * @param {object} [options.shape] - Definition of the shape, see Shape contructor.\n * @return {this} The original painted image\n */\n\nexport default function paintPolylines(polylines, options = {}) {\n  let optionsCopy = Object.assign({}, options);\n  this.checkProcessable('paintPolylines', {\n    bitDepth: [8, 16]\n  });\n  let colors = getColors(Object.assign({}, options, {\n    numberColors: polylines.length\n  }));\n\n  for (let i = 0; i < polylines.length; i++) {\n    optionsCopy.color = colors[i % colors.length];\n    this.paintPolyline(polylines[i], optionsCopy);\n  }\n\n  return this;\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/node_modules/image-js/src/image/operator/paintPolylines.js"],"names":["getColors","paintPolylines","polylines","options","optionsCopy","Object","assign","checkProcessable","bitDepth","colors","numberColors","length","i","color","paintPolyline"],"mappings":"AAAA,SAASA,SAAT,QAA0B,kBAA1B;AAEA;;;;;;;;;;;;;;AAaA,eAAe,SAASC,cAAT,CAAwBC,SAAxB,EAAmCC,OAAO,GAAG,EAA7C,EAAiD;AAC9D,MAAIC,WAAW,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,OAAlB,CAAlB;AAEA,OAAKI,gBAAL,CAAsB,gBAAtB,EAAwC;AACtCC,IAAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,EAAJ;AAD4B,GAAxC;AAIA,MAAIC,MAAM,GAAGT,SAAS,CACpBK,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,OAAlB,EAA2B;AAAEO,IAAAA,YAAY,EAAER,SAAS,CAACS;AAA1B,GAA3B,CADoB,CAAtB;;AAIA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,SAAS,CAACS,MAA9B,EAAsCC,CAAC,EAAvC,EAA2C;AACzCR,IAAAA,WAAW,CAACS,KAAZ,GAAoBJ,MAAM,CAACG,CAAC,GAAGH,MAAM,CAACE,MAAZ,CAA1B;AACA,SAAKG,aAAL,CAAmBZ,SAAS,CAACU,CAAD,CAA5B,EAAiCR,WAAjC;AACD;;AAED,SAAO,IAAP;AACD","sourcesContent":["import { getColors } from '../../util/color';\n\n/**\n * Paint polylines on the current image.\n * @memberof Image\n * @instance\n * @param {Array<Array<number>>} polylines - Array of array of [x,y] points\n * @param {object} [options]\n * @param {Array<number>|string}     [options.color] - Array of 3 elements (R, G, B) or a valid css color.\n * @param {Array<Array<number>>|Array<string>} [options.colors] - Array of Array of 3 elements (R, G, B) for each color of each mask\n * @param {boolean}             [options.randomColors=true] - To paint each mask with a random color if color and colors are undefined\n * @param {boolean}             [options.distinctColors=false] - To paint each mask with a different color if color and colors are undefined\n * @param {object} [options.shape] - Definition of the shape, see Shape contructor.\n * @return {this} The original painted image\n */\nexport default function paintPolylines(polylines, options = {}) {\n  let optionsCopy = Object.assign({}, options);\n\n  this.checkProcessable('paintPolylines', {\n    bitDepth: [8, 16],\n  });\n\n  let colors = getColors(\n    Object.assign({}, options, { numberColors: polylines.length }),\n  );\n\n  for (let i = 0; i < polylines.length; i++) {\n    optionsCopy.color = colors[i % colors.length];\n    this.paintPolyline(polylines[i], optionsCopy);\n  }\n\n  return this;\n}\n"]},"metadata":{},"sourceType":"module"}