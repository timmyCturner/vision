{"ast":null,"code":"const INIT_NUM_BUBBLES = 30; // always starts with 30 bubbles\n\nexport let hoveredBubbleData = {\n  mouseOver: false,\n  value: null\n};\nlet bubbles = []; // holds Bubble objects\n\nlet hoveredBubble = null;\nlet newHeight = 0;\n/**\r\n * Class for bubbles that float up from seabed on display\r\n */\n\nclass Bubble {\n  /**\r\n   * Constructor for bubbles\r\n   *\r\n   * @param {*} p p5 ptr\r\n   * @param {*} xstart Starting x-position\r\n   * @param {*} yspeed Speed of bubble rising to top\r\n   * @param {*} size Size of bubble\r\n   */\n  constructor(p, xstart, yspeed, size, value) {\n    // class for bubble objects\n    this.x = xstart; // starting x-position of bubbles\n\n    this.y = p.random(p.height - 150, p.height * 1.5); // starting y-position of bubbles under height\n\n    this.size = size;\n    this.yspeed = yspeed;\n    this.degree = 0;\n    this.value = value; // current value to date from data\n\n    /**\r\n     * Display bubble on sketch\r\n     */\n\n    this.display = function () {\n      p.fill(255, 255, 255, 50);\n      p.ellipse(this.x, this.y, size);\n      p.fill(255, 255, 255, 180);\n      p.ellipse(this.x + 0.2 * size, this.y - 0.2 * size, 0.2 * size); // bubble detail\n\n      if (hoveredBubbleData.mouseOver) {\n        p.fill(225, 225, 0, 70);\n        p.ellipse(this.x, this.y, size + 10);\n      }\n    };\n    /**\r\n     * Behavior for bubble movement\r\n     */\n\n\n    this.move = function () {\n      this.x += p.cos(p.radians(this.degree)); // base x-shifts on cosine waves\n\n      this.y += this.yspeed; // bubble movement speed\n\n      if (this.y < p.height * 0.63 - newHeight) {\n        this.y = p.height;\n      } // check if mouse is pressed and within range of bubble\n\n\n      if (p.mouseIsPressed && p.dist(p.mouseX, p.mouseY, this.x, this.y) < size) {\n        hoveredBubbleData.mouseOver = true;\n        hoveredBubble = this;\n      }\n\n      this.degree += p.random(0.0, 1.0);\n    };\n    /**\r\n     * Set bubble speed corresponding to data\r\n     *\r\n     * @param {*} new_speed Re-initialize bubble speed\r\n     */\n\n\n    this.setSpeed = function (new_speed) {\n      this.yspeed = new_speed;\n    };\n  }\n\n}\n/**\r\n * Set up methane bubbles on canvas\r\n *\r\n * @param {*} p p5 ptr\r\n */\n\n\nexport function setupMethaneBubbles(p, methaneData) {\n  // initialize at beginning with bubbles from starting date\n  // const AVG_START = methaneData.arr[0].average;\n  // const AVG_END = methaneData.arr[methaneData.arr.length - 1].average;\n  // const AVG_DIFF = AVG_END - AVG_START; // diff btwn curr avg and start avg\n  for (let i = 0; i < INIT_NUM_BUBBLES; i++) {\n    // initialize the bubbles\n    bubbles[i] = new Bubble(p, p.random(0, p.width), p.random(-1.5, -1), p.random(10, 20), null);\n  }\n}\n/**\r\n * Draw methane bubbles on sketch\r\n *\r\n * @param {*} p p5 ptr\r\n * @param {*} methaneData Object containing map and arr\r\n * @param {*} currentDate Current date stored in state\r\n */\n\nexport function drawMethaneBubbles(p, methaneData, currentDate, seaLevelRise) {\n  // create the bubbles and call their methods\n  //we wil add a new height to the starting height to make our landscape rise and fall\n  // with the date and sea seaLevelRise data\n  var currentYear = currentDate.getFullYear();\n  var index = currentYear - 1880;\n\n  if (index < 0) {\n    newHeight = 0;\n  }\n\n  if (currentYear > 2013) {\n    newHeight = seaLevelRise[2013 - 1880][1] * 3 + (currentYear - 2014) / 3;\n  } else {\n    newHeight = seaLevelRise[index][1] * 3;\n  } // make more bubbles and modify speed\n\n\n  let yyyy = new Intl.DateTimeFormat('en', {\n    year: 'numeric'\n  }).format(currentDate);\n  let mm = new Intl.DateTimeFormat('en', {\n    month: '2-digit'\n  }).format(currentDate);\n  let dd = \"01\";\n  let date = `${yyyy}-${mm}-${dd}`;\n  const AVG_START = methaneData.arr[0].average;\n  const DATE_START = methaneData.arr[0].date;\n\n  for (let i = 0; i < bubbles.length; i++) {\n    // check if mouse is hovering over bubble\n    // if not, move normally\n    // otherwise, compare current mouse position with initially selected bubble position\n    if (!hoveredBubbleData.mouseOver) {\n      bubbles[i].move();\n    } else if (p.dist(p.mouseX, p.mouseY, hoveredBubble.x, hoveredBubble.y) > hoveredBubble.size) {\n      hoveredBubbleData.mouseOver = false;\n    }\n\n    bubbles[i].display();\n  } // update bubble here\n\n\n  if (methaneData.map.get(date)) {\n    const AVG_CURRENT = methaneData.map.get(date);\n    const AVG_DIFF = AVG_CURRENT - AVG_START; // diff btwn curr avg and start avg\n\n    const AVG_RATIO = AVG_START / AVG_CURRENT;\n    const NEW_SIZE = parseInt(AVG_DIFF + INIT_NUM_BUBBLES); // update current data value\n\n    console.log(AVG_CURRENT);\n    hoveredBubbleData.value = AVG_CURRENT;\n\n    if (NEW_SIZE > bubbles.length) {\n      for (let j = bubbles.length; j < NEW_SIZE; j++) {\n        bubbles[j] = new Bubble(p, p.random(0, p.width), p.random(-2 / AVG_RATIO * 2, -1.5 / AVG_RATIO * 2), p.random(10, 20), AVG_CURRENT);\n      }\n    }\n\n    if (NEW_SIZE < bubbles.length) {\n      let diff = bubbles.length - NEW_SIZE;\n      bubbles = bubbles.splice(diff);\n    }\n  } else {\n    // set to null if no data available\n    hoveredBubbleData.value = null;\n    let new_yyyy = DATE_START.substring(0, 4);\n    let new_mm = DATE_START.substring(5, DATE_START.length).padStart(2, '0');\n    let new_dd = \"01\";\n    let new_date = new Date(`${new_yyyy}-${new_mm}-${new_dd}`); // use last known date (make sure to set first date to earliest and vice versa)\n    // update bubble here (could be < lower bound or > upper bound)\n\n    if (new_date >= currentDate) {\n      bubbles = bubbles.splice(0, INIT_NUM_BUBBLES);\n\n      for (let i = 0; i < INIT_NUM_BUBBLES; i++) {\n        bubbles[i].setSpeed(p.random(-1.5, -1));\n      }\n    }\n  }\n}","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/src/sketches/methaneBubbles.js"],"names":["INIT_NUM_BUBBLES","hoveredBubbleData","mouseOver","value","bubbles","hoveredBubble","newHeight","Bubble","constructor","p","xstart","yspeed","size","x","y","random","height","degree","display","fill","ellipse","move","cos","radians","mouseIsPressed","dist","mouseX","mouseY","setSpeed","new_speed","setupMethaneBubbles","methaneData","i","width","drawMethaneBubbles","currentDate","seaLevelRise","currentYear","getFullYear","index","yyyy","Intl","DateTimeFormat","year","format","mm","month","dd","date","AVG_START","arr","average","DATE_START","length","map","get","AVG_CURRENT","AVG_DIFF","AVG_RATIO","NEW_SIZE","parseInt","console","log","j","diff","splice","new_yyyy","substring","new_mm","padStart","new_dd","new_date","Date"],"mappings":"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","sourcesContent":["const INIT_NUM_BUBBLES = 30; // always starts with 30 bubbles\r\n\r\nexport let hoveredBubbleData = { mouseOver: false, value: null };\r\nlet bubbles = []; // holds Bubble objects\r\nlet hoveredBubble = null;\r\nlet newHeight = 0;\r\n/**\r\n * Class for bubbles that float up from seabed on display\r\n */\r\nclass Bubble {\r\n    /**\r\n     * Constructor for bubbles\r\n     *\r\n     * @param {*} p p5 ptr\r\n     * @param {*} xstart Starting x-position\r\n     * @param {*} yspeed Speed of bubble rising to top\r\n     * @param {*} size Size of bubble\r\n     */\r\n    constructor(p, xstart, yspeed, size, value) { // class for bubble objects\r\n        this.x = xstart; // starting x-position of bubbles\r\n        this.y = p.random(p.height - 150, p.height * 1.5); // starting y-position of bubbles under height\r\n        this.size = size;\r\n        this.yspeed = yspeed;\r\n        this.degree = 0;\r\n        this.value = value; // current value to date from data\r\n\r\n        /**\r\n         * Display bubble on sketch\r\n         */\r\n        this.display = function () {\r\n            p.fill(255, 255, 255, 50);\r\n            p.ellipse(this.x, this.y, size);\r\n            p.fill(255, 255, 255, 180);\r\n            p.ellipse(this.x + 0.2 * size, this.y - 0.2 * size, 0.2 * size); // bubble detail\r\n            if (hoveredBubbleData.mouseOver) {\r\n                p.fill(225, 225, 0, 70)\r\n                p.ellipse(this.x, this.y, size + 10);\r\n            }\r\n\r\n        };\r\n\r\n        /**\r\n         * Behavior for bubble movement\r\n         */\r\n        this.move = function () {\r\n            this.x += p.cos(p.radians(this.degree)); // base x-shifts on cosine waves\r\n            this.y += this.yspeed; // bubble movement speed\r\n            if (this.y < (p.height * 0.63) - newHeight) {\r\n                this.y = p.height;\r\n            }\r\n\r\n            // check if mouse is pressed and within range of bubble\r\n            if (p.mouseIsPressed && p.dist(p.mouseX, p.mouseY, this.x, this.y) < size) {\r\n                hoveredBubbleData.mouseOver = true;\r\n                hoveredBubble = this;\r\n            }\r\n\r\n            this.degree += p.random(0.0, 1.0);\r\n        };\r\n\r\n        /**\r\n         * Set bubble speed corresponding to data\r\n         *\r\n         * @param {*} new_speed Re-initialize bubble speed\r\n         */\r\n        this.setSpeed = function (new_speed) {\r\n            this.yspeed = new_speed;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Set up methane bubbles on canvas\r\n *\r\n * @param {*} p p5 ptr\r\n */\r\nexport function setupMethaneBubbles(p, methaneData) {\r\n    // initialize at beginning with bubbles from starting date\r\n    // const AVG_START = methaneData.arr[0].average;\r\n    // const AVG_END = methaneData.arr[methaneData.arr.length - 1].average;\r\n    // const AVG_DIFF = AVG_END - AVG_START; // diff btwn curr avg and start avg\r\n\r\n    for (let i = 0; i < INIT_NUM_BUBBLES; i++) { // initialize the bubbles\r\n        bubbles[i] = new Bubble(p,\r\n            p.random(0, p.width),\r\n            p.random(-1.5, -1),\r\n            p.random(10, 20),\r\n            null\r\n        );\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Draw methane bubbles on sketch\r\n *\r\n * @param {*} p p5 ptr\r\n * @param {*} methaneData Object containing map and arr\r\n * @param {*} currentDate Current date stored in state\r\n */\r\nexport function drawMethaneBubbles(p, methaneData, currentDate, seaLevelRise) { // create the bubbles and call their methods\r\n\r\n    //we wil add a new height to the starting height to make our landscape rise and fall\r\n    // with the date and sea seaLevelRise data\r\n\r\n    var currentYear = currentDate.getFullYear();\r\n    var index = currentYear - 1880;\r\n\r\n    if (index<0){\r\n      newHeight = 0\r\n    }\r\n    if (currentYear>2013)\r\n    {\r\n      newHeight = seaLevelRise[(2013-1880)][1]*3+((currentYear-2014))/3\r\n    }\r\n    else{\r\n      newHeight = seaLevelRise[index][1]*3\r\n    }\r\n\r\n    // make more bubbles and modify speed\r\n\r\n    let yyyy = new Intl.DateTimeFormat('en', { year: 'numeric' }).format(currentDate);\r\n    let mm = new Intl.DateTimeFormat('en', { month: '2-digit' }).format(currentDate);\r\n    let dd = \"01\"\r\n    let date = `${yyyy}-${mm}-${dd}`\r\n    const AVG_START = methaneData.arr[0].average;\r\n    const DATE_START = methaneData.arr[0].date;\r\n\r\n    for (let i = 0; i < bubbles.length; i++) {\r\n        // check if mouse is hovering over bubble\r\n        // if not, move normally\r\n        // otherwise, compare current mouse position with initially selected bubble position\r\n        if (!hoveredBubbleData.mouseOver) {\r\n            bubbles[i].move();\r\n        }\r\n        else if (p.dist(p.mouseX, p.mouseY, hoveredBubble.x, hoveredBubble.y) > hoveredBubble.size) {\r\n            hoveredBubbleData.mouseOver = false;\r\n        }\r\n        bubbles[i].display();\r\n    }\r\n\r\n    // update bubble here\r\n    if (methaneData.map.get(date)) {\r\n        const AVG_CURRENT = methaneData.map.get(date);\r\n        const AVG_DIFF = AVG_CURRENT - AVG_START; // diff btwn curr avg and start avg\r\n        const AVG_RATIO = AVG_START / AVG_CURRENT;\r\n        const NEW_SIZE = parseInt(AVG_DIFF + INIT_NUM_BUBBLES);\r\n\r\n        // update current data value\r\n        console.log(AVG_CURRENT);\r\n        hoveredBubbleData.value = AVG_CURRENT;\r\n\r\n        if (NEW_SIZE > bubbles.length) {\r\n            for (let j = bubbles.length; j < NEW_SIZE; j++) {\r\n                bubbles[j] = new Bubble(p,\r\n                    p.random(0, p.width),\r\n                    p.random(-2 / AVG_RATIO * 2, -1.5 / AVG_RATIO * 2),\r\n                    p.random(10, 20),\r\n                    AVG_CURRENT);\r\n            }\r\n        }\r\n\r\n        if (NEW_SIZE < bubbles.length) {\r\n            let diff = bubbles.length - NEW_SIZE;\r\n            bubbles = bubbles.splice(diff);\r\n        }\r\n    }\r\n    else {\r\n        // set to null if no data available\r\n        hoveredBubbleData.value = null;\r\n\r\n        let new_yyyy = DATE_START.substring(0, 4);\r\n        let new_mm = DATE_START.substring(5, DATE_START.length).padStart(2, '0');\r\n        let new_dd = \"01\"\r\n        let new_date = new Date(`${new_yyyy}-${new_mm}-${new_dd}`);\r\n        // use last known date (make sure to set first date to earliest and vice versa)\r\n        // update bubble here (could be < lower bound or > upper bound)\r\n        if (new_date >= currentDate) {\r\n            bubbles = bubbles.splice(0, INIT_NUM_BUBBLES);\r\n            for (let i = 0; i < INIT_NUM_BUBBLES; i++) {\r\n                bubbles[i].setSpeed(p.random(-1.5, -1));\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}