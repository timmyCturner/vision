{"ast":null,"code":"import Image from '../../../image/Image';\nconst defaultOptions = {\n  regression: {\n    kernelType: 'polynomial',\n    kernelOptions: {\n      degree: 2,\n      constant: 1\n    }\n  },\n  threshold: 0.02,\n  roi: {\n    minSurface: 100,\n    positive: false\n  },\n  sampling: 20,\n  include: []\n};\n\nfunction run(image, options, onStep) {\n  options = Object.assign({}, defaultOptions, options);\n  const manager = this.manager;\n\n  if (Array.isArray(image)) {\n    return Promise.all(image.map(function (img) {\n      const run = runOnce(manager, img, options);\n\n      if (typeof onStep === 'function') {\n        run.then(onStep);\n      }\n\n      return run;\n    }));\n  } else {\n    return runOnce(manager, image, options);\n  }\n}\n\nfunction runOnce(manager, image, options) {\n  return manager.post('data', [image, options]).then(function (response) {\n    for (let i in response) {\n      response[i] = new Image(response[i]);\n    }\n\n    return response;\n  });\n}\n\nfunction work() {\n  worker.on('data', function (send, image, options) {\n    image = new IJS(image);\n    const result = {};\n    const toTransfer = [];\n    const grey = image.grey();\n    const sobel = grey.sobelFilter();\n    maybeInclude('sobel', sobel);\n    const mask = sobel.level().mask({\n      threshold: options.threshold\n    });\n    maybeInclude('mask', mask);\n    const roiManager = sobel.getRoiManager();\n    roiManager.fromMask(mask);\n    const realMask = roiManager.getMask(options.roi);\n    maybeInclude('realMask', realMask);\n    const pixels = grey.getPixelsGrid({\n      sampling: options.sampling,\n      mask: realMask\n    });\n    const background = image.getBackground(pixels.xyS, pixels.zS, options.regression);\n    maybeInclude('background', background);\n    const corrected = image.subtract(background);\n    result.result = corrected;\n    toTransfer.push(corrected.data.buffer);\n    send(result, toTransfer);\n\n    function maybeInclude(name, image) {\n      if (options.include.includes(name)) {\n        result[name] = image;\n        toTransfer.push(image.data.buffer);\n      }\n    }\n  });\n}\n\nconst background = {\n  run,\n  work\n};\nexport default background;","map":{"version":3,"sources":["C:/Users/kuent/Documents/FinishDipshit/Creative/Ocean-Weather-Visualization/node_modules/image-js/src/browser/worker/process/background.js"],"names":["Image","defaultOptions","regression","kernelType","kernelOptions","degree","constant","threshold","roi","minSurface","positive","sampling","include","run","image","options","onStep","Object","assign","manager","Array","isArray","Promise","all","map","img","runOnce","then","post","response","i","work","worker","on","send","IJS","result","toTransfer","grey","sobel","sobelFilter","maybeInclude","mask","level","roiManager","getRoiManager","fromMask","realMask","getMask","pixels","getPixelsGrid","background","getBackground","xyS","zS","corrected","subtract","push","data","buffer","name","includes"],"mappings":"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","sourcesContent":["import Image from '../../../image/Image';\n\nconst defaultOptions = {\n  regression: {\n    kernelType: 'polynomial',\n    kernelOptions: { degree: 2, constant: 1 },\n  },\n  threshold: 0.02,\n  roi: {\n    minSurface: 100,\n    positive: false,\n  },\n  sampling: 20,\n  include: [],\n};\n\nfunction run(image, options, onStep) {\n  options = Object.assign({}, defaultOptions, options);\n  const manager = this.manager;\n  if (Array.isArray(image)) {\n    return Promise.all(\n      image.map(function (img) {\n        const run = runOnce(manager, img, options);\n        if (typeof onStep === 'function') {\n          run.then(onStep);\n        }\n        return run;\n      }),\n    );\n  } else {\n    return runOnce(manager, image, options);\n  }\n}\n\nfunction runOnce(manager, image, options) {\n  return manager.post('data', [image, options]).then(function (response) {\n    for (let i in response) {\n      response[i] = new Image(response[i]);\n    }\n    return response;\n  });\n}\n\nfunction work() {\n  worker.on('data', function (send, image, options) {\n    image = new IJS(image);\n    const result = {};\n    const toTransfer = [];\n\n    const grey = image.grey();\n\n    const sobel = grey.sobelFilter();\n    maybeInclude('sobel', sobel);\n\n    const mask = sobel.level().mask({ threshold: options.threshold });\n    maybeInclude('mask', mask);\n\n    const roiManager = sobel.getRoiManager();\n    roiManager.fromMask(mask);\n    const realMask = roiManager.getMask(options.roi);\n    maybeInclude('realMask', realMask);\n\n    const pixels = grey.getPixelsGrid({\n      sampling: options.sampling,\n      mask: realMask,\n    });\n\n    const background = image.getBackground(\n      pixels.xyS,\n      pixels.zS,\n      options.regression,\n    );\n    maybeInclude('background', background);\n\n    const corrected = image.subtract(background);\n\n    result.result = corrected;\n    toTransfer.push(corrected.data.buffer);\n    send(result, toTransfer);\n\n    function maybeInclude(name, image) {\n      if (options.include.includes(name)) {\n        result[name] = image;\n        toTransfer.push(image.data.buffer);\n      }\n    }\n  });\n}\n\nconst background = { run, work };\nexport default background;\n"]},"metadata":{},"sourceType":"module"}